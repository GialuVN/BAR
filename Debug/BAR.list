
BAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfe4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000100c  0800c0f0  0800c0f0  0001c0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0fc  0800d0fc  0002029c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d0fc  0800d0fc  0002029c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d0fc  0800d0fc  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0fc  0800d0fc  0001d0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d100  0800d100  0001d100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  0800d104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cd8  2000029c  0800d3a0  0002029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f74  0800d3a0  00022f74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eda2  00000000  00000000  000202c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004041  00000000  00000000  0003f067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  000430a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  00044528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c424  00000000  00000000  000457f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186a6  00000000  00000000  00061c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000914dd  00000000  00000000  0007a2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b797  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e84  00000000  00000000  0010b7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000029c 	.word	0x2000029c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c0d8 	.word	0x0800c0d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002a0 	.word	0x200002a0
 8000148:	0800c0d8 	.word	0x0800c0d8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd84 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f811 	bl	800017a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa72 	bl	8000640 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f9be 	bl	80004dc <MX_DMA_Init>
  MX_SPI2_Init();
 8000160:	f000 f866 	bl	8000230 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000164:	f000 f89a 	bl	800029c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000168:	f000 f8e6 	bl	8000338 <MX_TIM3_Init>
  MX_TIM4_Init();
 800016c:	f000 f934 	bl	80003d8 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000170:	f008 fd80 	bl	8008c74 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  _run();
 8000174:	f009 fa5e 	bl	8009634 <_run>
 8000178:	e7fc      	b.n	8000174 <main+0x28>

0800017a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b094      	sub	sp, #80	; 0x50
 800017e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000180:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000184:	2228      	movs	r2, #40	; 0x28
 8000186:	2100      	movs	r1, #0
 8000188:	4618      	mov	r0, r3
 800018a:	f00a ff91 	bl	800b0b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018e:	f107 0314 	add.w	r3, r7, #20
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001aa:	2301      	movs	r3, #1
 80001ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b4:	2300      	movs	r3, #0
 80001b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2301      	movs	r3, #1
 80001ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001bc:	2302      	movs	r3, #2
 80001be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d0:	4618      	mov	r0, r3
 80001d2:	f002 ffb5 	bl	8003140 <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001dc:	f000 fac4 	bl	8000768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e4:	2302      	movs	r3, #2
 80001e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f6:	f107 0314 	add.w	r3, r7, #20
 80001fa:	2102      	movs	r1, #2
 80001fc:	4618      	mov	r0, r3
 80001fe:	f003 fa1f 	bl	8003640 <HAL_RCC_ClockConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000208:	f000 faae 	bl	8000768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800020c:	2310      	movs	r3, #16
 800020e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000210:	2300      	movs	r3, #0
 8000212:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fb7a 	bl	8003910 <HAL_RCCEx_PeriphCLKConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000222:	f000 faa1 	bl	8000768 <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3750      	adds	r7, #80	; 0x50
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <MX_SPI2_Init+0x64>)
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <MX_SPI2_Init+0x68>)
 8000238:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <MX_SPI2_Init+0x64>)
 800023c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000240:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <MX_SPI2_Init+0x64>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <MX_SPI2_Init+0x64>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_SPI2_Init+0x64>)
 8000250:	2200      	movs	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <MX_SPI2_Init+0x64>)
 8000256:	2200      	movs	r2, #0
 8000258:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_SPI2_Init+0x64>)
 800025c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000260:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_SPI2_Init+0x64>)
 8000264:	2200      	movs	r2, #0
 8000266:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <MX_SPI2_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_SPI2_Init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <MX_SPI2_Init+0x64>)
 8000276:	2200      	movs	r2, #0
 8000278:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <MX_SPI2_Init+0x64>)
 800027c:	220a      	movs	r2, #10
 800027e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <MX_SPI2_Init+0x64>)
 8000282:	f003 fbfb 	bl	8003a7c <HAL_SPI_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800028c:	f000 fa6c 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000534 	.word	0x20000534
 8000298:	40003800 	.word	0x40003800

0800029c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a2:	f107 0308 	add.w	r3, r7, #8
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b0:	463b      	mov	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002b8:	4b1e      	ldr	r3, [pc, #120]	; (8000334 <MX_TIM2_Init+0x98>)
 80002ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 80002c0:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <MX_TIM2_Init+0x98>)
 80002c2:	2224      	movs	r2, #36	; 0x24
 80002c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c6:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <MX_TIM2_Init+0x98>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1366;
 80002cc:	4b19      	ldr	r3, [pc, #100]	; (8000334 <MX_TIM2_Init+0x98>)
 80002ce:	f240 5256 	movw	r2, #1366	; 0x556
 80002d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80002d4:	4b17      	ldr	r3, [pc, #92]	; (8000334 <MX_TIM2_Init+0x98>)
 80002d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <MX_TIM2_Init+0x98>)
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002e2:	4814      	ldr	r0, [pc, #80]	; (8000334 <MX_TIM2_Init+0x98>)
 80002e4:	f003 ff38 	bl	8004158 <HAL_TIM_Base_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002ee:	f000 fa3b 	bl	8000768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002f8:	f107 0308 	add.w	r3, r7, #8
 80002fc:	4619      	mov	r1, r3
 80002fe:	480d      	ldr	r0, [pc, #52]	; (8000334 <MX_TIM2_Init+0x98>)
 8000300:	f004 faf0 	bl	80048e4 <HAL_TIM_ConfigClockSource>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800030a:	f000 fa2d 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030e:	2300      	movs	r3, #0
 8000310:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000312:	2300      	movs	r3, #0
 8000314:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000316:	463b      	mov	r3, r7
 8000318:	4619      	mov	r1, r3
 800031a:	4806      	ldr	r0, [pc, #24]	; (8000334 <MX_TIM2_Init+0x98>)
 800031c:	f004 fe6e 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000326:	f000 fa1f 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	3718      	adds	r7, #24
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	200006e8 	.word	0x200006e8

08000338 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800034c:	463b      	mov	r3, r7
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000354:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <MX_TIM3_Init+0x98>)
 8000356:	4a1f      	ldr	r2, [pc, #124]	; (80003d4 <MX_TIM3_Init+0x9c>)
 8000358:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600;
 800035a:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <MX_TIM3_Init+0x98>)
 800035c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000360:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000362:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <MX_TIM3_Init+0x98>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000368:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <MX_TIM3_Init+0x98>)
 800036a:	f242 7210 	movw	r2, #10000	; 0x2710
 800036e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000370:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <MX_TIM3_Init+0x98>)
 8000372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000376:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <MX_TIM3_Init+0x98>)
 800037a:	2280      	movs	r2, #128	; 0x80
 800037c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800037e:	4814      	ldr	r0, [pc, #80]	; (80003d0 <MX_TIM3_Init+0x98>)
 8000380:	f003 feea 	bl	8004158 <HAL_TIM_Base_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800038a:	f000 f9ed 	bl	8000768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800038e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000392:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000394:	f107 0308 	add.w	r3, r7, #8
 8000398:	4619      	mov	r1, r3
 800039a:	480d      	ldr	r0, [pc, #52]	; (80003d0 <MX_TIM3_Init+0x98>)
 800039c:	f004 faa2 	bl	80048e4 <HAL_TIM_ConfigClockSource>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80003a6:	f000 f9df 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003aa:	2300      	movs	r3, #0
 80003ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003b2:	463b      	mov	r3, r7
 80003b4:	4619      	mov	r1, r3
 80003b6:	4806      	ldr	r0, [pc, #24]	; (80003d0 <MX_TIM3_Init+0x98>)
 80003b8:	f004 fe20 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80003c2:	f000 f9d1 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000618 	.word	0x20000618
 80003d4:	40000400 	.word	0x40000400

080003d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08e      	sub	sp, #56	; 0x38
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ec:	f107 0320 	add.w	r3, r7, #32
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
 8000404:	615a      	str	r2, [r3, #20]
 8000406:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000408:	4b32      	ldr	r3, [pc, #200]	; (80004d4 <MX_TIM4_Init+0xfc>)
 800040a:	4a33      	ldr	r2, [pc, #204]	; (80004d8 <MX_TIM4_Init+0x100>)
 800040c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 800040e:	4b31      	ldr	r3, [pc, #196]	; (80004d4 <MX_TIM4_Init+0xfc>)
 8000410:	220a      	movs	r2, #10
 8000412:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000414:	4b2f      	ldr	r3, [pc, #188]	; (80004d4 <MX_TIM4_Init+0xfc>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 254;
 800041a:	4b2e      	ldr	r3, [pc, #184]	; (80004d4 <MX_TIM4_Init+0xfc>)
 800041c:	22fe      	movs	r2, #254	; 0xfe
 800041e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000420:	4b2c      	ldr	r3, [pc, #176]	; (80004d4 <MX_TIM4_Init+0xfc>)
 8000422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000426:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000428:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <MX_TIM4_Init+0xfc>)
 800042a:	2200      	movs	r2, #0
 800042c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800042e:	4829      	ldr	r0, [pc, #164]	; (80004d4 <MX_TIM4_Init+0xfc>)
 8000430:	f003 fe92 	bl	8004158 <HAL_TIM_Base_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800043a:	f000 f995 	bl	8000768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800043e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000442:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000448:	4619      	mov	r1, r3
 800044a:	4822      	ldr	r0, [pc, #136]	; (80004d4 <MX_TIM4_Init+0xfc>)
 800044c:	f004 fa4a 	bl	80048e4 <HAL_TIM_ConfigClockSource>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000456:	f000 f987 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800045a:	481e      	ldr	r0, [pc, #120]	; (80004d4 <MX_TIM4_Init+0xfc>)
 800045c:	f003 ff1e 	bl	800429c <HAL_TIM_PWM_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000466:	f000 f97f 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046a:	2300      	movs	r3, #0
 800046c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046e:	2300      	movs	r3, #0
 8000470:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000472:	f107 0320 	add.w	r3, r7, #32
 8000476:	4619      	mov	r1, r3
 8000478:	4816      	ldr	r0, [pc, #88]	; (80004d4 <MX_TIM4_Init+0xfc>)
 800047a:	f004 fdbf 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000484:	f000 f970 	bl	8000768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000488:	2360      	movs	r3, #96	; 0x60
 800048a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	4619      	mov	r1, r3
 800049e:	480d      	ldr	r0, [pc, #52]	; (80004d4 <MX_TIM4_Init+0xfc>)
 80004a0:	f004 f962 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80004aa:	f000 f95d 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	220c      	movs	r2, #12
 80004b2:	4619      	mov	r1, r3
 80004b4:	4807      	ldr	r0, [pc, #28]	; (80004d4 <MX_TIM4_Init+0xfc>)
 80004b6:	f004 f957 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80004c0:	f000 f952 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <MX_TIM4_Init+0xfc>)
 80004c6:	f000 fa4f 	bl	8000968 <HAL_TIM_MspPostInit>

}
 80004ca:	bf00      	nop
 80004cc:	3738      	adds	r7, #56	; 0x38
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	2000058c 	.word	0x2000058c
 80004d8:	40000800 	.word	0x40000800

080004dc <MX_DMA_Init>:
  *   hdma_memtomem_dma1_channel4
  *   hdma_memtomem_dma1_channel1
  *   hdma_memtomem_dma1_channel7
  */
static void MX_DMA_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e2:	4b4e      	ldr	r3, [pc, #312]	; (800061c <MX_DMA_Init+0x140>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a4d      	ldr	r2, [pc, #308]	; (800061c <MX_DMA_Init+0x140>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b4b      	ldr	r3, [pc, #300]	; (800061c <MX_DMA_Init+0x140>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel6 on DMA1_Channel6 */
  hdma_memtomem_dma1_channel6.Instance = DMA1_Channel6;
 80004fa:	4b49      	ldr	r3, [pc, #292]	; (8000620 <MX_DMA_Init+0x144>)
 80004fc:	4a49      	ldr	r2, [pc, #292]	; (8000624 <MX_DMA_Init+0x148>)
 80004fe:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel6.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000500:	4b47      	ldr	r3, [pc, #284]	; (8000620 <MX_DMA_Init+0x144>)
 8000502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000506:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel6.Init.PeriphInc = DMA_PINC_ENABLE;
 8000508:	4b45      	ldr	r3, [pc, #276]	; (8000620 <MX_DMA_Init+0x144>)
 800050a:	2240      	movs	r2, #64	; 0x40
 800050c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel6.Init.MemInc = DMA_MINC_ENABLE;
 800050e:	4b44      	ldr	r3, [pc, #272]	; (8000620 <MX_DMA_Init+0x144>)
 8000510:	2280      	movs	r2, #128	; 0x80
 8000512:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel6.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000514:	4b42      	ldr	r3, [pc, #264]	; (8000620 <MX_DMA_Init+0x144>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel6.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800051a:	4b41      	ldr	r3, [pc, #260]	; (8000620 <MX_DMA_Init+0x144>)
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel6.Init.Mode = DMA_NORMAL;
 8000520:	4b3f      	ldr	r3, [pc, #252]	; (8000620 <MX_DMA_Init+0x144>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel6.Init.Priority = DMA_PRIORITY_LOW;
 8000526:	4b3e      	ldr	r3, [pc, #248]	; (8000620 <MX_DMA_Init+0x144>)
 8000528:	2200      	movs	r2, #0
 800052a:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel6) != HAL_OK)
 800052c:	483c      	ldr	r0, [pc, #240]	; (8000620 <MX_DMA_Init+0x144>)
 800052e:	f000 fd29 	bl	8000f84 <HAL_DMA_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_DMA_Init+0x60>
  {
    Error_Handler( );
 8000538:	f000 f916 	bl	8000768 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma1_channel4 on DMA1_Channel4 */
  hdma_memtomem_dma1_channel4.Instance = DMA1_Channel4;
 800053c:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <MX_DMA_Init+0x14c>)
 800053e:	4a3b      	ldr	r2, [pc, #236]	; (800062c <MX_DMA_Init+0x150>)
 8000540:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000542:	4b39      	ldr	r3, [pc, #228]	; (8000628 <MX_DMA_Init+0x14c>)
 8000544:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000548:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel4.Init.PeriphInc = DMA_PINC_ENABLE;
 800054a:	4b37      	ldr	r3, [pc, #220]	; (8000628 <MX_DMA_Init+0x14c>)
 800054c:	2240      	movs	r2, #64	; 0x40
 800054e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel4.Init.MemInc = DMA_MINC_ENABLE;
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <MX_DMA_Init+0x14c>)
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000556:	4b34      	ldr	r3, [pc, #208]	; (8000628 <MX_DMA_Init+0x14c>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800055c:	4b32      	ldr	r3, [pc, #200]	; (8000628 <MX_DMA_Init+0x14c>)
 800055e:	2200      	movs	r2, #0
 8000560:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel4.Init.Mode = DMA_NORMAL;
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <MX_DMA_Init+0x14c>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel4.Init.Priority = DMA_PRIORITY_LOW;
 8000568:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <MX_DMA_Init+0x14c>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel4) != HAL_OK)
 800056e:	482e      	ldr	r0, [pc, #184]	; (8000628 <MX_DMA_Init+0x14c>)
 8000570:	f000 fd08 	bl	8000f84 <HAL_DMA_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_DMA_Init+0xa2>
  {
    Error_Handler( );
 800057a:	f000 f8f5 	bl	8000768 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800057e:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <MX_DMA_Init+0x154>)
 8000580:	4a2c      	ldr	r2, [pc, #176]	; (8000634 <MX_DMA_Init+0x158>)
 8000582:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <MX_DMA_Init+0x154>)
 8000586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800058a:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <MX_DMA_Init+0x154>)
 800058e:	2240      	movs	r2, #64	; 0x40
 8000590:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_DMA_Init+0x154>)
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <MX_DMA_Init+0x154>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_DMA_Init+0x154>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <MX_DMA_Init+0x154>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 80005aa:	4b21      	ldr	r3, [pc, #132]	; (8000630 <MX_DMA_Init+0x154>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 80005b0:	481f      	ldr	r0, [pc, #124]	; (8000630 <MX_DMA_Init+0x154>)
 80005b2:	f000 fce7 	bl	8000f84 <HAL_DMA_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_DMA_Init+0xe4>
  {
    Error_Handler( );
 80005bc:	f000 f8d4 	bl	8000768 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma1_channel7 on DMA1_Channel7 */
  hdma_memtomem_dma1_channel7.Instance = DMA1_Channel7;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MX_DMA_Init+0x15c>)
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <MX_DMA_Init+0x160>)
 80005c4:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel7.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_DMA_Init+0x15c>)
 80005c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005cc:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel7.Init.PeriphInc = DMA_PINC_ENABLE;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_DMA_Init+0x15c>)
 80005d0:	2240      	movs	r2, #64	; 0x40
 80005d2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel7.Init.MemInc = DMA_MINC_ENABLE;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_DMA_Init+0x15c>)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel7.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <MX_DMA_Init+0x15c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel7.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_DMA_Init+0x15c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel7.Init.Mode = DMA_NORMAL;
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_DMA_Init+0x15c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel7.Init.Priority = DMA_PRIORITY_LOW;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_DMA_Init+0x15c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel7) != HAL_OK)
 80005f2:	4811      	ldr	r0, [pc, #68]	; (8000638 <MX_DMA_Init+0x15c>)
 80005f4:	f000 fcc6 	bl	8000f84 <HAL_DMA_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_DMA_Init+0x126>
  {
    Error_Handler( );
 80005fe:	f000 f8b3 	bl	8000768 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	200f      	movs	r0, #15
 8000608:	f000 fc85 	bl	8000f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800060c:	200f      	movs	r0, #15
 800060e:	f000 fc9e 	bl	8000f4e <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000
 8000620:	200005d4 	.word	0x200005d4
 8000624:	4002006c 	.word	0x4002006c
 8000628:	20000660 	.word	0x20000660
 800062c:	40020044 	.word	0x40020044
 8000630:	200006a4 	.word	0x200006a4
 8000634:	40020008 	.word	0x40020008
 8000638:	200004f0 	.word	0x200004f0
 800063c:	40020080 	.word	0x40020080

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000654:	4b40      	ldr	r3, [pc, #256]	; (8000758 <MX_GPIO_Init+0x118>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <MX_GPIO_Init+0x118>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <MX_GPIO_Init+0x118>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066c:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <MX_GPIO_Init+0x118>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a39      	ldr	r2, [pc, #228]	; (8000758 <MX_GPIO_Init+0x118>)
 8000672:	f043 0320 	orr.w	r3, r3, #32
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b37      	ldr	r3, [pc, #220]	; (8000758 <MX_GPIO_Init+0x118>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0320 	and.w	r3, r3, #32
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	4b34      	ldr	r3, [pc, #208]	; (8000758 <MX_GPIO_Init+0x118>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a33      	ldr	r2, [pc, #204]	; (8000758 <MX_GPIO_Init+0x118>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b31      	ldr	r3, [pc, #196]	; (8000758 <MX_GPIO_Init+0x118>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_GPIO_Init+0x118>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a2d      	ldr	r2, [pc, #180]	; (8000758 <MX_GPIO_Init+0x118>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <MX_GPIO_Init+0x118>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	4828      	ldr	r0, [pc, #160]	; (800075c <MX_GPIO_Init+0x11c>)
 80006bc:	f001 f84a 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS1_Pin|LAT_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80006c6:	4826      	ldr	r0, [pc, #152]	; (8000760 <MX_GPIO_Init+0x120>)
 80006c8:	f001 f844 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|GREEN_Pin|BLUE_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006d2:	4824      	ldr	r0, [pc, #144]	; (8000764 <MX_GPIO_Init+0x124>)
 80006d4:	f001 f83e 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	4619      	mov	r1, r3
 80006f0:	481a      	ldr	r0, [pc, #104]	; (800075c <MX_GPIO_Init+0x11c>)
 80006f2:	f000 feab 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS1_Pin LAT_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|LAT_Pin;
 80006f6:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80006fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2302      	movs	r3, #2
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4619      	mov	r1, r3
 800070e:	4814      	ldr	r0, [pc, #80]	; (8000760 <MX_GPIO_Init+0x120>)
 8000710:	f000 fe9c 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_Pin */
  GPIO_InitStruct.Pin = RED_Pin;
 8000714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800071e:	2301      	movs	r3, #1
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4619      	mov	r1, r3
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_GPIO_Init+0x124>)
 800072e:	f000 fe8d 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_Pin BLUE_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin|BLUE_Pin;
 8000732:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2302      	movs	r3, #2
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_GPIO_Init+0x124>)
 800074c:	f000 fe7e 	bl	800144c <HAL_GPIO_Init>

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	40011000 	.word	0x40011000
 8000760:	40010c00 	.word	0x40010c00
 8000764:	40010800 	.word	0x40010800

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  while (1)
  {



	  brigthness(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f00a fc33 	bl	800afdc <brigthness>
 8000776:	e7fb      	b.n	8000770 <Error_Handler+0x8>

08000778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_MspInit+0x5c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <HAL_MspInit+0x5c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_MspInit+0x5c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x5c>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_MspInit+0x5c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x5c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_MspInit+0x60>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_MspInit+0x60>)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010000 	.word	0x40010000

080007dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a2d      	ldr	r2, [pc, #180]	; (80008ac <HAL_SPI_MspInit+0xd0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d153      	bne.n	80008a4 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <HAL_SPI_MspInit+0xd4>)
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <HAL_SPI_MspInit+0xd4>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000806:	61d3      	str	r3, [r2, #28]
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <HAL_SPI_MspInit+0xd4>)
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000814:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <HAL_SPI_MspInit+0xd4>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a25      	ldr	r2, [pc, #148]	; (80008b0 <HAL_SPI_MspInit+0xd4>)
 800081a:	f043 0308 	orr.w	r3, r3, #8
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <HAL_SPI_MspInit+0xd4>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0308 	and.w	r3, r3, #8
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800082c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	481c      	ldr	r0, [pc, #112]	; (80008b4 <HAL_SPI_MspInit+0xd8>)
 8000842:	f000 fe03 	bl	800144c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 8000848:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <HAL_SPI_MspInit+0xe0>)
 800084a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 800084e:	2210      	movs	r2, #16
 8000850:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 8000872:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000876:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000878:	480f      	ldr	r0, [pc, #60]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 800087a:	f000 fb83 	bl	8000f84 <HAL_DMA_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <HAL_SPI_MspInit+0xac>
    {
      Error_Handler();
 8000884:	f7ff ff70 	bl	8000768 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 800088c:	649a      	str	r2, [r3, #72]	; 0x48
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	2024      	movs	r0, #36	; 0x24
 800089a:	f000 fb3c 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800089e:	2024      	movs	r0, #36	; 0x24
 80008a0:	f000 fb55 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008a4:	bf00      	nop
 80008a6:	3720      	adds	r7, #32
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40003800 	.word	0x40003800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	20000730 	.word	0x20000730
 80008bc:	40020058 	.word	0x40020058

080008c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008d0:	d114      	bne.n	80008fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <HAL_TIM_Base_MspInit+0x9c>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a21      	ldr	r2, [pc, #132]	; (800095c <HAL_TIM_Base_MspInit+0x9c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <HAL_TIM_Base_MspInit+0x9c>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2101      	movs	r1, #1
 80008ee:	201c      	movs	r0, #28
 80008f0:	f000 fb11 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008f4:	201c      	movs	r0, #28
 80008f6:	f000 fb2a 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80008fa:	e02a      	b.n	8000952 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a17      	ldr	r2, [pc, #92]	; (8000960 <HAL_TIM_Base_MspInit+0xa0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d114      	bne.n	8000930 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_TIM_Base_MspInit+0x9c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <HAL_TIM_Base_MspInit+0x9c>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_TIM_Base_MspInit+0x9c>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2103      	movs	r1, #3
 8000922:	201d      	movs	r0, #29
 8000924:	f000 faf7 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000928:	201d      	movs	r0, #29
 800092a:	f000 fb10 	bl	8000f4e <HAL_NVIC_EnableIRQ>
}
 800092e:	e010      	b.n	8000952 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <HAL_TIM_Base_MspInit+0xa4>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10b      	bne.n	8000952 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_TIM_Base_MspInit+0x9c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_TIM_Base_MspInit+0x9c>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_TIM_Base_MspInit+0x9c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000
 8000960:	40000400 	.word	0x40000400
 8000964:	40000800 	.word	0x40000800

08000968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <HAL_TIM_MspPostInit+0x5c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d118      	bne.n	80009ba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_TIM_MspPostInit+0x60>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <HAL_TIM_MspPostInit+0x60>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_TIM_MspPostInit+0x60>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80009a0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <HAL_TIM_MspPostInit+0x64>)
 80009b6:	f000 fd49 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3720      	adds	r7, #32
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40000800 	.word	0x40000800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010c00 	.word	0x40010c00

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a16:	f000 f967 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <DMA1_Channel5_IRQHandler+0x10>)
 8000a26:	f000 fbdd 	bl	80011e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000730 	.word	0x20000730

08000a34 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a3a:	f000 ffed 	bl	8001a18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200017f4 	.word	0x200017f4

08000a48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <TIM2_IRQHandler+0x10>)
 8000a4e:	f003 fd83 	bl	8004558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200006e8 	.word	0x200006e8

08000a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <TIM3_IRQHandler+0x10>)
 8000a62:	f003 fd79 	bl	8004558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000618 	.word	0x20000618

08000a70 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <SPI2_IRQHandler+0x10>)
 8000a76:	f003 f93b 	bl	8003cf0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000534 	.word	0x20000534

08000a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	return 1;
 8000a88:	2301      	movs	r3, #1
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr

08000a92 <_kill>:

int _kill(int pid, int sig)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a9c:	f00a fade 	bl	800b05c <__errno>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2216      	movs	r2, #22
 8000aa4:	601a      	str	r2, [r3, #0]
	return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_exit>:

void _exit (int status)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000aba:	f04f 31ff 	mov.w	r1, #4294967295
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ffe7 	bl	8000a92 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ac4:	e7fe      	b.n	8000ac4 <_exit+0x12>

08000ac6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e00a      	b.n	8000aee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ad8:	f3af 8000 	nop.w
 8000adc:	4601      	mov	r1, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	60ba      	str	r2, [r7, #8]
 8000ae4:	b2ca      	uxtb	r2, r1
 8000ae6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	dbf0      	blt.n	8000ad8 <_read+0x12>
	}

return len;
 8000af6:	687b      	ldr	r3, [r7, #4]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e009      	b.n	8000b26 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	dbf1      	blt.n	8000b12 <_write+0x12>
	}
	return len;
 8000b2e:	687b      	ldr	r3, [r7, #4]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_close>:

int _close(int file)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	return -1;
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <_isatty>:

int _isatty(int file)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	return 1;
 8000b74:	2301      	movs	r3, #1
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f00a fa48 	bl	800b05c <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20005000 	.word	0x20005000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	200002b8 	.word	0x200002b8
 8000c00:	20002f78 	.word	0x20002f78

08000c04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c12:	e003      	b.n	8000c1c <LoopCopyDataInit>

08000c14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c1a:	3104      	adds	r1, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c1c:	480a      	ldr	r0, [pc, #40]	; (8000c48 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c24:	d3f6      	bcc.n	8000c14 <CopyDataInit>
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c28:	e002      	b.n	8000c30 <LoopFillZerobss>

08000c2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c2c:	f842 3b04 	str.w	r3, [r2], #4

08000c30 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c34:	d3f9      	bcc.n	8000c2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c36:	f7ff ffe5 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f00a fa15 	bl	800b068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3e:	f7ff fa85 	bl	800014c <main>
  bx lr
 8000c42:	4770      	bx	lr
  ldr r3, =_sidata
 8000c44:	0800d104 	.word	0x0800d104
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c4c:	2000029c 	.word	0x2000029c
  ldr r2, =_sbss
 8000c50:	2000029c 	.word	0x2000029c
  ldr r3, = _ebss
 8000c54:	20002f74 	.word	0x20002f74

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x28>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x28>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f947 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fd7e 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40022000 	.word	0x40022000

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f95f 	bl	8000f6a <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f927 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x1c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x20>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <HAL_IncTick+0x20>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000774 	.word	0x20000774

08000d0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <HAL_GetTick+0x10>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000774 	.word	0x20000774

08000d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff fff0 	bl	8000d0c <HAL_GetTick>
 8000d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d38:	d005      	beq.n	8000d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_Delay+0x44>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d46:	bf00      	nop
 8000d48:	f7ff ffe0 	bl	8000d0c <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8f7      	bhi.n	8000d48 <HAL_Delay+0x28>
  {
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4906      	ldr	r1, [pc, #24]	; (8000e00 <__NVIC_EnableIRQ+0x34>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff90 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff2d 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff42 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff90 	bl	8000e58 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5f 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff35 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffa2 	bl	8000ebc <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e043      	b.n	8001022 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_DMA_Init+0xa8>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <HAL_DMA_Init+0xac>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	009a      	lsls	r2, r3, #2
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a1f      	ldr	r2, [pc, #124]	; (8001034 <HAL_DMA_Init+0xb0>)
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2202      	movs	r2, #2
 8000fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	bffdfff8 	.word	0xbffdfff8
 8001030:	cccccccd 	.word	0xcccccccd
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <HAL_DMA_Start_IT+0x20>
 8001054:	2302      	movs	r3, #2
 8001056:	e04a      	b.n	80010ee <HAL_DMA_Start_IT+0xb6>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001066:	2b01      	cmp	r3, #1
 8001068:	d13a      	bne.n	80010e0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2202      	movs	r2, #2
 800106e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 f9ae 	bl	80013f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001098:	2b00      	cmp	r3, #0
 800109a:	d008      	beq.n	80010ae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 020e 	orr.w	r2, r2, #14
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e00f      	b.n	80010ce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0204 	bic.w	r2, r2, #4
 80010bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 020a 	orr.w	r2, r2, #10
 80010cc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e005      	b.n	80010ec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010e8:	2302      	movs	r3, #2
 80010ea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800110a:	2b02      	cmp	r3, #2
 800110c:	d005      	beq.n	800111a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e051      	b.n	80011be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 020e 	bic.w	r2, r2, #14
 8001128:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <HAL_DMA_Abort_IT+0xd0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d029      	beq.n	8001198 <HAL_DMA_Abort_IT+0xa0>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a20      	ldr	r2, [pc, #128]	; (80011cc <HAL_DMA_Abort_IT+0xd4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d022      	beq.n	8001194 <HAL_DMA_Abort_IT+0x9c>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <HAL_DMA_Abort_IT+0xd8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d01a      	beq.n	800118e <HAL_DMA_Abort_IT+0x96>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <HAL_DMA_Abort_IT+0xdc>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d012      	beq.n	8001188 <HAL_DMA_Abort_IT+0x90>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <HAL_DMA_Abort_IT+0xe0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d00a      	beq.n	8001182 <HAL_DMA_Abort_IT+0x8a>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1a      	ldr	r2, [pc, #104]	; (80011dc <HAL_DMA_Abort_IT+0xe4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d102      	bne.n	800117c <HAL_DMA_Abort_IT+0x84>
 8001176:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800117a:	e00e      	b.n	800119a <HAL_DMA_Abort_IT+0xa2>
 800117c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001180:	e00b      	b.n	800119a <HAL_DMA_Abort_IT+0xa2>
 8001182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001186:	e008      	b.n	800119a <HAL_DMA_Abort_IT+0xa2>
 8001188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118c:	e005      	b.n	800119a <HAL_DMA_Abort_IT+0xa2>
 800118e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001192:	e002      	b.n	800119a <HAL_DMA_Abort_IT+0xa2>
 8001194:	2310      	movs	r3, #16
 8001196:	e000      	b.n	800119a <HAL_DMA_Abort_IT+0xa2>
 8001198:	2301      	movs	r3, #1
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_DMA_Abort_IT+0xe8>)
 800119c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	4798      	blx	r3
    } 
  }
  return status;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40020008 	.word	0x40020008
 80011cc:	4002001c 	.word	0x4002001c
 80011d0:	40020030 	.word	0x40020030
 80011d4:	40020044 	.word	0x40020044
 80011d8:	40020058 	.word	0x40020058
 80011dc:	4002006c 	.word	0x4002006c
 80011e0:	40020000 	.word	0x40020000

080011e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	2204      	movs	r2, #4
 8001202:	409a      	lsls	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4013      	ands	r3, r2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d04f      	beq.n	80012ac <HAL_DMA_IRQHandler+0xc8>
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	2b00      	cmp	r3, #0
 8001214:	d04a      	beq.n	80012ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0320 	and.w	r3, r3, #32
 8001220:	2b00      	cmp	r3, #0
 8001222:	d107      	bne.n	8001234 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0204 	bic.w	r2, r2, #4
 8001232:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a66      	ldr	r2, [pc, #408]	; (80013d4 <HAL_DMA_IRQHandler+0x1f0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d029      	beq.n	8001292 <HAL_DMA_IRQHandler+0xae>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a65      	ldr	r2, [pc, #404]	; (80013d8 <HAL_DMA_IRQHandler+0x1f4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d022      	beq.n	800128e <HAL_DMA_IRQHandler+0xaa>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a63      	ldr	r2, [pc, #396]	; (80013dc <HAL_DMA_IRQHandler+0x1f8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01a      	beq.n	8001288 <HAL_DMA_IRQHandler+0xa4>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a62      	ldr	r2, [pc, #392]	; (80013e0 <HAL_DMA_IRQHandler+0x1fc>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d012      	beq.n	8001282 <HAL_DMA_IRQHandler+0x9e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a60      	ldr	r2, [pc, #384]	; (80013e4 <HAL_DMA_IRQHandler+0x200>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00a      	beq.n	800127c <HAL_DMA_IRQHandler+0x98>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a5f      	ldr	r2, [pc, #380]	; (80013e8 <HAL_DMA_IRQHandler+0x204>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d102      	bne.n	8001276 <HAL_DMA_IRQHandler+0x92>
 8001270:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001274:	e00e      	b.n	8001294 <HAL_DMA_IRQHandler+0xb0>
 8001276:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800127a:	e00b      	b.n	8001294 <HAL_DMA_IRQHandler+0xb0>
 800127c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001280:	e008      	b.n	8001294 <HAL_DMA_IRQHandler+0xb0>
 8001282:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001286:	e005      	b.n	8001294 <HAL_DMA_IRQHandler+0xb0>
 8001288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128c:	e002      	b.n	8001294 <HAL_DMA_IRQHandler+0xb0>
 800128e:	2340      	movs	r3, #64	; 0x40
 8001290:	e000      	b.n	8001294 <HAL_DMA_IRQHandler+0xb0>
 8001292:	2304      	movs	r3, #4
 8001294:	4a55      	ldr	r2, [pc, #340]	; (80013ec <HAL_DMA_IRQHandler+0x208>)
 8001296:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 8094 	beq.w	80013ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012aa:	e08e      	b.n	80013ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	2202      	movs	r2, #2
 80012b2:	409a      	lsls	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d056      	beq.n	800136a <HAL_DMA_IRQHandler+0x186>
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d051      	beq.n	800136a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0320 	and.w	r3, r3, #32
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10b      	bne.n	80012ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 020a 	bic.w	r2, r2, #10
 80012e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a38      	ldr	r2, [pc, #224]	; (80013d4 <HAL_DMA_IRQHandler+0x1f0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d029      	beq.n	800134a <HAL_DMA_IRQHandler+0x166>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a37      	ldr	r2, [pc, #220]	; (80013d8 <HAL_DMA_IRQHandler+0x1f4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d022      	beq.n	8001346 <HAL_DMA_IRQHandler+0x162>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a35      	ldr	r2, [pc, #212]	; (80013dc <HAL_DMA_IRQHandler+0x1f8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01a      	beq.n	8001340 <HAL_DMA_IRQHandler+0x15c>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <HAL_DMA_IRQHandler+0x1fc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d012      	beq.n	800133a <HAL_DMA_IRQHandler+0x156>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a32      	ldr	r2, [pc, #200]	; (80013e4 <HAL_DMA_IRQHandler+0x200>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00a      	beq.n	8001334 <HAL_DMA_IRQHandler+0x150>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <HAL_DMA_IRQHandler+0x204>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d102      	bne.n	800132e <HAL_DMA_IRQHandler+0x14a>
 8001328:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800132c:	e00e      	b.n	800134c <HAL_DMA_IRQHandler+0x168>
 800132e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001332:	e00b      	b.n	800134c <HAL_DMA_IRQHandler+0x168>
 8001334:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001338:	e008      	b.n	800134c <HAL_DMA_IRQHandler+0x168>
 800133a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133e:	e005      	b.n	800134c <HAL_DMA_IRQHandler+0x168>
 8001340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001344:	e002      	b.n	800134c <HAL_DMA_IRQHandler+0x168>
 8001346:	2320      	movs	r3, #32
 8001348:	e000      	b.n	800134c <HAL_DMA_IRQHandler+0x168>
 800134a:	2302      	movs	r3, #2
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <HAL_DMA_IRQHandler+0x208>)
 800134e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	2b00      	cmp	r3, #0
 800135e:	d034      	beq.n	80013ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001368:	e02f      	b.n	80013ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	2208      	movs	r2, #8
 8001370:	409a      	lsls	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4013      	ands	r3, r2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d028      	beq.n	80013cc <HAL_DMA_IRQHandler+0x1e8>
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d023      	beq.n	80013cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 020e 	bic.w	r2, r2, #14
 8001392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139c:	2101      	movs	r1, #1
 800139e:	fa01 f202 	lsl.w	r2, r1, r2
 80013a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	4798      	blx	r3
    }
  }
  return;
 80013ca:	bf00      	nop
 80013cc:	bf00      	nop
}
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40020008 	.word	0x40020008
 80013d8:	4002001c 	.word	0x4002001c
 80013dc:	40020030 	.word	0x40020030
 80013e0:	40020044 	.word	0x40020044
 80013e4:	40020058 	.word	0x40020058
 80013e8:	4002006c 	.word	0x4002006c
 80013ec:	40020000 	.word	0x40020000

080013f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001406:	2101      	movs	r1, #1
 8001408:	fa01 f202 	lsl.w	r2, r1, r2
 800140c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b10      	cmp	r3, #16
 800141c:	d108      	bne.n	8001430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800142e:	e007      	b.n	8001440 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	60da      	str	r2, [r3, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b08b      	sub	sp, #44	; 0x2c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145e:	e169      	b.n	8001734 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001460:	2201      	movs	r2, #1
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8158 	bne.w	800172e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a9a      	ldr	r2, [pc, #616]	; (80016ec <HAL_GPIO_Init+0x2a0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d05e      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 8001488:	4a98      	ldr	r2, [pc, #608]	; (80016ec <HAL_GPIO_Init+0x2a0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d875      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 800148e:	4a98      	ldr	r2, [pc, #608]	; (80016f0 <HAL_GPIO_Init+0x2a4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d058      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 8001494:	4a96      	ldr	r2, [pc, #600]	; (80016f0 <HAL_GPIO_Init+0x2a4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d86f      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 800149a:	4a96      	ldr	r2, [pc, #600]	; (80016f4 <HAL_GPIO_Init+0x2a8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d052      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014a0:	4a94      	ldr	r2, [pc, #592]	; (80016f4 <HAL_GPIO_Init+0x2a8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d869      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014a6:	4a94      	ldr	r2, [pc, #592]	; (80016f8 <HAL_GPIO_Init+0x2ac>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d04c      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014ac:	4a92      	ldr	r2, [pc, #584]	; (80016f8 <HAL_GPIO_Init+0x2ac>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d863      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014b2:	4a92      	ldr	r2, [pc, #584]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d046      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014b8:	4a90      	ldr	r2, [pc, #576]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d85d      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014be:	2b12      	cmp	r3, #18
 80014c0:	d82a      	bhi.n	8001518 <HAL_GPIO_Init+0xcc>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d859      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014c6:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <HAL_GPIO_Init+0x80>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	08001547 	.word	0x08001547
 80014d0:	08001521 	.word	0x08001521
 80014d4:	08001533 	.word	0x08001533
 80014d8:	08001575 	.word	0x08001575
 80014dc:	0800157b 	.word	0x0800157b
 80014e0:	0800157b 	.word	0x0800157b
 80014e4:	0800157b 	.word	0x0800157b
 80014e8:	0800157b 	.word	0x0800157b
 80014ec:	0800157b 	.word	0x0800157b
 80014f0:	0800157b 	.word	0x0800157b
 80014f4:	0800157b 	.word	0x0800157b
 80014f8:	0800157b 	.word	0x0800157b
 80014fc:	0800157b 	.word	0x0800157b
 8001500:	0800157b 	.word	0x0800157b
 8001504:	0800157b 	.word	0x0800157b
 8001508:	0800157b 	.word	0x0800157b
 800150c:	0800157b 	.word	0x0800157b
 8001510:	08001529 	.word	0x08001529
 8001514:	0800153d 	.word	0x0800153d
 8001518:	4a79      	ldr	r2, [pc, #484]	; (8001700 <HAL_GPIO_Init+0x2b4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d013      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800151e:	e02c      	b.n	800157a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	623b      	str	r3, [r7, #32]
          break;
 8001526:	e029      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	3304      	adds	r3, #4
 800152e:	623b      	str	r3, [r7, #32]
          break;
 8001530:	e024      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	3308      	adds	r3, #8
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e01f      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	330c      	adds	r3, #12
 8001542:	623b      	str	r3, [r7, #32]
          break;
 8001544:	e01a      	b.n	800157c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800154e:	2304      	movs	r3, #4
 8001550:	623b      	str	r3, [r7, #32]
          break;
 8001552:	e013      	b.n	800157c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155c:	2308      	movs	r3, #8
 800155e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	611a      	str	r2, [r3, #16]
          break;
 8001566:	e009      	b.n	800157c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001568:	2308      	movs	r3, #8
 800156a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	615a      	str	r2, [r3, #20]
          break;
 8001572:	e003      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
          break;
 8001578:	e000      	b.n	800157c <HAL_GPIO_Init+0x130>
          break;
 800157a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	d801      	bhi.n	8001586 <HAL_GPIO_Init+0x13a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	e001      	b.n	800158a <HAL_GPIO_Init+0x13e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3304      	adds	r3, #4
 800158a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2bff      	cmp	r3, #255	; 0xff
 8001590:	d802      	bhi.n	8001598 <HAL_GPIO_Init+0x14c>
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	e002      	b.n	800159e <HAL_GPIO_Init+0x152>
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	3b08      	subs	r3, #8
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	210f      	movs	r1, #15
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	6a39      	ldr	r1, [r7, #32]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	431a      	orrs	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80b1 	beq.w	800172e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015cc:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <HAL_GPIO_Init+0x2b8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a4c      	ldr	r2, [pc, #304]	; (8001704 <HAL_GPIO_Init+0x2b8>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b4a      	ldr	r3, [pc, #296]	; (8001704 <HAL_GPIO_Init+0x2b8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e4:	4a48      	ldr	r2, [pc, #288]	; (8001708 <HAL_GPIO_Init+0x2bc>)
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a40      	ldr	r2, [pc, #256]	; (800170c <HAL_GPIO_Init+0x2c0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d013      	beq.n	8001638 <HAL_GPIO_Init+0x1ec>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a3f      	ldr	r2, [pc, #252]	; (8001710 <HAL_GPIO_Init+0x2c4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d00d      	beq.n	8001634 <HAL_GPIO_Init+0x1e8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a3e      	ldr	r2, [pc, #248]	; (8001714 <HAL_GPIO_Init+0x2c8>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d007      	beq.n	8001630 <HAL_GPIO_Init+0x1e4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a3d      	ldr	r2, [pc, #244]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d101      	bne.n	800162c <HAL_GPIO_Init+0x1e0>
 8001628:	2303      	movs	r3, #3
 800162a:	e006      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 800162c:	2304      	movs	r3, #4
 800162e:	e004      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 8001630:	2302      	movs	r3, #2
 8001632:	e002      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 8001638:	2300      	movs	r3, #0
 800163a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163c:	f002 0203 	and.w	r2, r2, #3
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	4093      	lsls	r3, r2
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164a:	492f      	ldr	r1, [pc, #188]	; (8001708 <HAL_GPIO_Init+0x2bc>)
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_GPIO_Init+0x2d0>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	492c      	ldr	r1, [pc, #176]	; (800171c <HAL_GPIO_Init+0x2d0>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_GPIO_Init+0x2d0>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	43db      	mvns	r3, r3
 800167a:	4928      	ldr	r1, [pc, #160]	; (800171c <HAL_GPIO_Init+0x2d0>)
 800167c:	4013      	ands	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800168c:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_GPIO_Init+0x2d0>)
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4922      	ldr	r1, [pc, #136]	; (800171c <HAL_GPIO_Init+0x2d0>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_GPIO_Init+0x2d0>)
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	491e      	ldr	r1, [pc, #120]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	4918      	ldr	r1, [pc, #96]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	4914      	ldr	r1, [pc, #80]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d021      	beq.n	8001720 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	60cb      	str	r3, [r1, #12]
 80016e8:	e021      	b.n	800172e <HAL_GPIO_Init+0x2e2>
 80016ea:	bf00      	nop
 80016ec:	10320000 	.word	0x10320000
 80016f0:	10310000 	.word	0x10310000
 80016f4:	10220000 	.word	0x10220000
 80016f8:	10210000 	.word	0x10210000
 80016fc:	10120000 	.word	0x10120000
 8001700:	10110000 	.word	0x10110000
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000
 800170c:	40010800 	.word	0x40010800
 8001710:	40010c00 	.word	0x40010c00
 8001714:	40011000 	.word	0x40011000
 8001718:	40011400 	.word	0x40011400
 800171c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_GPIO_Init+0x304>)
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	43db      	mvns	r3, r3
 8001728:	4909      	ldr	r1, [pc, #36]	; (8001750 <HAL_GPIO_Init+0x304>)
 800172a:	4013      	ands	r3, r2
 800172c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	3301      	adds	r3, #1
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	f47f ae8e 	bne.w	8001460 <HAL_GPIO_Init+0x14>
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	372c      	adds	r7, #44	; 0x2c
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
 8001760:	4613      	mov	r3, r2
 8001762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001764:	787b      	ldrb	r3, [r7, #1]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001770:	e003      	b.n	800177a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001772:	887b      	ldrh	r3, [r7, #2]
 8001774:	041a      	lsls	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	611a      	str	r2, [r3, #16]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4013      	ands	r3, r2
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43d9      	mvns	r1, r3
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	400b      	ands	r3, r1
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	611a      	str	r2, [r3, #16]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b8:	b08b      	sub	sp, #44	; 0x2c
 80017ba:	af06      	add	r7, sp, #24
 80017bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0fd      	b.n	80019c4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d106      	bne.n	80017e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f007 fc7f 	bl	80090e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2203      	movs	r2, #3
 80017e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fc9a 	bl	8005128 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	687e      	ldr	r6, [r7, #4]
 80017fc:	466d      	mov	r5, sp
 80017fe:	f106 0410 	add.w	r4, r6, #16
 8001802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001806:	6823      	ldr	r3, [r4, #0]
 8001808:	602b      	str	r3, [r5, #0]
 800180a:	1d33      	adds	r3, r6, #4
 800180c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180e:	6838      	ldr	r0, [r7, #0]
 8001810:	f003 fc64 	bl	80050dc <USB_CoreInit>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2202      	movs	r2, #2
 800181e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0ce      	b.n	80019c4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f003 fc95 	bl	800515c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e04c      	b.n	80018d2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	3301      	adds	r3, #1
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	7bfa      	ldrb	r2, [r7, #15]
 8001860:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	b298      	uxth	r0, r3
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3336      	adds	r3, #54	; 0x36
 8001876:	4602      	mov	r2, r0
 8001878:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3303      	adds	r3, #3
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	3338      	adds	r3, #56	; 0x38
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	333c      	adds	r3, #60	; 0x3c
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	3340      	adds	r3, #64	; 0x40
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d3ad      	bcc.n	8001838 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e044      	b.n	800196c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	3301      	adds	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3b5      	bcc.n	80018e2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	687e      	ldr	r6, [r7, #4]
 800197e:	466d      	mov	r5, sp
 8001980:	f106 0410 	add.w	r4, r6, #16
 8001984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	602b      	str	r3, [r5, #0]
 800198c:	1d33      	adds	r3, r6, #4
 800198e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001990:	6838      	ldr	r0, [r7, #0]
 8001992:	f003 fbef 	bl	8005174 <USB_DevInit>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e00d      	b.n	80019c4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f005 fd60 	bl	8007482 <USB_DevDisconnect>

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_PCD_Start+0x16>
 80019de:	2302      	movs	r3, #2
 80019e0:	e016      	b.n	8001a10 <HAL_PCD_Start+0x44>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fb84 	bl	80050fc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80019f4:	2101      	movs	r1, #1
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f007 fde5 	bl	80095c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f005 fd34 	bl	800746e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f005 fd36 	bl	8007496 <USB_ReadInterrupts>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a34:	d102      	bne.n	8001a3c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fb61 	bl	80020fe <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f005 fd28 	bl	8007496 <USB_ReadInterrupts>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a50:	d112      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a64:	b292      	uxth	r2, r2
 8001a66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f007 fbb3 	bl	80091d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a70:	2100      	movs	r1, #0
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f925 	bl	8001cc2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f005 fd0a 	bl	8007496 <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aa0:	b292      	uxth	r2, r2
 8001aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 fcf3 	bl	8007496 <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aba:	d10b      	bne.n	8001ad4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ace:	b292      	uxth	r2, r2
 8001ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f005 fcdc 	bl	8007496 <USB_ReadInterrupts>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae8:	d126      	bne.n	8001b38 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0204 	bic.w	r2, r2, #4
 8001afc:	b292      	uxth	r2, r2
 8001afe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0208 	bic.w	r2, r2, #8
 8001b14:	b292      	uxth	r2, r2
 8001b16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f007 fb94 	bl	8009248 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b32:	b292      	uxth	r2, r2
 8001b34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f005 fcaa 	bl	8007496 <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b4c:	f040 8084 	bne.w	8001c58 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	77fb      	strb	r3, [r7, #31]
 8001b54:	e011      	b.n	8001b7a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	7ffb      	ldrb	r3, [r7, #31]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	441a      	add	r2, r3
 8001b62:	7ffb      	ldrb	r3, [r7, #31]
 8001b64:	8812      	ldrh	r2, [r2, #0]
 8001b66:	b292      	uxth	r2, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	f107 0120 	add.w	r1, r7, #32
 8001b6e:	440b      	add	r3, r1
 8001b70:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001b74:	7ffb      	ldrb	r3, [r7, #31]
 8001b76:	3301      	adds	r3, #1
 8001b78:	77fb      	strb	r3, [r7, #31]
 8001b7a:	7ffb      	ldrb	r3, [r7, #31]
 8001b7c:	2b07      	cmp	r3, #7
 8001b7e:	d9ea      	bls.n	8001b56 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	b292      	uxth	r2, r2
 8001b94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	b292      	uxth	r2, r2
 8001bac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001bb0:	bf00      	nop
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f6      	beq.n	8001bb2 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	77fb      	strb	r3, [r7, #31]
 8001be0:	e010      	b.n	8001c04 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	4611      	mov	r1, r2
 8001bea:	7ffa      	ldrb	r2, [r7, #31]
 8001bec:	0092      	lsls	r2, r2, #2
 8001bee:	440a      	add	r2, r1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	f107 0120 	add.w	r1, r7, #32
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001bfc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	3301      	adds	r3, #1
 8001c02:	77fb      	strb	r3, [r7, #31]
 8001c04:	7ffb      	ldrb	r3, [r7, #31]
 8001c06:	2b07      	cmp	r3, #7
 8001c08:	d9eb      	bls.n	8001be2 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0208 	orr.w	r2, r2, #8
 8001c1c:	b292      	uxth	r2, r2
 8001c1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c34:	b292      	uxth	r2, r2
 8001c36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0204 	orr.w	r2, r2, #4
 8001c4c:	b292      	uxth	r2, r2
 8001c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f007 fade 	bl	8009214 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f005 fc1a 	bl	8007496 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c6c:	d10e      	bne.n	8001c8c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c80:	b292      	uxth	r2, r2
 8001c82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f007 fa97 	bl	80091ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f005 fc00 	bl	8007496 <USB_ReadInterrupts>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca0:	d10b      	bne.n	8001cba <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cb4:	b292      	uxth	r2, r2
 8001cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_PCD_SetAddress+0x1a>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e013      	b.n	8001d04 <HAL_PCD_SetAddress+0x42>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f005 fba7 	bl	8007448 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	4608      	mov	r0, r1
 8001d16:	4611      	mov	r1, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	70fb      	strb	r3, [r7, #3]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	803b      	strh	r3, [r7, #0]
 8001d22:	4613      	mov	r3, r2
 8001d24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	da0e      	bge.n	8001d50 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	705a      	strb	r2, [r3, #1]
 8001d4e:	e00e      	b.n	8001d6e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	f003 0207 	and.w	r2, r3, #7
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d7a:	883a      	ldrh	r2, [r7, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	78ba      	ldrb	r2, [r7, #2]
 8001d84:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d98:	78bb      	ldrb	r3, [r7, #2]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d102      	bne.n	8001da4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_PCD_EP_Open+0xa6>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e00e      	b.n	8001dd0 <HAL_PCD_EP_Open+0xc4>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68f9      	ldr	r1, [r7, #12]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 f9f7 	bl	80051b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001dce:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	da0e      	bge.n	8001e0a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	705a      	strb	r2, [r3, #1]
 8001e08:	e00e      	b.n	8001e28 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 0207 	and.w	r2, r3, #7
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_PCD_EP_Close+0x6a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e00e      	b.n	8001e60 <HAL_PCD_EP_Close+0x88>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68f9      	ldr	r1, [r7, #12]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fd19 	bl	8005888 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	460b      	mov	r3, r1
 8001e76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	f003 0207 	and.w	r2, r3, #7
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea8:	7afb      	ldrb	r3, [r7, #11]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6979      	ldr	r1, [r7, #20]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 fecb 	bl	8005c60 <USB_EPStartXfer>
 8001eca:	e005      	b.n	8001ed8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6979      	ldr	r1, [r7, #20]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fec4 	bl	8005c60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 0207 	and.w	r2, r3, #7
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f04:	681b      	ldr	r3, [r3, #0]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f20:	7afb      	ldrb	r3, [r7, #11]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f5c:	7afb      	ldrb	r3, [r7, #11]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f68:	7afb      	ldrb	r3, [r7, #11]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6979      	ldr	r1, [r7, #20]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 fe71 	bl	8005c60 <USB_EPStartXfer>
 8001f7e:	e005      	b.n	8001f8c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6979      	ldr	r1, [r7, #20]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 fe6a 	bl	8005c60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 0207 	and.w	r2, r3, #7
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d901      	bls.n	8001fb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e04c      	b.n	800204e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da0e      	bge.n	8001fda <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	705a      	strb	r2, [r3, #1]
 8001fd8:	e00c      	b.n	8001ff4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fda:	78fa      	ldrb	r2, [r7, #3]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_PCD_EP_SetStall+0x7e>
 8002010:	2302      	movs	r3, #2
 8002012:	e01c      	b.n	800204e <HAL_PCD_EP_SetStall+0xb8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68f9      	ldr	r1, [r7, #12]
 8002022:	4618      	mov	r0, r3
 8002024:	f005 f913 	bl	800724e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	2b00      	cmp	r3, #0
 8002030:	d108      	bne.n	8002044 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f005 fa38 	bl	80074b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 020f 	and.w	r2, r3, #15
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	d901      	bls.n	8002074 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e040      	b.n	80020f6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002078:	2b00      	cmp	r3, #0
 800207a:	da0e      	bge.n	800209a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	705a      	strb	r2, [r3, #1]
 8002098:	e00e      	b.n	80020b8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 0207 	and.w	r2, r3, #7
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_PCD_EP_ClrStall+0x82>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e00e      	b.n	80020f6 <HAL_PCD_EP_ClrStall+0xa0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f005 f901 	bl	80072ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b08e      	sub	sp, #56	; 0x38
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002106:	e2ec      	b.n	80026e2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002110:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002112:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800211e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 8161 	bne.w	80023ea <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002128:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	d152      	bne.n	80021d8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800213e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002142:	81fb      	strh	r3, [r7, #14]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800214e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002152:	b29b      	uxth	r3, r3
 8002154:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3328      	adds	r3, #40	; 0x28
 800215a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	3302      	adds	r3, #2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	441a      	add	r2, r3
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002196:	2100      	movs	r1, #0
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f006 fff4 	bl	8009186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 829b 	beq.w	80026e2 <PCD_EP_ISR_Handler+0x5e4>
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 8296 	bne.w	80026e2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	b292      	uxth	r2, r2
 80021ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021d6:	e284      	b.n	80026e2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d034      	beq.n	800225c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	3306      	adds	r3, #6
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002230:	b29b      	uxth	r3, r3
 8002232:	f005 f98f 	bl	8007554 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29a      	uxth	r2, r3
 800223e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002242:	4013      	ands	r3, r2
 8002244:	823b      	strh	r3, [r7, #16]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	8a3a      	ldrh	r2, [r7, #16]
 800224c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002250:	b292      	uxth	r2, r2
 8002252:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f006 ff69 	bl	800912c <HAL_PCD_SetupStageCallback>
 800225a:	e242      	b.n	80026e2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800225c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002260:	2b00      	cmp	r3, #0
 8002262:	f280 823e 	bge.w	80026e2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29a      	uxth	r2, r3
 800226e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002272:	4013      	ands	r3, r2
 8002274:	83bb      	strh	r3, [r7, #28]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	8bba      	ldrh	r2, [r7, #28]
 800227c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002280:	b292      	uxth	r2, r2
 8002282:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228c:	b29b      	uxth	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	3306      	adds	r3, #6
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d019      	beq.n	80022ec <PCD_EP_ISR_Handler+0x1ee>
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d015      	beq.n	80022ec <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	6959      	ldr	r1, [r3, #20]
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f005 f93f 	bl	8007554 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	441a      	add	r2, r3
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022e4:	2100      	movs	r1, #0
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f006 ff32 	bl	8009150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 81f2 	bne.w	80026e2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	4413      	add	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d112      	bne.n	800234c <PCD_EP_ISR_Handler+0x24e>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002330:	b29a      	uxth	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002344:	b29a      	uxth	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	e02f      	b.n	80023ac <PCD_EP_ISR_Handler+0x2ae>
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b3e      	cmp	r3, #62	; 0x3e
 8002352:	d813      	bhi.n	800237c <PCD_EP_ISR_Handler+0x27e>
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	633b      	str	r3, [r7, #48]	; 0x30
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <PCD_EP_ISR_Handler+0x270>
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	3301      	adds	r3, #1
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	b29b      	uxth	r3, r3
 8002372:	029b      	lsls	r3, r3, #10
 8002374:	b29a      	uxth	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	801a      	strh	r2, [r3, #0]
 800237a:	e017      	b.n	80023ac <PCD_EP_ISR_Handler+0x2ae>
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <PCD_EP_ISR_Handler+0x298>
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	3b01      	subs	r3, #1
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	b29b      	uxth	r3, r3
 800239a:	029b      	lsls	r3, r3, #10
 800239c:	b29b      	uxth	r3, r3
 800239e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023bc:	827b      	strh	r3, [r7, #18]
 80023be:	8a7b      	ldrh	r3, [r7, #18]
 80023c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023c4:	827b      	strh	r3, [r7, #18]
 80023c6:	8a7b      	ldrh	r3, [r7, #18]
 80023c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023cc:	827b      	strh	r3, [r7, #18]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	8a7b      	ldrh	r3, [r7, #18]
 80023d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	8013      	strh	r3, [r2, #0]
 80023e8:	e17b      	b.n	80026e2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002400:	2b00      	cmp	r3, #0
 8002402:	f280 80ea 	bge.w	80025da <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29a      	uxth	r2, r3
 8002418:	f640 738f 	movw	r3, #3983	; 0xf8f
 800241c:	4013      	ands	r3, r2
 800241e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002434:	b292      	uxth	r2, r2
 8002436:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002438:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	7b1b      	ldrb	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d122      	bne.n	800249c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	3306      	adds	r3, #6
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	4413      	add	r3, r2
 8002474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002480:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8087 	beq.w	8002596 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	6959      	ldr	r1, [r3, #20]
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	88da      	ldrh	r2, [r3, #6]
 8002494:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002496:	f005 f85d 	bl	8007554 <USB_ReadPMA>
 800249a:	e07c      	b.n	8002596 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	78db      	ldrb	r3, [r3, #3]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d108      	bne.n	80024b6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024a6:	461a      	mov	r2, r3
 80024a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f927 	bl	80026fe <HAL_PCD_EP_DB_Receive>
 80024b0:	4603      	mov	r3, r0
 80024b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024b4:	e06f      	b.n	8002596 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	441a      	add	r2, r3
 80024e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d021      	beq.n	8002554 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	3302      	adds	r3, #2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002538:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800253a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800253c:	2b00      	cmp	r3, #0
 800253e:	d02a      	beq.n	8002596 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	6959      	ldr	r1, [r3, #20]
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	891a      	ldrh	r2, [r3, #8]
 800254c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800254e:	f005 f801 	bl	8007554 <USB_ReadPMA>
 8002552:	e020      	b.n	8002596 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255c:	b29b      	uxth	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	3306      	adds	r3, #6
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	4413      	add	r3, r2
 8002572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800257e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	6959      	ldr	r1, [r3, #20]
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	895a      	ldrh	r2, [r3, #10]
 8002590:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002592:	f004 ffdf 	bl	8007554 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800259c:	441a      	add	r2, r3
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025a8:	441a      	add	r2, r3
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <PCD_EP_ISR_Handler+0x4c2>
 80025b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d206      	bcs.n	80025ce <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f006 fdc2 	bl	8009150 <HAL_PCD_DataOutStageCallback>
 80025cc:	e005      	b.n	80025da <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 fb43 	bl	8005c60 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d07e      	beq.n	80026e2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80025e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800260e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002612:	843b      	strh	r3, [r7, #32]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	8c3b      	ldrh	r3, [r7, #32]
 8002624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262c:	b29b      	uxth	r3, r3
 800262e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	78db      	ldrb	r3, [r3, #3]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d00c      	beq.n	8002652 <PCD_EP_ISR_Handler+0x554>
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	78db      	ldrb	r3, [r3, #3]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002644:	2b02      	cmp	r3, #2
 8002646:	d146      	bne.n	80026d6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002648:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d141      	bne.n	80026d6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265a:	b29b      	uxth	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	3302      	adds	r3, #2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800267a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	8bfb      	ldrh	r3, [r7, #30]
 8002682:	429a      	cmp	r2, r3
 8002684:	d906      	bls.n	8002694 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	8bfb      	ldrh	r3, [r7, #30]
 800268c:	1ad2      	subs	r2, r2, r3
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	619a      	str	r2, [r3, #24]
 8002692:	e002      	b.n	800269a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f006 fd6c 	bl	8009186 <HAL_PCD_DataInStageCallback>
 80026ae:	e018      	b.n	80026e2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	8bfb      	ldrh	r3, [r7, #30]
 80026b6:	441a      	add	r2, r3
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	441a      	add	r2, r3
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 fac6 	bl	8005c60 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026d4:	e005      	b.n	80026e2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026d8:	461a      	mov	r2, r3
 80026da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f91b 	bl	8002918 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f6ff ad0a 	blt.w	8002108 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3738      	adds	r7, #56	; 0x38
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b088      	sub	sp, #32
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	4613      	mov	r3, r2
 800270a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d07e      	beq.n	8002814 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271e:	b29b      	uxth	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	3302      	adds	r3, #2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	8b7b      	ldrh	r3, [r7, #26]
 8002746:	429a      	cmp	r2, r3
 8002748:	d306      	bcc.n	8002758 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	8b7b      	ldrh	r3, [r7, #26]
 8002750:	1ad2      	subs	r2, r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	619a      	str	r2, [r3, #24]
 8002756:	e002      	b.n	800275e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2200      	movs	r2, #0
 800275c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d123      	bne.n	80027ae <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800277c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002780:	833b      	strh	r3, [r7, #24]
 8002782:	8b3b      	ldrh	r3, [r7, #24]
 8002784:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002788:	833b      	strh	r3, [r7, #24]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	441a      	add	r2, r3
 8002798:	8b3b      	ldrh	r3, [r7, #24]
 800279a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800279e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01f      	beq.n	80027f8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d2:	82fb      	strh	r3, [r7, #22]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	441a      	add	r2, r3
 80027e2:	8afb      	ldrh	r3, [r7, #22]
 80027e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027f8:	8b7b      	ldrh	r3, [r7, #26]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8087 	beq.w	800290e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	6959      	ldr	r1, [r3, #20]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	891a      	ldrh	r2, [r3, #8]
 800280c:	8b7b      	ldrh	r3, [r7, #26]
 800280e:	f004 fea1 	bl	8007554 <USB_ReadPMA>
 8002812:	e07c      	b.n	800290e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	3306      	adds	r3, #6
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	8b7b      	ldrh	r3, [r7, #26]
 8002844:	429a      	cmp	r2, r3
 8002846:	d306      	bcc.n	8002856 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	8b7b      	ldrh	r3, [r7, #26]
 800284e:	1ad2      	subs	r2, r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	619a      	str	r2, [r3, #24]
 8002854:	e002      	b.n	800285c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d123      	bne.n	80028ac <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	83fb      	strh	r3, [r7, #30]
 8002880:	8bfb      	ldrh	r3, [r7, #30]
 8002882:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002886:	83fb      	strh	r3, [r7, #30]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	8bfb      	ldrh	r3, [r7, #30]
 8002898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800289c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d11f      	bne.n	80028f6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d0:	83bb      	strh	r3, [r7, #28]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	441a      	add	r2, r3
 80028e0:	8bbb      	ldrh	r3, [r7, #28]
 80028e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028f6:	8b7b      	ldrh	r3, [r7, #26]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	6959      	ldr	r1, [r3, #20]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	895a      	ldrh	r2, [r3, #10]
 8002908:	8b7b      	ldrh	r3, [r7, #26]
 800290a:	f004 fe23 	bl	8007554 <USB_ReadPMA>
    }
  }

  return count;
 800290e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b0a2      	sub	sp, #136	; 0x88
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 81c7 	beq.w	8002cc0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800293a:	b29b      	uxth	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	3302      	adds	r3, #2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800295a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002966:	429a      	cmp	r2, r3
 8002968:	d907      	bls.n	800297a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002972:	1ad2      	subs	r2, r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	619a      	str	r2, [r3, #24]
 8002978:	e002      	b.n	8002980 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f040 80b9 	bne.w	8002afc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	785b      	ldrb	r3, [r3, #1]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d126      	bne.n	80029e0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	4413      	add	r3, r2
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	011a      	lsls	r2, r3, #4
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	4413      	add	r3, r2
 80029b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	801a      	strh	r2, [r3, #0]
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d8:	b29a      	uxth	r2, r3
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	e01a      	b.n	8002a16 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	785b      	ldrb	r3, [r3, #1]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d116      	bne.n	8002a16 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	633b      	str	r3, [r7, #48]	; 0x30
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	4413      	add	r3, r2
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	011a      	lsls	r2, r3, #4
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	4413      	add	r3, r2
 8002a0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	2200      	movs	r2, #0
 8002a14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	623b      	str	r3, [r7, #32]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	785b      	ldrb	r3, [r3, #1]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d126      	bne.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4413      	add	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	011a      	lsls	r2, r3, #4
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4413      	add	r3, r2
 8002a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	801a      	strh	r2, [r3, #0]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	801a      	strh	r2, [r3, #0]
 8002a70:	e017      	b.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	785b      	ldrb	r3, [r3, #1]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d113      	bne.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	4413      	add	r3, r2
 8002a8a:	623b      	str	r3, [r7, #32]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	011a      	lsls	r2, r3, #4
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	4413      	add	r3, r2
 8002a96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f006 fb6c 	bl	8009186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 82d4 	beq.w	8003062 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad4:	827b      	strh	r3, [r7, #18]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	441a      	add	r2, r3
 8002ae4:	8a7b      	ldrh	r3, [r7, #18]
 8002ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	8013      	strh	r3, [r2, #0]
 8002afa:	e2b2      	b.n	8003062 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d021      	beq.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	441a      	add	r2, r3
 8002b32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	f040 8286 	bne.w	8003062 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b5e:	441a      	add	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	69da      	ldr	r2, [r3, #28]
 8002b68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b6c:	441a      	add	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6a1a      	ldr	r2, [r3, #32]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d309      	bcc.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b8a:	1ad2      	subs	r2, r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	621a      	str	r2, [r3, #32]
 8002b90:	e015      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002b9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ba8:	e009      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	785b      	ldrb	r3, [r3, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d155      	bne.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	4413      	add	r3, r2
 8002bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	011a      	lsls	r2, r3, #4
 8002be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be6:	4413      	add	r3, r2
 8002be8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bec:	637b      	str	r3, [r7, #52]	; 0x34
 8002bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d112      	bne.n	8002c1a <HAL_PCD_EP_DB_Transmit+0x302>
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c02:	801a      	strh	r2, [r3, #0]
 8002c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c16:	801a      	strh	r2, [r3, #0]
 8002c18:	e047      	b.n	8002caa <HAL_PCD_EP_DB_Transmit+0x392>
 8002c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1c:	2b3e      	cmp	r3, #62	; 0x3e
 8002c1e:	d811      	bhi.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c32:	3301      	adds	r3, #1
 8002c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	029b      	lsls	r3, r3, #10
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	801a      	strh	r2, [r3, #0]
 8002c42:	e032      	b.n	8002caa <HAL_PCD_EP_DB_Transmit+0x392>
 8002c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x342>
 8002c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c56:	3b01      	subs	r3, #1
 8002c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	029b      	lsls	r3, r3, #10
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	e01b      	b.n	8002caa <HAL_PCD_EP_DB_Transmit+0x392>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d117      	bne.n	8002caa <HAL_PCD_EP_DB_Transmit+0x392>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c8e:	4413      	add	r3, r2
 8002c90:	643b      	str	r3, [r7, #64]	; 0x40
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	011a      	lsls	r2, r3, #4
 8002c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	6959      	ldr	r1, [r3, #20]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	891a      	ldrh	r2, [r3, #8]
 8002cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f004 fc06 	bl	80074ca <USB_WritePMA>
 8002cbe:	e1d0      	b.n	8003062 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3306      	adds	r3, #6
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d307      	bcc.n	8002d08 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d00:	1ad2      	subs	r2, r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	619a      	str	r2, [r3, #24]
 8002d06:	e002      	b.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 80c4 	bne.w	8002ea0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d126      	bne.n	8002d6e <HAL_PCD_EP_DB_Transmit+0x456>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d34:	4413      	add	r3, r2
 8002d36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	011a      	lsls	r2, r3, #4
 8002d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d40:	4413      	add	r3, r2
 8002d42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d46:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d56:	801a      	strh	r2, [r3, #0]
 8002d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d6a:	801a      	strh	r2, [r3, #0]
 8002d6c:	e01a      	b.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	785b      	ldrb	r3, [r3, #1]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d116      	bne.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	677b      	str	r3, [r7, #116]	; 0x74
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d8a:	4413      	add	r3, r2
 8002d8c:	677b      	str	r3, [r7, #116]	; 0x74
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	011a      	lsls	r2, r3, #4
 8002d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d96:	4413      	add	r3, r2
 8002d98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d9c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002da0:	2200      	movs	r2, #0
 8002da2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	785b      	ldrb	r3, [r3, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d12f      	bne.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dca:	4413      	add	r3, r2
 8002dcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	011a      	lsls	r2, r3, #4
 8002dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dda:	4413      	add	r3, r2
 8002ddc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002df6:	801a      	strh	r2, [r3, #0]
 8002df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e0e:	801a      	strh	r2, [r3, #0]
 8002e10:	e017      	b.n	8002e42 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	785b      	ldrb	r3, [r3, #1]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d113      	bne.n	8002e42 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e28:	4413      	add	r3, r2
 8002e2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	011a      	lsls	r2, r3, #4
 8002e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e34:	4413      	add	r3, r2
 8002e36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e3e:	2200      	movs	r2, #0
 8002e40:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	4619      	mov	r1, r3
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f006 f99c 	bl	8009186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8104 	bne.w	8003062 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	441a      	add	r2, r3
 8002e86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8013      	strh	r3, [r2, #0]
 8002e9e:	e0e0      	b.n	8003062 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d121      	bne.n	8002eee <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f040 80b4 	bne.w	8003062 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f02:	441a      	add	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f10:	441a      	add	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	6a1a      	ldr	r2, [r3, #32]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d309      	bcc.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
 8002f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	621a      	str	r2, [r3, #32]
 8002f34:	e015      	b.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002f3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f4c:	e009      	b.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2200      	movs	r2, #0
 8002f58:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	667b      	str	r3, [r7, #100]	; 0x64
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d155      	bne.n	800301c <HAL_PCD_EP_DB_Transmit+0x704>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f84:	4413      	add	r3, r2
 8002f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	011a      	lsls	r2, r3, #4
 8002f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f90:	4413      	add	r3, r2
 8002f92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d112      	bne.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fac:	801a      	strh	r2, [r3, #0]
 8002fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	e044      	b.n	800304e <HAL_PCD_EP_DB_Transmit+0x736>
 8002fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc6:	2b3e      	cmp	r3, #62	; 0x3e
 8002fc8:	d811      	bhi.n	8002fee <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	657b      	str	r3, [r7, #84]	; 0x54
 8002fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fdc:	3301      	adds	r3, #1
 8002fde:	657b      	str	r3, [r7, #84]	; 0x54
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	029b      	lsls	r3, r3, #10
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	e02f      	b.n	800304e <HAL_PCD_EP_DB_Transmit+0x736>
 8002fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003000:	3b01      	subs	r3, #1
 8003002:	657b      	str	r3, [r7, #84]	; 0x54
 8003004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003006:	b29b      	uxth	r3, r3
 8003008:	029b      	lsls	r3, r3, #10
 800300a:	b29b      	uxth	r3, r3
 800300c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003014:	b29a      	uxth	r2, r3
 8003016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003018:	801a      	strh	r2, [r3, #0]
 800301a:	e018      	b.n	800304e <HAL_PCD_EP_DB_Transmit+0x736>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d114      	bne.n	800304e <HAL_PCD_EP_DB_Transmit+0x736>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302c:	b29b      	uxth	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003032:	4413      	add	r3, r2
 8003034:	667b      	str	r3, [r7, #100]	; 0x64
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	011a      	lsls	r2, r3, #4
 800303c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800303e:	4413      	add	r3, r2
 8003040:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003044:	663b      	str	r3, [r7, #96]	; 0x60
 8003046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003048:	b29a      	uxth	r2, r3
 800304a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800304c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6959      	ldr	r1, [r3, #20]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	895a      	ldrh	r2, [r3, #10]
 800305a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305c:	b29b      	uxth	r3, r3
 800305e:	f004 fa34 	bl	80074ca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800307c:	823b      	strh	r3, [r7, #16]
 800307e:	8a3b      	ldrh	r3, [r7, #16]
 8003080:	f083 0310 	eor.w	r3, r3, #16
 8003084:	823b      	strh	r3, [r7, #16]
 8003086:	8a3b      	ldrh	r3, [r7, #16]
 8003088:	f083 0320 	eor.w	r3, r3, #32
 800308c:	823b      	strh	r3, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	441a      	add	r2, r3
 800309c:	8a3b      	ldrh	r3, [r7, #16]
 800309e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3788      	adds	r7, #136	; 0x88
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	817b      	strh	r3, [r7, #10]
 80030ca:	4613      	mov	r3, r2
 80030cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030da:	897b      	ldrh	r3, [r7, #10]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	e009      	b.n	8003106 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030f2:	897a      	ldrh	r2, [r7, #10]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003106:	893b      	ldrh	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	b29a      	uxth	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	80da      	strh	r2, [r3, #6]
 800311a:	e00b      	b.n	8003134 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2201      	movs	r2, #1
 8003120:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	b29a      	uxth	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	b29a      	uxth	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e26c      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8087 	beq.w	800326e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003160:	4b92      	ldr	r3, [pc, #584]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b04      	cmp	r3, #4
 800316a:	d00c      	beq.n	8003186 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800316c:	4b8f      	ldr	r3, [pc, #572]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b08      	cmp	r3, #8
 8003176:	d112      	bne.n	800319e <HAL_RCC_OscConfig+0x5e>
 8003178:	4b8c      	ldr	r3, [pc, #560]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003184:	d10b      	bne.n	800319e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003186:	4b89      	ldr	r3, [pc, #548]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d06c      	beq.n	800326c <HAL_RCC_OscConfig+0x12c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d168      	bne.n	800326c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e246      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x76>
 80031a8:	4b80      	ldr	r3, [pc, #512]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a7f      	ldr	r2, [pc, #508]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80031ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	e02e      	b.n	8003214 <HAL_RCC_OscConfig+0xd4>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x98>
 80031be:	4b7b      	ldr	r3, [pc, #492]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a7a      	ldr	r2, [pc, #488]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b78      	ldr	r3, [pc, #480]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a77      	ldr	r2, [pc, #476]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80031d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e01d      	b.n	8003214 <HAL_RCC_OscConfig+0xd4>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0xbc>
 80031e2:	4b72      	ldr	r3, [pc, #456]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a71      	ldr	r2, [pc, #452]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80031e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b6f      	ldr	r3, [pc, #444]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a6e      	ldr	r2, [pc, #440]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0xd4>
 80031fc:	4b6b      	ldr	r3, [pc, #428]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a6a      	ldr	r2, [pc, #424]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 8003202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4b68      	ldr	r3, [pc, #416]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a67      	ldr	r2, [pc, #412]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 800320e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003212:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fd fd76 	bl	8000d0c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7fd fd72 	bl	8000d0c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1fa      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0xe4>
 8003242:	e014      	b.n	800326e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fd fd62 	bl	8000d0c <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800324c:	f7fd fd5e 	bl	8000d0c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e1e6      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325e:	4b53      	ldr	r3, [pc, #332]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x10c>
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d063      	beq.n	8003342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800327a:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003286:	4b49      	ldr	r3, [pc, #292]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b08      	cmp	r3, #8
 8003290:	d11c      	bne.n	80032cc <HAL_RCC_OscConfig+0x18c>
 8003292:	4b46      	ldr	r3, [pc, #280]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d116      	bne.n	80032cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	4b43      	ldr	r3, [pc, #268]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_RCC_OscConfig+0x176>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e1ba      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b6:	4b3d      	ldr	r3, [pc, #244]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4939      	ldr	r1, [pc, #228]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	e03a      	b.n	8003342 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <HAL_RCC_OscConfig+0x270>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fd fd17 	bl	8000d0c <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fd fd13 	bl	8000d0c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e19b      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003300:	4b2a      	ldr	r3, [pc, #168]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4927      	ldr	r1, [pc, #156]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]
 8003314:	e015      	b.n	8003342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003316:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <HAL_RCC_OscConfig+0x270>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fd fcf6 	bl	8000d0c <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003324:	f7fd fcf2 	bl	8000d0c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e17a      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d03a      	beq.n	80033c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d019      	beq.n	800338a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003356:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335c:	f7fd fcd6 	bl	8000d0c <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003364:	f7fd fcd2 	bl	8000d0c <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e15a      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <HAL_RCC_OscConfig+0x26c>)
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003382:	2001      	movs	r0, #1
 8003384:	f000 faa6 	bl	80038d4 <RCC_Delay>
 8003388:	e01c      	b.n	80033c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338a:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003390:	f7fd fcbc 	bl	8000d0c <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003396:	e00f      	b.n	80033b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003398:	f7fd fcb8 	bl	8000d0c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d908      	bls.n	80033b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e140      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	42420000 	.word	0x42420000
 80033b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	4b9e      	ldr	r3, [pc, #632]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e9      	bne.n	8003398 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80a6 	beq.w	800351e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d6:	4b97      	ldr	r3, [pc, #604]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10d      	bne.n	80033fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e2:	4b94      	ldr	r3, [pc, #592]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	4a93      	ldr	r2, [pc, #588]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 80033e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ec:	61d3      	str	r3, [r2, #28]
 80033ee:	4b91      	ldr	r3, [pc, #580]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fe:	4b8e      	ldr	r3, [pc, #568]	; (8003638 <HAL_RCC_OscConfig+0x4f8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d118      	bne.n	800343c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340a:	4b8b      	ldr	r3, [pc, #556]	; (8003638 <HAL_RCC_OscConfig+0x4f8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a8a      	ldr	r2, [pc, #552]	; (8003638 <HAL_RCC_OscConfig+0x4f8>)
 8003410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003416:	f7fd fc79 	bl	8000d0c <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341e:	f7fd fc75 	bl	8000d0c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b64      	cmp	r3, #100	; 0x64
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0fd      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	4b81      	ldr	r3, [pc, #516]	; (8003638 <HAL_RCC_OscConfig+0x4f8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d106      	bne.n	8003452 <HAL_RCC_OscConfig+0x312>
 8003444:	4b7b      	ldr	r3, [pc, #492]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a7a      	ldr	r2, [pc, #488]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6213      	str	r3, [r2, #32]
 8003450:	e02d      	b.n	80034ae <HAL_RCC_OscConfig+0x36e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0x334>
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4a75      	ldr	r2, [pc, #468]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	6213      	str	r3, [r2, #32]
 8003466:	4b73      	ldr	r3, [pc, #460]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4a72      	ldr	r2, [pc, #456]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	f023 0304 	bic.w	r3, r3, #4
 8003470:	6213      	str	r3, [r2, #32]
 8003472:	e01c      	b.n	80034ae <HAL_RCC_OscConfig+0x36e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d10c      	bne.n	8003496 <HAL_RCC_OscConfig+0x356>
 800347c:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4a6c      	ldr	r2, [pc, #432]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003482:	f043 0304 	orr.w	r3, r3, #4
 8003486:	6213      	str	r3, [r2, #32]
 8003488:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4a69      	ldr	r2, [pc, #420]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6213      	str	r3, [r2, #32]
 8003494:	e00b      	b.n	80034ae <HAL_RCC_OscConfig+0x36e>
 8003496:	4b67      	ldr	r3, [pc, #412]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a66      	ldr	r2, [pc, #408]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6213      	str	r3, [r2, #32]
 80034a2:	4b64      	ldr	r3, [pc, #400]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4a63      	ldr	r2, [pc, #396]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d015      	beq.n	80034e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b6:	f7fd fc29 	bl	8000d0c <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034bc:	e00a      	b.n	80034d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7fd fc25 	bl	8000d0c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e0ab      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d4:	4b57      	ldr	r3, [pc, #348]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ee      	beq.n	80034be <HAL_RCC_OscConfig+0x37e>
 80034e0:	e014      	b.n	800350c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7fd fc13 	bl	8000d0c <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e8:	e00a      	b.n	8003500 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fd fc0f 	bl	8000d0c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e095      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003500:	4b4c      	ldr	r3, [pc, #304]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ee      	bne.n	80034ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800350c:	7dfb      	ldrb	r3, [r7, #23]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d105      	bne.n	800351e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003512:	4b48      	ldr	r3, [pc, #288]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4a47      	ldr	r2, [pc, #284]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 8081 	beq.w	800362a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003528:	4b42      	ldr	r3, [pc, #264]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b08      	cmp	r3, #8
 8003532:	d061      	beq.n	80035f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d146      	bne.n	80035ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353c:	4b3f      	ldr	r3, [pc, #252]	; (800363c <HAL_RCC_OscConfig+0x4fc>)
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fd fbe3 	bl	8000d0c <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354a:	f7fd fbdf 	bl	8000d0c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e067      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d108      	bne.n	8003584 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003572:	4b30      	ldr	r3, [pc, #192]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	492d      	ldr	r1, [pc, #180]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a19      	ldr	r1, [r3, #32]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	430b      	orrs	r3, r1
 8003596:	4927      	ldr	r1, [pc, #156]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359c:	4b27      	ldr	r3, [pc, #156]	; (800363c <HAL_RCC_OscConfig+0x4fc>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fd fbb3 	bl	8000d0c <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fd fbaf 	bl	8000d0c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e037      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x46a>
 80035c8:	e02f      	b.n	800362a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ca:	4b1c      	ldr	r3, [pc, #112]	; (800363c <HAL_RCC_OscConfig+0x4fc>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fd fb9c 	bl	8000d0c <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fd fb98 	bl	8000d0c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e020      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ea:	4b12      	ldr	r3, [pc, #72]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x498>
 80035f6:	e018      	b.n	800362a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e013      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	429a      	cmp	r2, r3
 8003616:	d106      	bne.n	8003626 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	40007000 	.word	0x40007000
 800363c:	42420060 	.word	0x42420060

08003640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0d0      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b6a      	ldr	r3, [pc, #424]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b67      	ldr	r3, [pc, #412]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4965      	ldr	r1, [pc, #404]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b63      	ldr	r3, [pc, #396]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0b8      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800369c:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4a58      	ldr	r2, [pc, #352]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b4:	4b53      	ldr	r3, [pc, #332]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4a52      	ldr	r2, [pc, #328]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c0:	4b50      	ldr	r3, [pc, #320]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	494d      	ldr	r1, [pc, #308]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d040      	beq.n	8003760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d115      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e07f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4b41      	ldr	r3, [pc, #260]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e073      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e06b      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800371e:	4b39      	ldr	r3, [pc, #228]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4936      	ldr	r1, [pc, #216]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003730:	f7fd faec 	bl	8000d0c <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	e00a      	b.n	800374e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7fd fae8 	bl	8000d0c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e053      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b2d      	ldr	r3, [pc, #180]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 020c 	and.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d1eb      	bne.n	8003738 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003760:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d210      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 0207 	bic.w	r2, r3, #7
 8003776:	4922      	ldr	r1, [pc, #136]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e032      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4916      	ldr	r1, [pc, #88]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	490e      	ldr	r1, [pc, #56]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ce:	f000 f821 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	490a      	ldr	r1, [pc, #40]	; (8003808 <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <HAL_RCC_ClockConfig+0x1cc>)
 80037e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HAL_RCC_ClockConfig+0x1d0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fa4a 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40022000 	.word	0x40022000
 8003804:	40021000 	.word	0x40021000
 8003808:	0800c138 	.word	0x0800c138
 800380c:	20000000 	.word	0x20000000
 8003810:	20000004 	.word	0x20000004

08003814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003814:	b490      	push	{r4, r7}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800381a:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800381c:	1d3c      	adds	r4, r7, #4
 800381e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003824:	f240 2301 	movw	r3, #513	; 0x201
 8003828:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b04      	cmp	r3, #4
 800384c:	d002      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x40>
 800384e:	2b08      	cmp	r3, #8
 8003850:	d003      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0x46>
 8003852:	e02d      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003856:	623b      	str	r3, [r7, #32]
      break;
 8003858:	e02d      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	0c9b      	lsrs	r3, r3, #18
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003866:	4413      	add	r3, r2
 8003868:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800386c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	0c5b      	lsrs	r3, r3, #17
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003886:	4413      	add	r3, r2
 8003888:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800388c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	4a0e      	ldr	r2, [pc, #56]	; (80038cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003892:	fb02 f203 	mul.w	r2, r2, r3
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
 800389e:	e004      	b.n	80038aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	623b      	str	r3, [r7, #32]
      break;
 80038ae:	e002      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b2:	623b      	str	r3, [r7, #32]
      break;
 80038b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b6:	6a3b      	ldr	r3, [r7, #32]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3728      	adds	r7, #40	; 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc90      	pop	{r4, r7}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	0800c0f0 	.word	0x0800c0f0
 80038c8:	40021000 	.word	0x40021000
 80038cc:	007a1200 	.word	0x007a1200
 80038d0:	003d0900 	.word	0x003d0900

080038d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <RCC_Delay+0x34>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0a      	ldr	r2, [pc, #40]	; (800390c <RCC_Delay+0x38>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	0a5b      	lsrs	r3, r3, #9
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038f0:	bf00      	nop
  }
  while (Delay --);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1e5a      	subs	r2, r3, #1
 80038f6:	60fa      	str	r2, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f9      	bne.n	80038f0 <RCC_Delay+0x1c>
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr
 8003908:	20000000 	.word	0x20000000
 800390c:	10624dd3 	.word	0x10624dd3

08003910 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d07d      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800392c:	2300      	movs	r3, #0
 800392e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003930:	4b4f      	ldr	r3, [pc, #316]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10d      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393c:	4b4c      	ldr	r3, [pc, #304]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	4a4b      	ldr	r2, [pc, #300]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003946:	61d3      	str	r3, [r2, #28]
 8003948:	4b49      	ldr	r3, [pc, #292]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	4b46      	ldr	r3, [pc, #280]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d118      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003964:	4b43      	ldr	r3, [pc, #268]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a42      	ldr	r2, [pc, #264]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003970:	f7fd f9cc 	bl	8000d0c <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	e008      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003978:	f7fd f9c8 	bl	8000d0c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	; 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e06d      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398a:	4b3a      	ldr	r3, [pc, #232]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003996:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d02e      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d027      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b4:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039be:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039c4:	4b2c      	ldr	r3, [pc, #176]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039ca:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d014      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fd f997 	bl	8000d0c <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fd f993 	bl	8000d0c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e036      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ee      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4917      	ldr	r1, [pc, #92]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1c:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	4a13      	ldr	r2, [pc, #76]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a34:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	490b      	ldr	r1, [pc, #44]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a52:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	4904      	ldr	r1, [pc, #16]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40007000 	.word	0x40007000
 8003a78:	42420440 	.word	0x42420440

08003a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e076      	b.n	8003b7c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a9e:	d009      	beq.n	8003ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61da      	str	r2, [r3, #28]
 8003aa6:	e005      	b.n	8003ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fc fe84 	bl	80007dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b38:	ea42 0103 	orr.w	r1, r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	0c1a      	lsrs	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f002 0204 	and.w	r2, r2, #4
 8003b5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_SPI_Transmit_DMA+0x20>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e09b      	b.n	8003cdc <HAL_SPI_Transmit_DMA+0x158>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d002      	beq.n	8003bbe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bbc:	e089      	b.n	8003cd2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_SPI_Transmit_DMA+0x46>
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bce:	e080      	b.n	8003cd2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c16:	d10f      	bne.n	8003c38 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3c:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <HAL_SPI_Transmit_DMA+0x160>)
 8003c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c44:	4a28      	ldr	r2, [pc, #160]	; (8003ce8 <HAL_SPI_Transmit_DMA+0x164>)
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4c:	4a27      	ldr	r2, [pc, #156]	; (8003cec <HAL_SPI_Transmit_DMA+0x168>)
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c54:	2200      	movs	r2, #0
 8003c56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	4619      	mov	r1, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c70:	f7fd f9e2 	bl	8001038 <HAL_DMA_Start_IT>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00c      	beq.n	8003c94 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f043 0210 	orr.w	r2, r3, #16
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003c92:	e01e      	b.n	8003cd2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d007      	beq.n	8003cb2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0220 	orr.w	r2, r2, #32
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0202 	orr.w	r2, r2, #2
 8003cd0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	08003f87 	.word	0x08003f87
 8003ce8:	08003ee1 	.word	0x08003ee1
 8003cec:	08003fa3 	.word	0x08003fa3

08003cf0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10f      	bne.n	8003d34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
    return;
 8003d32:	e0be      	b.n	8003eb2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_SPI_IRQHandler+0x66>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	09db      	lsrs	r3, r3, #7
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
    return;
 8003d54:	e0ad      	b.n	8003eb2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_SPI_IRQHandler+0x80>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a1 	beq.w	8003eb2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 809a 	beq.w	8003eb2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	099b      	lsrs	r3, r3, #6
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d023      	beq.n	8003dd2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d011      	beq.n	8003dba <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9a:	f043 0204 	orr.w	r2, r3, #4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	e00b      	b.n	8003dd2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	693b      	ldr	r3, [r7, #16]
        return;
 8003dd0:	e06f      	b.n	8003eb2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d014      	beq.n	8003e08 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d04f      	beq.n	8003eb0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e1e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d104      	bne.n	8003e3c <HAL_SPI_IRQHandler+0x14c>
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d034      	beq.n	8003ea6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0203 	bic.w	r2, r2, #3
 8003e4a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d011      	beq.n	8003e78 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e58:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <HAL_SPI_IRQHandler+0x1c8>)
 8003e5a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fd f949 	bl	80010f8 <HAL_DMA_Abort_IT>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d016      	beq.n	8003eae <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e84:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <HAL_SPI_IRQHandler+0x1c8>)
 8003e86:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd f933 	bl	80010f8 <HAL_DMA_Abort_IT>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003ea4:	e003      	b.n	8003eae <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f811 	bl	8003ece <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003eac:	e000      	b.n	8003eb0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003eae:	bf00      	nop
    return;
 8003eb0:	bf00      	nop
  }
}
 8003eb2:	3720      	adds	r7, #32
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	08003fe3 	.word	0x08003fe3

08003ebc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eee:	f7fc ff0d 	bl	8000d0c <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d03b      	beq.n	8003f7a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0220 	bic.w	r2, r2, #32
 8003f10:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0202 	bic.w	r2, r2, #2
 8003f20:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	2164      	movs	r1, #100	; 0x64
 8003f26:	6978      	ldr	r0, [r7, #20]
 8003f28:	f000 f8f8 	bl	800411c <SPI_EndRxTxTransaction>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	f043 0220 	orr.w	r2, r3, #32
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7ff ffab 	bl	8003ece <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f78:	e002      	b.n	8003f80 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003f7a:	6978      	ldr	r0, [r7, #20]
 8003f7c:	f006 ffc6 	bl	800af0c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff ff91 	bl	8003ebc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0203 	bic.w	r2, r2, #3
 8003fbe:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f043 0210 	orr.w	r2, r3, #16
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f7ff ff7a 	bl	8003ece <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f7ff ff66 	bl	8003ece <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800401c:	f7fc fe76 	bl	8000d0c <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	4413      	add	r3, r2
 800402a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800402c:	f7fc fe6e 	bl	8000d0c <HAL_GetTick>
 8004030:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004032:	4b39      	ldr	r3, [pc, #228]	; (8004118 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	015b      	lsls	r3, r3, #5
 8004038:	0d1b      	lsrs	r3, r3, #20
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004042:	e054      	b.n	80040ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404a:	d050      	beq.n	80040ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800404c:	f7fc fe5e 	bl	8000d0c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	429a      	cmp	r2, r3
 800405a:	d902      	bls.n	8004062 <SPI_WaitFlagStateUntilTimeout+0x56>
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d13d      	bne.n	80040de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004070:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800407a:	d111      	bne.n	80040a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004084:	d004      	beq.n	8004090 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408e:	d107      	bne.n	80040a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a8:	d10f      	bne.n	80040ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e017      	b.n	800410e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4013      	ands	r3, r2
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	bf0c      	ite	eq
 80040fe:	2301      	moveq	r3, #1
 8004100:	2300      	movne	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	429a      	cmp	r2, r3
 800410a:	d19b      	bne.n	8004044 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000000 	.word	0x20000000

0800411c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2200      	movs	r2, #0
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff ff6a 	bl	800400c <SPI_WaitFlagStateUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e000      	b.n	8004150 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e041      	b.n	80041ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fc fb9e 	bl	80008c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4610      	mov	r0, r2
 8004198:	f000 fc8c 	bl	8004ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d001      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e03a      	b.n	8004286 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a18      	ldr	r2, [pc, #96]	; (8004290 <HAL_TIM_Base_Start_IT+0x98>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00e      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x58>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423a:	d009      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x58>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a14      	ldr	r2, [pc, #80]	; (8004294 <HAL_TIM_Base_Start_IT+0x9c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x58>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a13      	ldr	r2, [pc, #76]	; (8004298 <HAL_TIM_Base_Start_IT+0xa0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d111      	bne.n	8004274 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b06      	cmp	r3, #6
 8004260:	d010      	beq.n	8004284 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004272:	e007      	b.n	8004284 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	40012c00 	.word	0x40012c00
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800

0800429c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e041      	b.n	8004332 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f839 	bl	800433a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3304      	adds	r3, #4
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f000 fbea 	bl	8004ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <HAL_TIM_PWM_Start+0x24>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e022      	b.n	80043b6 <HAL_TIM_PWM_Start+0x6a>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b04      	cmp	r3, #4
 8004374:	d109      	bne.n	800438a <HAL_TIM_PWM_Start+0x3e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	bf14      	ite	ne
 8004382:	2301      	movne	r3, #1
 8004384:	2300      	moveq	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	e015      	b.n	80043b6 <HAL_TIM_PWM_Start+0x6a>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d109      	bne.n	80043a4 <HAL_TIM_PWM_Start+0x58>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	bf14      	ite	ne
 800439c:	2301      	movne	r3, #1
 800439e:	2300      	moveq	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e008      	b.n	80043b6 <HAL_TIM_PWM_Start+0x6a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e05e      	b.n	800447c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_PWM_Start+0x82>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043cc:	e013      	b.n	80043f6 <HAL_TIM_PWM_Start+0xaa>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d104      	bne.n	80043de <HAL_TIM_PWM_Start+0x92>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043dc:	e00b      	b.n	80043f6 <HAL_TIM_PWM_Start+0xaa>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_PWM_Start+0xa2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ec:	e003      	b.n	80043f6 <HAL_TIM_PWM_Start+0xaa>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2201      	movs	r2, #1
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fdd8 	bl	8004fb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a1e      	ldr	r2, [pc, #120]	; (8004484 <HAL_TIM_PWM_Start+0x138>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d107      	bne.n	800441e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800441c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a18      	ldr	r2, [pc, #96]	; (8004484 <HAL_TIM_PWM_Start+0x138>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00e      	beq.n	8004446 <HAL_TIM_PWM_Start+0xfa>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004430:	d009      	beq.n	8004446 <HAL_TIM_PWM_Start+0xfa>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a14      	ldr	r2, [pc, #80]	; (8004488 <HAL_TIM_PWM_Start+0x13c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_TIM_PWM_Start+0xfa>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a12      	ldr	r2, [pc, #72]	; (800448c <HAL_TIM_PWM_Start+0x140>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d111      	bne.n	800446a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b06      	cmp	r3, #6
 8004456:	d010      	beq.n	800447a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004468:	e007      	b.n	800447a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800

08004490 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2200      	movs	r2, #0
 80044a0:	6839      	ldr	r1, [r7, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fd86 	bl	8004fb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a29      	ldr	r2, [pc, #164]	; (8004554 <HAL_TIM_PWM_Stop+0xc4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d117      	bne.n	80044e2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6a1a      	ldr	r2, [r3, #32]
 80044b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80044bc:	4013      	ands	r3, r2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <HAL_TIM_PWM_Stop+0x52>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	f240 4344 	movw	r3, #1092	; 0x444
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d107      	bne.n	80044e2 <HAL_TIM_PWM_Stop+0x52>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <HAL_TIM_PWM_Stop+0x82>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	f240 4344 	movw	r3, #1092	; 0x444
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_TIM_PWM_Stop+0x82>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <HAL_TIM_PWM_Stop+0x92>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004520:	e013      	b.n	800454a <HAL_TIM_PWM_Stop+0xba>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d104      	bne.n	8004532 <HAL_TIM_PWM_Stop+0xa2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004530:	e00b      	b.n	800454a <HAL_TIM_PWM_Stop+0xba>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d104      	bne.n	8004542 <HAL_TIM_PWM_Stop+0xb2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004540:	e003      	b.n	800454a <HAL_TIM_PWM_Stop+0xba>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40012c00 	.word	0x40012c00

08004558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d122      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b02      	cmp	r3, #2
 800457a:	d11b      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0202 	mvn.w	r2, #2
 8004584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fa6f 	bl	8004a7e <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fa62 	bl	8004a6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fa71 	bl	8004a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d122      	bne.n	8004608 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d11b      	bne.n	8004608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0204 	mvn.w	r2, #4
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fa45 	bl	8004a7e <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fa38 	bl	8004a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fa47 	bl	8004a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b08      	cmp	r3, #8
 8004614:	d122      	bne.n	800465c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b08      	cmp	r3, #8
 8004622:	d11b      	bne.n	800465c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0208 	mvn.w	r2, #8
 800462c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2204      	movs	r2, #4
 8004632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fa1b 	bl	8004a7e <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fa0e 	bl	8004a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fa1d 	bl	8004a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b10      	cmp	r3, #16
 8004668:	d122      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b10      	cmp	r3, #16
 8004676:	d11b      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0210 	mvn.w	r2, #16
 8004680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2208      	movs	r2, #8
 8004686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f9f1 	bl	8004a7e <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f9e4 	bl	8004a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f9f3 	bl	8004a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d10e      	bne.n	80046dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d107      	bne.n	80046dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0201 	mvn.w	r2, #1
 80046d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f006 fc2a 	bl	800af30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e6:	2b80      	cmp	r3, #128	; 0x80
 80046e8:	d10e      	bne.n	8004708 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f4:	2b80      	cmp	r3, #128	; 0x80
 80046f6:	d107      	bne.n	8004708 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fce1 	bl	80050ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d10e      	bne.n	8004734 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004720:	2b40      	cmp	r3, #64	; 0x40
 8004722:	d107      	bne.n	8004734 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800472c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f9b7 	bl	8004aa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b20      	cmp	r3, #32
 8004740:	d10e      	bne.n	8004760 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b20      	cmp	r3, #32
 800474e:	d107      	bne.n	8004760 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0220 	mvn.w	r2, #32
 8004758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fcac 	bl	80050b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800477e:	2302      	movs	r3, #2
 8004780:	e0ac      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b0c      	cmp	r3, #12
 800478e:	f200 809f 	bhi.w	80048d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	080047cd 	.word	0x080047cd
 800479c:	080048d1 	.word	0x080048d1
 80047a0:	080048d1 	.word	0x080048d1
 80047a4:	080048d1 	.word	0x080048d1
 80047a8:	0800480d 	.word	0x0800480d
 80047ac:	080048d1 	.word	0x080048d1
 80047b0:	080048d1 	.word	0x080048d1
 80047b4:	080048d1 	.word	0x080048d1
 80047b8:	0800484f 	.word	0x0800484f
 80047bc:	080048d1 	.word	0x080048d1
 80047c0:	080048d1 	.word	0x080048d1
 80047c4:	080048d1 	.word	0x080048d1
 80047c8:	0800488f 	.word	0x0800488f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f9d0 	bl	8004b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0208 	orr.w	r2, r2, #8
 80047e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0204 	bic.w	r2, r2, #4
 80047f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6999      	ldr	r1, [r3, #24]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	619a      	str	r2, [r3, #24]
      break;
 800480a:	e062      	b.n	80048d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fa16 	bl	8004c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6999      	ldr	r1, [r3, #24]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	021a      	lsls	r2, r3, #8
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	619a      	str	r2, [r3, #24]
      break;
 800484c:	e041      	b.n	80048d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fa5f 	bl	8004d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0208 	orr.w	r2, r2, #8
 8004868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0204 	bic.w	r2, r2, #4
 8004878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69d9      	ldr	r1, [r3, #28]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	61da      	str	r2, [r3, #28]
      break;
 800488c:	e021      	b.n	80048d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 faa9 	bl	8004dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69d9      	ldr	r1, [r3, #28]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	021a      	lsls	r2, r3, #8
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	61da      	str	r2, [r3, #28]
      break;
 80048ce:	e000      	b.n	80048d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80048d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_TIM_ConfigClockSource+0x18>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e0b3      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x180>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800491a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004922:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004934:	d03e      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0xd0>
 8004936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800493a:	f200 8087 	bhi.w	8004a4c <HAL_TIM_ConfigClockSource+0x168>
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004942:	f000 8085 	beq.w	8004a50 <HAL_TIM_ConfigClockSource+0x16c>
 8004946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494a:	d87f      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x168>
 800494c:	2b70      	cmp	r3, #112	; 0x70
 800494e:	d01a      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0xa2>
 8004950:	2b70      	cmp	r3, #112	; 0x70
 8004952:	d87b      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x168>
 8004954:	2b60      	cmp	r3, #96	; 0x60
 8004956:	d050      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x116>
 8004958:	2b60      	cmp	r3, #96	; 0x60
 800495a:	d877      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x168>
 800495c:	2b50      	cmp	r3, #80	; 0x50
 800495e:	d03c      	beq.n	80049da <HAL_TIM_ConfigClockSource+0xf6>
 8004960:	2b50      	cmp	r3, #80	; 0x50
 8004962:	d873      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x168>
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d058      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0x136>
 8004968:	2b40      	cmp	r3, #64	; 0x40
 800496a:	d86f      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x168>
 800496c:	2b30      	cmp	r3, #48	; 0x30
 800496e:	d064      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x156>
 8004970:	2b30      	cmp	r3, #48	; 0x30
 8004972:	d86b      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x168>
 8004974:	2b20      	cmp	r3, #32
 8004976:	d060      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x156>
 8004978:	2b20      	cmp	r3, #32
 800497a:	d867      	bhi.n	8004a4c <HAL_TIM_ConfigClockSource+0x168>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05c      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x156>
 8004980:	2b10      	cmp	r3, #16
 8004982:	d05a      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004984:	e062      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6899      	ldr	r1, [r3, #8]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f000 faee 	bl	8004f76 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	609a      	str	r2, [r3, #8]
      break;
 80049b2:	e04e      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6899      	ldr	r1, [r3, #8]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f000 fad7 	bl	8004f76 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049d6:	609a      	str	r2, [r3, #8]
      break;
 80049d8:	e03b      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6859      	ldr	r1, [r3, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f000 fa4e 	bl	8004e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2150      	movs	r1, #80	; 0x50
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 faa5 	bl	8004f42 <TIM_ITRx_SetConfig>
      break;
 80049f8:	e02b      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6859      	ldr	r1, [r3, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f000 fa6c 	bl	8004ee4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2160      	movs	r1, #96	; 0x60
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fa95 	bl	8004f42 <TIM_ITRx_SetConfig>
      break;
 8004a18:	e01b      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f000 fa2e 	bl	8004e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2140      	movs	r1, #64	; 0x40
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fa85 	bl	8004f42 <TIM_ITRx_SetConfig>
      break;
 8004a38:	e00b      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4619      	mov	r1, r3
 8004a44:	4610      	mov	r0, r2
 8004a46:	f000 fa7c 	bl	8004f42 <TIM_ITRx_SetConfig>
        break;
 8004a4a:	e002      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a4c:	bf00      	nop
 8004a4e:	e000      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a29      	ldr	r2, [pc, #164]	; (8004b6c <TIM_Base_SetConfig+0xb8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <TIM_Base_SetConfig+0x30>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad2:	d007      	beq.n	8004ae4 <TIM_Base_SetConfig+0x30>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <TIM_Base_SetConfig+0xbc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_Base_SetConfig+0x30>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a25      	ldr	r2, [pc, #148]	; (8004b74 <TIM_Base_SetConfig+0xc0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d108      	bne.n	8004af6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a1c      	ldr	r2, [pc, #112]	; (8004b6c <TIM_Base_SetConfig+0xb8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00b      	beq.n	8004b16 <TIM_Base_SetConfig+0x62>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d007      	beq.n	8004b16 <TIM_Base_SetConfig+0x62>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a19      	ldr	r2, [pc, #100]	; (8004b70 <TIM_Base_SetConfig+0xbc>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_Base_SetConfig+0x62>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <TIM_Base_SetConfig+0xc0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d108      	bne.n	8004b28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a07      	ldr	r2, [pc, #28]	; (8004b6c <TIM_Base_SetConfig+0xb8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d103      	bne.n	8004b5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	615a      	str	r2, [r3, #20]
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800

08004b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f023 0201 	bic.w	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0303 	bic.w	r3, r3, #3
 8004bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f023 0302 	bic.w	r3, r3, #2
 8004bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <TIM_OC1_SetConfig+0xc8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d10c      	bne.n	8004bee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 0308 	bic.w	r3, r3, #8
 8004bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <TIM_OC1_SetConfig+0xc8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d111      	bne.n	8004c1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	621a      	str	r2, [r3, #32]
}
 8004c34:	bf00      	nop
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40012c00 	.word	0x40012c00

08004c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f023 0210 	bic.w	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f023 0320 	bic.w	r3, r3, #32
 8004c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <TIM_OC2_SetConfig+0xd0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d10d      	bne.n	8004cc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <TIM_OC2_SetConfig+0xd0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d113      	bne.n	8004cf0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	621a      	str	r2, [r3, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr
 8004d14:	40012c00 	.word	0x40012c00

08004d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0303 	bic.w	r3, r3, #3
 8004d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a1d      	ldr	r2, [pc, #116]	; (8004de8 <TIM_OC3_SetConfig+0xd0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d10d      	bne.n	8004d92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <TIM_OC3_SetConfig+0xd0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d113      	bne.n	8004dc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	621a      	str	r2, [r3, #32]
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40012c00 	.word	0x40012c00

08004dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	021b      	lsls	r3, r3, #8
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	031b      	lsls	r3, r3, #12
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a0f      	ldr	r2, [pc, #60]	; (8004e84 <TIM_OC4_SetConfig+0x98>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d109      	bne.n	8004e60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	019b      	lsls	r3, r3, #6
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	621a      	str	r2, [r3, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr
 8004e84:	40012c00 	.word	0x40012c00

08004e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0201 	bic.w	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 030a 	bic.w	r3, r3, #10
 8004ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f023 0210 	bic.w	r2, r3, #16
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	031b      	lsls	r3, r3, #12
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	621a      	str	r2, [r3, #32]
}
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f043 0307 	orr.w	r3, r3, #7
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	609a      	str	r2, [r3, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	021a      	lsls	r2, r3, #8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	609a      	str	r2, [r3, #8]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr

08004fb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1a      	ldr	r2, [r3, #32]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1a      	ldr	r2, [r3, #32]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005010:	2302      	movs	r3, #2
 8005012:	e046      	b.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a16      	ldr	r2, [pc, #88]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005060:	d009      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d10c      	bne.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	4313      	orrs	r3, r2
 8005086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800

080050b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr

080050ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050dc:	b084      	sub	sp, #16
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	f107 0014 	add.w	r0, r7, #20
 80050ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	b004      	add	sp, #16
 80050fa:	4770      	bx	lr

080050fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800510c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005110:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005130:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005134:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	b29b      	uxth	r3, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	b29b      	uxth	r3, r3
 8005146:	4013      	ands	r3, r2
 8005148:	b29a      	uxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005174:	b084      	sub	sp, #16
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	f107 0014 	add.w	r0, r7, #20
 8005182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	b004      	add	sp, #16
 80051b2:	4770      	bx	lr

080051b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b09b      	sub	sp, #108	; 0x6c
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	78db      	ldrb	r3, [r3, #3]
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d81f      	bhi.n	8005226 <USB_ActivateEndpoint+0x72>
 80051e6:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <USB_ActivateEndpoint+0x38>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	080051fd 	.word	0x080051fd
 80051f0:	08005219 	.word	0x08005219
 80051f4:	0800522f 	.word	0x0800522f
 80051f8:	0800520b 	.word	0x0800520b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80051fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005200:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005204:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005208:	e012      	b.n	8005230 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800520a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800520e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005212:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005216:	e00b      	b.n	8005230 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005218:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800521c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005220:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005224:	e004      	b.n	8005230 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800522c:	e000      	b.n	8005230 <USB_ActivateEndpoint+0x7c>
      break;
 800522e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	441a      	add	r2, r3
 800523a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800523e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800524e:	b29b      	uxth	r3, r3
 8005250:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005268:	b29a      	uxth	r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	4313      	orrs	r3, r2
 8005272:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	441a      	add	r2, r3
 8005280:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800528c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005294:	b29b      	uxth	r3, r3
 8005296:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	7b1b      	ldrb	r3, [r3, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 8149 	bne.w	8005534 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 8084 	beq.w	80053b4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	4413      	add	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	011a      	lsls	r2, r3, #4
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	88db      	ldrh	r3, [r3, #6]
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	81fb      	strh	r3, [r7, #14]
 80052ee:	89fb      	ldrh	r3, [r7, #14]
 80052f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01b      	beq.n	8005330 <USB_ActivateEndpoint+0x17c>
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	81bb      	strh	r3, [r7, #12]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	441a      	add	r2, r3
 800531a:	89bb      	ldrh	r3, [r7, #12]
 800531c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005328:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800532c:	b29b      	uxth	r3, r3
 800532e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	78db      	ldrb	r3, [r3, #3]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d020      	beq.n	800537a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534e:	813b      	strh	r3, [r7, #8]
 8005350:	893b      	ldrh	r3, [r7, #8]
 8005352:	f083 0320 	eor.w	r3, r3, #32
 8005356:	813b      	strh	r3, [r7, #8]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	441a      	add	r2, r3
 8005362:	893b      	ldrh	r3, [r7, #8]
 8005364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800536c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005374:	b29b      	uxth	r3, r3
 8005376:	8013      	strh	r3, [r2, #0]
 8005378:	e27f      	b.n	800587a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005390:	817b      	strh	r3, [r7, #10]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	441a      	add	r2, r3
 800539c:	897b      	ldrh	r3, [r7, #10]
 800539e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	8013      	strh	r3, [r2, #0]
 80053b2:	e262      	b.n	800587a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053be:	b29b      	uxth	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	4413      	add	r3, r2
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	011a      	lsls	r2, r3, #4
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	88db      	ldrh	r3, [r3, #6]
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	b29b      	uxth	r3, r3
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	4413      	add	r3, r2
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	011a      	lsls	r2, r3, #4
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	4413      	add	r3, r2
 8005406:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800540a:	623b      	str	r3, [r7, #32]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d112      	bne.n	800543a <USB_ActivateEndpoint+0x286>
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29b      	uxth	r3, r3
 800541a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800541e:	b29a      	uxth	r2, r3
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	801a      	strh	r2, [r3, #0]
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005432:	b29a      	uxth	r2, r3
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	e02f      	b.n	800549a <USB_ActivateEndpoint+0x2e6>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b3e      	cmp	r3, #62	; 0x3e
 8005440:	d813      	bhi.n	800546a <USB_ActivateEndpoint+0x2b6>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	663b      	str	r3, [r7, #96]	; 0x60
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <USB_ActivateEndpoint+0x2a8>
 8005456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005458:	3301      	adds	r3, #1
 800545a:	663b      	str	r3, [r7, #96]	; 0x60
 800545c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800545e:	b29b      	uxth	r3, r3
 8005460:	029b      	lsls	r3, r3, #10
 8005462:	b29a      	uxth	r2, r3
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	e017      	b.n	800549a <USB_ActivateEndpoint+0x2e6>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	663b      	str	r3, [r7, #96]	; 0x60
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <USB_ActivateEndpoint+0x2d0>
 800547e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005480:	3b01      	subs	r3, #1
 8005482:	663b      	str	r3, [r7, #96]	; 0x60
 8005484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005486:	b29b      	uxth	r3, r3
 8005488:	029b      	lsls	r3, r3, #10
 800548a:	b29b      	uxth	r3, r3
 800548c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005494:	b29a      	uxth	r2, r3
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	83fb      	strh	r3, [r7, #30]
 80054a8:	8bfb      	ldrh	r3, [r7, #30]
 80054aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01b      	beq.n	80054ea <USB_ActivateEndpoint+0x336>
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	83bb      	strh	r3, [r7, #28]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	8bbb      	ldrh	r3, [r7, #28]
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005500:	837b      	strh	r3, [r7, #26]
 8005502:	8b7b      	ldrh	r3, [r7, #26]
 8005504:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005508:	837b      	strh	r3, [r7, #26]
 800550a:	8b7b      	ldrh	r3, [r7, #26]
 800550c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005510:	837b      	strh	r3, [r7, #26]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	441a      	add	r2, r3
 800551c:	8b7b      	ldrh	r3, [r7, #26]
 800551e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552e:	b29b      	uxth	r3, r3
 8005530:	8013      	strh	r3, [r2, #0]
 8005532:	e1a2      	b.n	800587a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	b29b      	uxth	r3, r3
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	441a      	add	r2, r3
 8005558:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800555c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005564:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556c:	b29b      	uxth	r3, r3
 800556e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	65bb      	str	r3, [r7, #88]	; 0x58
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005580:	4413      	add	r3, r2
 8005582:	65bb      	str	r3, [r7, #88]	; 0x58
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	011a      	lsls	r2, r3, #4
 800558a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800558c:	4413      	add	r3, r2
 800558e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005592:	657b      	str	r3, [r7, #84]	; 0x54
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	891b      	ldrh	r3, [r3, #8]
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	b29b      	uxth	r3, r3
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	653b      	str	r3, [r7, #80]	; 0x50
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b4:	4413      	add	r3, r2
 80055b6:	653b      	str	r3, [r7, #80]	; 0x50
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	011a      	lsls	r2, r3, #4
 80055be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	895b      	ldrh	r3, [r3, #10]
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f040 8091 	bne.w	8005704 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80055f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80055f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01b      	beq.n	8005632 <USB_ActivateEndpoint+0x47e>
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005610:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	441a      	add	r2, r3
 800561c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800561e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800562a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562e:	b29b      	uxth	r3, r3
 8005630:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005640:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01b      	beq.n	8005682 <USB_ActivateEndpoint+0x4ce>
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005660:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	441a      	add	r2, r3
 800566c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800566e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800567e:	b29b      	uxth	r3, r3
 8005680:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005698:	86bb      	strh	r3, [r7, #52]	; 0x34
 800569a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800569c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80056a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80056a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	441a      	add	r2, r3
 80056b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80056b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e0:	867b      	strh	r3, [r7, #50]	; 0x32
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	441a      	add	r2, r3
 80056ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80056ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8013      	strh	r3, [r2, #0]
 8005702:	e0ba      	b.n	800587a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005714:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01d      	beq.n	800575c <USB_ActivateEndpoint+0x5a8>
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	441a      	add	r2, r3
 8005744:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005758:	b29b      	uxth	r3, r3
 800575a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800576c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01d      	beq.n	80057b4 <USB_ActivateEndpoint+0x600>
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	441a      	add	r2, r3
 800579c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80057a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	78db      	ldrb	r3, [r3, #3]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d024      	beq.n	8005806 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80057d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057da:	f083 0320 	eor.w	r3, r3, #32
 80057de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005800:	b29b      	uxth	r3, r3
 8005802:	8013      	strh	r3, [r2, #0]
 8005804:	e01d      	b.n	8005842 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800581c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	441a      	add	r2, r3
 800582a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800582e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583e:	b29b      	uxth	r3, r3
 8005840:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005858:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	441a      	add	r2, r3
 8005864:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800586a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800586e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005876:	b29b      	uxth	r3, r3
 8005878:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800587a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800587e:	4618      	mov	r0, r3
 8005880:	376c      	adds	r7, #108	; 0x6c
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005888:	b480      	push	{r7}
 800588a:	b08d      	sub	sp, #52	; 0x34
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	7b1b      	ldrb	r3, [r3, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f040 808e 	bne.w	80059b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d044      	beq.n	800592e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	81bb      	strh	r3, [r7, #12]
 80058b2:	89bb      	ldrh	r3, [r7, #12]
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01b      	beq.n	80058f4 <USB_DeactivateEndpoint+0x6c>
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	817b      	strh	r3, [r7, #10]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	441a      	add	r2, r3
 80058de:	897b      	ldrh	r3, [r7, #10]
 80058e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800590a:	813b      	strh	r3, [r7, #8]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	441a      	add	r2, r3
 8005916:	893b      	ldrh	r3, [r7, #8]
 8005918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005928:	b29b      	uxth	r3, r3
 800592a:	8013      	strh	r3, [r2, #0]
 800592c:	e192      	b.n	8005c54 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	827b      	strh	r3, [r7, #18]
 800593c:	8a7b      	ldrh	r3, [r7, #18]
 800593e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01b      	beq.n	800597e <USB_DeactivateEndpoint+0xf6>
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595c:	823b      	strh	r3, [r7, #16]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	441a      	add	r2, r3
 8005968:	8a3b      	ldrh	r3, [r7, #16]
 800596a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005994:	81fb      	strh	r3, [r7, #14]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	441a      	add	r2, r3
 80059a0:	89fb      	ldrh	r3, [r7, #14]
 80059a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	8013      	strh	r3, [r2, #0]
 80059b6:	e14d      	b.n	8005c54 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f040 80a5 	bne.w	8005b0c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	843b      	strh	r3, [r7, #32]
 80059d0:	8c3b      	ldrh	r3, [r7, #32]
 80059d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01b      	beq.n	8005a12 <USB_DeactivateEndpoint+0x18a>
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f0:	83fb      	strh	r3, [r7, #30]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	441a      	add	r2, r3
 80059fc:	8bfb      	ldrh	r3, [r7, #30]
 80059fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	83bb      	strh	r3, [r7, #28]
 8005a20:	8bbb      	ldrh	r3, [r7, #28]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01b      	beq.n	8005a62 <USB_DeactivateEndpoint+0x1da>
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a40:	837b      	strh	r3, [r7, #26]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	441a      	add	r2, r3
 8005a4c:	8b7b      	ldrh	r3, [r7, #26]
 8005a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a78:	833b      	strh	r3, [r7, #24]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	441a      	add	r2, r3
 8005a84:	8b3b      	ldrh	r3, [r7, #24]
 8005a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab0:	82fb      	strh	r3, [r7, #22]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	441a      	add	r2, r3
 8005abc:	8afb      	ldrh	r3, [r7, #22]
 8005abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae8:	82bb      	strh	r3, [r7, #20]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	441a      	add	r2, r3
 8005af4:	8abb      	ldrh	r3, [r7, #20]
 8005af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	8013      	strh	r3, [r2, #0]
 8005b0a:	e0a3      	b.n	8005c54 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01b      	beq.n	8005b5c <USB_DeactivateEndpoint+0x2d4>
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	441a      	add	r2, r3
 8005b46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01b      	beq.n	8005bac <USB_DeactivateEndpoint+0x324>
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	441a      	add	r2, r3
 8005c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	441a      	add	r2, r3
 8005c3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3734      	adds	r7, #52	; 0x34
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b0cc      	sub	sp, #304	; 0x130
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	6018      	str	r0, [r3, #0]
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c6e:	463b      	mov	r3, r7
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	f040 872e 	bne.w	8006ad6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	463b      	mov	r3, r7
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d905      	bls.n	8005c96 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005c94:	e004      	b.n	8005ca0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005c96:	463b      	mov	r3, r7
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	7b1b      	ldrb	r3, [r3, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d134      	bne.n	8005d14 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6959      	ldr	r1, [r3, #20]
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	88da      	ldrh	r2, [r3, #6]
 8005cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	1d38      	adds	r0, r7, #4
 8005cbe:	6800      	ldr	r0, [r0, #0]
 8005cc0:	f001 fc03 	bl	80074ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005cc4:	f107 0310 	add.w	r3, r7, #16
 8005cc8:	1d3a      	adds	r2, r7, #4
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	1d3b      	adds	r3, r7, #4
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	4619      	mov	r1, r3
 8005cda:	f107 0310 	add.w	r3, r7, #16
 8005cde:	f107 0210 	add.w	r2, r7, #16
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	463b      	mov	r3, r7
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	011a      	lsls	r2, r3, #4
 8005cf0:	f107 0310 	add.w	r3, r7, #16
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005cfc:	f107 030c 	add.w	r3, r7, #12
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	f107 030c 	add.w	r3, r7, #12
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	f000 beac 	b.w	8006a6c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005d14:	463b      	mov	r3, r7
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	78db      	ldrb	r3, [r3, #3]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	f040 838c 	bne.w	8006438 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005d20:	463b      	mov	r3, r7
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6a1a      	ldr	r2, [r3, #32]
 8005d26:	463b      	mov	r3, r7
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	f240 8330 	bls.w	8006392 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005d32:	1d3b      	adds	r3, r7, #4
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	463b      	mov	r3, r7
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005d50:	1d3b      	adds	r3, r7, #4
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	463b      	mov	r3, r7
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	441a      	add	r2, r3
 8005d5e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d6a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005d76:	463b      	mov	r3, r7
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6a1a      	ldr	r2, [r3, #32]
 8005d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d80:	1ad2      	subs	r2, r2, r3
 8005d82:	463b      	mov	r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d88:	1d3b      	adds	r3, r7, #4
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 819e 	beq.w	80060e0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005da4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005da8:	1d3a      	adds	r2, r7, #4
 8005daa:	6812      	ldr	r2, [r2, #0]
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	463b      	mov	r3, r7
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d17a      	bne.n	8005eae <USB_EPStartXfer+0x24e>
 8005db8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dbc:	1d3a      	adds	r2, r7, #4
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	1d3b      	adds	r3, r7, #4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	4619      	mov	r1, r3
 8005dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005dd6:	6812      	ldr	r2, [r2, #0]
 8005dd8:	440a      	add	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	463b      	mov	r3, r7
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	011a      	lsls	r2, r3, #4
 8005de4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4413      	add	r3, r2
 8005dec:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d11a      	bne.n	8005e34 <USB_EPStartXfer+0x1d4>
 8005dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	e062      	b.n	8005efa <USB_EPStartXfer+0x29a>
 8005e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e38:	2b3e      	cmp	r3, #62	; 0x3e
 8005e3a:	d819      	bhi.n	8005e70 <USB_EPStartXfer+0x210>
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	085b      	lsrs	r3, r3, #1
 8005e42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d004      	beq.n	8005e5c <USB_EPStartXfer+0x1fc>
 8005e52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e56:	3301      	adds	r3, #1
 8005e58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	029b      	lsls	r3, r3, #10
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	e044      	b.n	8005efa <USB_EPStartXfer+0x29a>
 8005e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d104      	bne.n	8005e90 <USB_EPStartXfer+0x230>
 8005e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	029b      	lsls	r3, r3, #10
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	801a      	strh	r2, [r3, #0]
 8005eac:	e025      	b.n	8005efa <USB_EPStartXfer+0x29a>
 8005eae:	463b      	mov	r3, r7
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d120      	bne.n	8005efa <USB_EPStartXfer+0x29a>
 8005eb8:	1d3b      	adds	r3, r7, #4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ec8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	440a      	add	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	011a      	lsls	r2, r3, #4
 8005eda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005efa:	463b      	mov	r3, r7
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	895b      	ldrh	r3, [r3, #10]
 8005f00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f04:	463b      	mov	r3, r7
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6959      	ldr	r1, [r3, #20]
 8005f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f14:	1d38      	adds	r0, r7, #4
 8005f16:	6800      	ldr	r0, [r0, #0]
 8005f18:	f001 fad7 	bl	80074ca <USB_WritePMA>
            ep->xfer_buff += len;
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695a      	ldr	r2, [r3, #20]
 8005f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f26:	441a      	add	r2, r3
 8005f28:	463b      	mov	r3, r7
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f2e:	463b      	mov	r3, r7
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6a1a      	ldr	r2, [r3, #32]
 8005f34:	463b      	mov	r3, r7
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d909      	bls.n	8005f52 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a1a      	ldr	r2, [r3, #32]
 8005f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f48:	1ad2      	subs	r2, r2, r3
 8005f4a:	463b      	mov	r3, r7
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	621a      	str	r2, [r3, #32]
 8005f50:	e008      	b.n	8005f64 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f52:	463b      	mov	r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2200      	movs	r2, #0
 8005f62:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f64:	463b      	mov	r3, r7
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d17a      	bne.n	8006064 <USB_EPStartXfer+0x404>
 8005f6e:	f107 0318 	add.w	r3, r7, #24
 8005f72:	1d3a      	adds	r2, r7, #4
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	1d3b      	adds	r3, r7, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	4619      	mov	r1, r3
 8005f84:	f107 0318 	add.w	r3, r7, #24
 8005f88:	f107 0218 	add.w	r2, r7, #24
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	440a      	add	r2, r1
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	011a      	lsls	r2, r3, #4
 8005f9a:	f107 0318 	add.w	r3, r7, #24
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005fa6:	f107 0314 	add.w	r3, r7, #20
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11a      	bne.n	8005fea <USB_EPStartXfer+0x38a>
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	f107 0314 	add.w	r3, r7, #20
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	f107 0314 	add.w	r3, r7, #20
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	f107 0314 	add.w	r3, r7, #20
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	e067      	b.n	80060ba <USB_EPStartXfer+0x45a>
 8005fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fee:	2b3e      	cmp	r3, #62	; 0x3e
 8005ff0:	d819      	bhi.n	8006026 <USB_EPStartXfer+0x3c6>
 8005ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d004      	beq.n	8006012 <USB_EPStartXfer+0x3b2>
 8006008:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800600c:	3301      	adds	r3, #1
 800600e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006012:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006016:	b29b      	uxth	r3, r3
 8006018:	029b      	lsls	r3, r3, #10
 800601a:	b29a      	uxth	r2, r3
 800601c:	f107 0314 	add.w	r3, r7, #20
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e049      	b.n	80060ba <USB_EPStartXfer+0x45a>
 8006026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <USB_EPStartXfer+0x3e6>
 800603c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006040:	3b01      	subs	r3, #1
 8006042:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006046:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800604a:	b29b      	uxth	r3, r3
 800604c:	029b      	lsls	r3, r3, #10
 800604e:	b29b      	uxth	r3, r3
 8006050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006058:	b29a      	uxth	r2, r3
 800605a:	f107 0314 	add.w	r3, r7, #20
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	e02a      	b.n	80060ba <USB_EPStartXfer+0x45a>
 8006064:	463b      	mov	r3, r7
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	785b      	ldrb	r3, [r3, #1]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d125      	bne.n	80060ba <USB_EPStartXfer+0x45a>
 800606e:	f107 0320 	add.w	r3, r7, #32
 8006072:	1d3a      	adds	r2, r7, #4
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	1d3b      	adds	r3, r7, #4
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006080:	b29b      	uxth	r3, r3
 8006082:	4619      	mov	r1, r3
 8006084:	f107 0320 	add.w	r3, r7, #32
 8006088:	f107 0220 	add.w	r2, r7, #32
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	440a      	add	r2, r1
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	463b      	mov	r3, r7
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	011a      	lsls	r2, r3, #4
 800609a:	f107 0320 	add.w	r3, r7, #32
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4413      	add	r3, r2
 80060a2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80060a6:	f107 031c 	add.w	r3, r7, #28
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	f107 031c 	add.w	r3, r7, #28
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060ba:	463b      	mov	r3, r7
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	891b      	ldrh	r3, [r3, #8]
 80060c0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6959      	ldr	r1, [r3, #20]
 80060ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060d4:	1d38      	adds	r0, r7, #4
 80060d6:	6800      	ldr	r0, [r0, #0]
 80060d8:	f001 f9f7 	bl	80074ca <USB_WritePMA>
 80060dc:	f000 bcc6 	b.w	8006a6c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060e0:	463b      	mov	r3, r7
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d164      	bne.n	80061b4 <USB_EPStartXfer+0x554>
 80060ea:	1d3b      	adds	r3, r7, #4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f0:	1d3b      	adds	r3, r7, #4
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060fe:	4413      	add	r3, r2
 8006100:	64bb      	str	r3, [r7, #72]	; 0x48
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	011a      	lsls	r2, r3, #4
 800610a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800610c:	4413      	add	r3, r2
 800610e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006112:	647b      	str	r3, [r7, #68]	; 0x44
 8006114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d112      	bne.n	8006142 <USB_EPStartXfer+0x4e2>
 800611c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b29b      	uxth	r3, r3
 8006122:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006126:	b29a      	uxth	r2, r3
 8006128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800613a:	b29a      	uxth	r2, r3
 800613c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	e057      	b.n	80061f2 <USB_EPStartXfer+0x592>
 8006142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006146:	2b3e      	cmp	r3, #62	; 0x3e
 8006148:	d817      	bhi.n	800617a <USB_EPStartXfer+0x51a>
 800614a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d004      	beq.n	800616a <USB_EPStartXfer+0x50a>
 8006160:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006164:	3301      	adds	r3, #1
 8006166:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800616a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800616e:	b29b      	uxth	r3, r3
 8006170:	029b      	lsls	r3, r3, #10
 8006172:	b29a      	uxth	r2, r3
 8006174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006176:	801a      	strh	r2, [r3, #0]
 8006178:	e03b      	b.n	80061f2 <USB_EPStartXfer+0x592>
 800617a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006188:	f003 031f 	and.w	r3, r3, #31
 800618c:	2b00      	cmp	r3, #0
 800618e:	d104      	bne.n	800619a <USB_EPStartXfer+0x53a>
 8006190:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006194:	3b01      	subs	r3, #1
 8006196:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800619a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800619e:	b29b      	uxth	r3, r3
 80061a0:	029b      	lsls	r3, r3, #10
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b0:	801a      	strh	r2, [r3, #0]
 80061b2:	e01e      	b.n	80061f2 <USB_EPStartXfer+0x592>
 80061b4:	463b      	mov	r3, r7
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d119      	bne.n	80061f2 <USB_EPStartXfer+0x592>
 80061be:	1d3b      	adds	r3, r7, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	653b      	str	r3, [r7, #80]	; 0x50
 80061c4:	1d3b      	adds	r3, r7, #4
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d2:	4413      	add	r3, r2
 80061d4:	653b      	str	r3, [r7, #80]	; 0x50
 80061d6:	463b      	mov	r3, r7
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	011a      	lsls	r2, r3, #4
 80061de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e0:	4413      	add	r3, r2
 80061e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061f2:	463b      	mov	r3, r7
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	891b      	ldrh	r3, [r3, #8]
 80061f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6959      	ldr	r1, [r3, #20]
 8006202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006206:	b29b      	uxth	r3, r3
 8006208:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800620c:	1d38      	adds	r0, r7, #4
 800620e:	6800      	ldr	r0, [r0, #0]
 8006210:	f001 f95b 	bl	80074ca <USB_WritePMA>
            ep->xfer_buff += len;
 8006214:	463b      	mov	r3, r7
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695a      	ldr	r2, [r3, #20]
 800621a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800621e:	441a      	add	r2, r3
 8006220:	463b      	mov	r3, r7
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6a1a      	ldr	r2, [r3, #32]
 800622c:	463b      	mov	r3, r7
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	429a      	cmp	r2, r3
 8006234:	d909      	bls.n	800624a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8006236:	463b      	mov	r3, r7
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6a1a      	ldr	r2, [r3, #32]
 800623c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006240:	1ad2      	subs	r2, r2, r3
 8006242:	463b      	mov	r3, r7
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	621a      	str	r2, [r3, #32]
 8006248:	e008      	b.n	800625c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800624a:	463b      	mov	r3, r7
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006254:	463b      	mov	r3, r7
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2200      	movs	r2, #0
 800625a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800625c:	1d3b      	adds	r3, r7, #4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	643b      	str	r3, [r7, #64]	; 0x40
 8006262:	463b      	mov	r3, r7
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d164      	bne.n	8006336 <USB_EPStartXfer+0x6d6>
 800626c:	1d3b      	adds	r3, r7, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	63bb      	str	r3, [r7, #56]	; 0x38
 8006272:	1d3b      	adds	r3, r7, #4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627a:	b29b      	uxth	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	4413      	add	r3, r2
 8006282:	63bb      	str	r3, [r7, #56]	; 0x38
 8006284:	463b      	mov	r3, r7
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	011a      	lsls	r2, r3, #4
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	4413      	add	r3, r2
 8006290:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
 8006296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d112      	bne.n	80062c4 <USB_EPStartXfer+0x664>
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062bc:	b29a      	uxth	r2, r3
 80062be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	e054      	b.n	800636e <USB_EPStartXfer+0x70e>
 80062c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c8:	2b3e      	cmp	r3, #62	; 0x3e
 80062ca:	d817      	bhi.n	80062fc <USB_EPStartXfer+0x69c>
 80062cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d0:	085b      	lsrs	r3, r3, #1
 80062d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80062d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <USB_EPStartXfer+0x68c>
 80062e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062e6:	3301      	adds	r3, #1
 80062e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80062ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	029b      	lsls	r3, r3, #10
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e038      	b.n	800636e <USB_EPStartXfer+0x70e>
 80062fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2b00      	cmp	r3, #0
 8006310:	d104      	bne.n	800631c <USB_EPStartXfer+0x6bc>
 8006312:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006316:	3b01      	subs	r3, #1
 8006318:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800631c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006320:	b29b      	uxth	r3, r3
 8006322:	029b      	lsls	r3, r3, #10
 8006324:	b29b      	uxth	r3, r3
 8006326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800632e:	b29a      	uxth	r2, r3
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	e01b      	b.n	800636e <USB_EPStartXfer+0x70e>
 8006336:	463b      	mov	r3, r7
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d116      	bne.n	800636e <USB_EPStartXfer+0x70e>
 8006340:	1d3b      	adds	r3, r7, #4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006348:	b29b      	uxth	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634e:	4413      	add	r3, r2
 8006350:	643b      	str	r3, [r7, #64]	; 0x40
 8006352:	463b      	mov	r3, r7
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	011a      	lsls	r2, r3, #4
 800635a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800635c:	4413      	add	r3, r2
 800635e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006368:	b29a      	uxth	r2, r3
 800636a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800636c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800636e:	463b      	mov	r3, r7
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	895b      	ldrh	r3, [r3, #10]
 8006374:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006378:	463b      	mov	r3, r7
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6959      	ldr	r1, [r3, #20]
 800637e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006382:	b29b      	uxth	r3, r3
 8006384:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006388:	1d38      	adds	r0, r7, #4
 800638a:	6800      	ldr	r0, [r0, #0]
 800638c:	f001 f89d 	bl	80074ca <USB_WritePMA>
 8006390:	e36c      	b.n	8006a6c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006392:	463b      	mov	r3, r7
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800639c:	1d3b      	adds	r3, r7, #4
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	463b      	mov	r3, r7
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80063ba:	1d3b      	adds	r3, r7, #4
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	463b      	mov	r3, r7
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	441a      	add	r2, r3
 80063c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80063cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063dc:	b29b      	uxth	r3, r3
 80063de:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063e0:	1d3b      	adds	r3, r7, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063e6:	1d3b      	adds	r3, r7, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f4:	4413      	add	r3, r2
 80063f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063f8:	463b      	mov	r3, r7
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	011a      	lsls	r2, r3, #4
 8006400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006402:	4413      	add	r3, r2
 8006404:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006408:	65bb      	str	r3, [r7, #88]	; 0x58
 800640a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640e:	b29a      	uxth	r2, r3
 8006410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006412:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006414:	463b      	mov	r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	891b      	ldrh	r3, [r3, #8]
 800641a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6959      	ldr	r1, [r3, #20]
 8006424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006428:	b29b      	uxth	r3, r3
 800642a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800642e:	1d38      	adds	r0, r7, #4
 8006430:	6800      	ldr	r0, [r0, #0]
 8006432:	f001 f84a 	bl	80074ca <USB_WritePMA>
 8006436:	e319      	b.n	8006a6c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006438:	1d3b      	adds	r3, r7, #4
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	463b      	mov	r3, r7
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006456:	1d3b      	adds	r3, r7, #4
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	463b      	mov	r3, r7
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006470:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006478:	b29b      	uxth	r3, r3
 800647a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800647c:	463b      	mov	r3, r7
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6a1a      	ldr	r2, [r3, #32]
 8006482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	463b      	mov	r3, r7
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800648e:	1d3b      	adds	r3, r7, #4
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	463b      	mov	r3, r7
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 8162 	beq.w	800676e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064b2:	463b      	mov	r3, r7
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d164      	bne.n	8006586 <USB_EPStartXfer+0x926>
 80064bc:	1d3b      	adds	r3, r7, #4
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80064c2:	1d3b      	adds	r3, r7, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064d0:	4413      	add	r3, r2
 80064d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80064d4:	463b      	mov	r3, r7
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	011a      	lsls	r2, r3, #4
 80064dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064de:	4413      	add	r3, r2
 80064e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064e4:	677b      	str	r3, [r7, #116]	; 0x74
 80064e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d112      	bne.n	8006514 <USB_EPStartXfer+0x8b4>
 80064ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650c:	b29a      	uxth	r2, r3
 800650e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	e057      	b.n	80065c4 <USB_EPStartXfer+0x964>
 8006514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006518:	2b3e      	cmp	r3, #62	; 0x3e
 800651a:	d817      	bhi.n	800654c <USB_EPStartXfer+0x8ec>
 800651c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <USB_EPStartXfer+0x8dc>
 8006532:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006536:	3301      	adds	r3, #1
 8006538:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800653c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006540:	b29b      	uxth	r3, r3
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	b29a      	uxth	r2, r3
 8006546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	e03b      	b.n	80065c4 <USB_EPStartXfer+0x964>
 800654c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006550:	095b      	lsrs	r3, r3, #5
 8006552:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655a:	f003 031f 	and.w	r3, r3, #31
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <USB_EPStartXfer+0x90c>
 8006562:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006566:	3b01      	subs	r3, #1
 8006568:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800656c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006570:	b29b      	uxth	r3, r3
 8006572:	029b      	lsls	r3, r3, #10
 8006574:	b29b      	uxth	r3, r3
 8006576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657e:	b29a      	uxth	r2, r3
 8006580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	e01e      	b.n	80065c4 <USB_EPStartXfer+0x964>
 8006586:	463b      	mov	r3, r7
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d119      	bne.n	80065c4 <USB_EPStartXfer+0x964>
 8006590:	1d3b      	adds	r3, r7, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006598:	b29b      	uxth	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065a0:	4413      	add	r3, r2
 80065a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065a6:	463b      	mov	r3, r7
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	011a      	lsls	r2, r3, #4
 80065ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065b2:	4413      	add	r3, r2
 80065b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065be:	b29a      	uxth	r2, r3
 80065c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80065c4:	463b      	mov	r3, r7
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	895b      	ldrh	r3, [r3, #10]
 80065ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065ce:	463b      	mov	r3, r7
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6959      	ldr	r1, [r3, #20]
 80065d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065de:	1d38      	adds	r0, r7, #4
 80065e0:	6800      	ldr	r0, [r0, #0]
 80065e2:	f000 ff72 	bl	80074ca <USB_WritePMA>
          ep->xfer_buff += len;
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f0:	441a      	add	r2, r3
 80065f2:	463b      	mov	r3, r7
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80065f8:	463b      	mov	r3, r7
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6a1a      	ldr	r2, [r3, #32]
 80065fe:	463b      	mov	r3, r7
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	429a      	cmp	r2, r3
 8006606:	d909      	bls.n	800661c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006608:	463b      	mov	r3, r7
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006612:	1ad2      	subs	r2, r2, r3
 8006614:	463b      	mov	r3, r7
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	621a      	str	r2, [r3, #32]
 800661a:	e008      	b.n	800662e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800661c:	463b      	mov	r3, r7
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006626:	463b      	mov	r3, r7
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800662e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 821a 	beq.w	8006a6c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006638:	463b      	mov	r3, r7
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d164      	bne.n	800670c <USB_EPStartXfer+0xaac>
 8006642:	1d3b      	adds	r3, r7, #4
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	66bb      	str	r3, [r7, #104]	; 0x68
 8006648:	1d3b      	adds	r3, r7, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006650:	b29b      	uxth	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006656:	4413      	add	r3, r2
 8006658:	66bb      	str	r3, [r7, #104]	; 0x68
 800665a:	463b      	mov	r3, r7
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	011a      	lsls	r2, r3, #4
 8006662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006664:	4413      	add	r3, r2
 8006666:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800666a:	667b      	str	r3, [r7, #100]	; 0x64
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d112      	bne.n	800669a <USB_EPStartXfer+0xa3a>
 8006674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800667e:	b29a      	uxth	r2, r3
 8006680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006692:	b29a      	uxth	r2, r3
 8006694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	e057      	b.n	800674a <USB_EPStartXfer+0xaea>
 800669a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800669e:	2b3e      	cmp	r3, #62	; 0x3e
 80066a0:	d817      	bhi.n	80066d2 <USB_EPStartXfer+0xa72>
 80066a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d004      	beq.n	80066c2 <USB_EPStartXfer+0xa62>
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066bc:	3301      	adds	r3, #1
 80066be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	029b      	lsls	r3, r3, #10
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	e03b      	b.n	800674a <USB_EPStartXfer+0xaea>
 80066d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e0:	f003 031f 	and.w	r3, r3, #31
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <USB_EPStartXfer+0xa92>
 80066e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ec:	3b01      	subs	r3, #1
 80066ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	029b      	lsls	r3, r3, #10
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006704:	b29a      	uxth	r2, r3
 8006706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006708:	801a      	strh	r2, [r3, #0]
 800670a:	e01e      	b.n	800674a <USB_EPStartXfer+0xaea>
 800670c:	463b      	mov	r3, r7
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d119      	bne.n	800674a <USB_EPStartXfer+0xaea>
 8006716:	1d3b      	adds	r3, r7, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	673b      	str	r3, [r7, #112]	; 0x70
 800671c:	1d3b      	adds	r3, r7, #4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006724:	b29b      	uxth	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800672a:	4413      	add	r3, r2
 800672c:	673b      	str	r3, [r7, #112]	; 0x70
 800672e:	463b      	mov	r3, r7
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	011a      	lsls	r2, r3, #4
 8006736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006738:	4413      	add	r3, r2
 800673a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800673e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006744:	b29a      	uxth	r2, r3
 8006746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006748:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800674a:	463b      	mov	r3, r7
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	891b      	ldrh	r3, [r3, #8]
 8006750:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006754:	463b      	mov	r3, r7
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6959      	ldr	r1, [r3, #20]
 800675a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675e:	b29b      	uxth	r3, r3
 8006760:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006764:	1d38      	adds	r0, r7, #4
 8006766:	6800      	ldr	r0, [r0, #0]
 8006768:	f000 feaf 	bl	80074ca <USB_WritePMA>
 800676c:	e17e      	b.n	8006a6c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800676e:	463b      	mov	r3, r7
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d16f      	bne.n	8006858 <USB_EPStartXfer+0xbf8>
 8006778:	1d3b      	adds	r3, r7, #4
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006780:	1d3b      	adds	r3, r7, #4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006788:	b29b      	uxth	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006790:	4413      	add	r3, r2
 8006792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006796:	463b      	mov	r3, r7
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	011a      	lsls	r2, r3, #4
 800679e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067a2:	4413      	add	r3, r2
 80067a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d116      	bne.n	80067e2 <USB_EPStartXfer+0xb82>
 80067b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067c6:	801a      	strh	r2, [r3, #0]
 80067c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d8:	b29a      	uxth	r2, r3
 80067da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	e05f      	b.n	80068a2 <USB_EPStartXfer+0xc42>
 80067e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e6:	2b3e      	cmp	r3, #62	; 0x3e
 80067e8:	d818      	bhi.n	800681c <USB_EPStartXfer+0xbbc>
 80067ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80067f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d004      	beq.n	800680a <USB_EPStartXfer+0xbaa>
 8006800:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006804:	3301      	adds	r3, #1
 8006806:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800680a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800680e:	b29b      	uxth	r3, r3
 8006810:	029b      	lsls	r3, r3, #10
 8006812:	b29a      	uxth	r2, r3
 8006814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006818:	801a      	strh	r2, [r3, #0]
 800681a:	e042      	b.n	80068a2 <USB_EPStartXfer+0xc42>
 800681c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <USB_EPStartXfer+0xbdc>
 8006832:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006836:	3b01      	subs	r3, #1
 8006838:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800683c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006840:	b29b      	uxth	r3, r3
 8006842:	029b      	lsls	r3, r3, #10
 8006844:	b29b      	uxth	r3, r3
 8006846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800684a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800684e:	b29a      	uxth	r2, r3
 8006850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006854:	801a      	strh	r2, [r3, #0]
 8006856:	e024      	b.n	80068a2 <USB_EPStartXfer+0xc42>
 8006858:	463b      	mov	r3, r7
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	785b      	ldrb	r3, [r3, #1]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d11f      	bne.n	80068a2 <USB_EPStartXfer+0xc42>
 8006862:	1d3b      	adds	r3, r7, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800686a:	1d3b      	adds	r3, r7, #4
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006872:	b29b      	uxth	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800687a:	4413      	add	r3, r2
 800687c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006880:	463b      	mov	r3, r7
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	011a      	lsls	r2, r3, #4
 8006888:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800688c:	4413      	add	r3, r2
 800688e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800689a:	b29a      	uxth	r2, r3
 800689c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068a2:	463b      	mov	r3, r7
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	891b      	ldrh	r3, [r3, #8]
 80068a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068ac:	463b      	mov	r3, r7
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6959      	ldr	r1, [r3, #20]
 80068b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068bc:	1d38      	adds	r0, r7, #4
 80068be:	6800      	ldr	r0, [r0, #0]
 80068c0:	f000 fe03 	bl	80074ca <USB_WritePMA>
          ep->xfer_buff += len;
 80068c4:	463b      	mov	r3, r7
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ce:	441a      	add	r2, r3
 80068d0:	463b      	mov	r3, r7
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80068d6:	463b      	mov	r3, r7
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6a1a      	ldr	r2, [r3, #32]
 80068dc:	463b      	mov	r3, r7
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d909      	bls.n	80068fa <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80068e6:	463b      	mov	r3, r7
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f0:	1ad2      	subs	r2, r2, r3
 80068f2:	463b      	mov	r3, r7
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	621a      	str	r2, [r3, #32]
 80068f8:	e008      	b.n	800690c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80068fa:	463b      	mov	r3, r7
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006904:	463b      	mov	r3, r7
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2200      	movs	r2, #0
 800690a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800690c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80ab 	beq.w	8006a6c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006916:	1d3b      	adds	r3, r7, #4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800691e:	463b      	mov	r3, r7
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	785b      	ldrb	r3, [r3, #1]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d16f      	bne.n	8006a08 <USB_EPStartXfer+0xda8>
 8006928:	1d3b      	adds	r3, r7, #4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006930:	1d3b      	adds	r3, r7, #4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006938:	b29b      	uxth	r3, r3
 800693a:	461a      	mov	r2, r3
 800693c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006940:	4413      	add	r3, r2
 8006942:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006946:	463b      	mov	r3, r7
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	011a      	lsls	r2, r3, #4
 800694e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006952:	4413      	add	r3, r2
 8006954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800695c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d116      	bne.n	8006992 <USB_EPStartXfer+0xd32>
 8006964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006970:	b29a      	uxth	r2, r3
 8006972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006988:	b29a      	uxth	r2, r3
 800698a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800698e:	801a      	strh	r2, [r3, #0]
 8006990:	e05b      	b.n	8006a4a <USB_EPStartXfer+0xdea>
 8006992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006996:	2b3e      	cmp	r3, #62	; 0x3e
 8006998:	d818      	bhi.n	80069cc <USB_EPStartXfer+0xd6c>
 800699a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800699e:	085b      	lsrs	r3, r3, #1
 80069a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <USB_EPStartXfer+0xd5a>
 80069b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b4:	3301      	adds	r3, #1
 80069b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069be:	b29b      	uxth	r3, r3
 80069c0:	029b      	lsls	r3, r3, #10
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069c8:	801a      	strh	r2, [r3, #0]
 80069ca:	e03e      	b.n	8006a4a <USB_EPStartXfer+0xdea>
 80069cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069da:	f003 031f 	and.w	r3, r3, #31
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <USB_EPStartXfer+0xd8c>
 80069e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069e6:	3b01      	subs	r3, #1
 80069e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	029b      	lsls	r3, r3, #10
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	e020      	b.n	8006a4a <USB_EPStartXfer+0xdea>
 8006a08:	463b      	mov	r3, r7
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d11b      	bne.n	8006a4a <USB_EPStartXfer+0xdea>
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a22:	4413      	add	r3, r2
 8006a24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a28:	463b      	mov	r3, r7
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	011a      	lsls	r2, r3, #4
 8006a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a34:	4413      	add	r3, r2
 8006a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	895b      	ldrh	r3, [r3, #10]
 8006a50:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a54:	463b      	mov	r3, r7
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6959      	ldr	r1, [r3, #20]
 8006a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a64:	1d38      	adds	r0, r7, #4
 8006a66:	6800      	ldr	r0, [r0, #0]
 8006a68:	f000 fd2f 	bl	80074ca <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a6c:	1d3b      	adds	r3, r7, #4
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	463b      	mov	r3, r7
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f107 020a 	add.w	r2, r7, #10
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8a:	8013      	strh	r3, [r2, #0]
 8006a8c:	f107 030a 	add.w	r3, r7, #10
 8006a90:	f107 020a 	add.w	r2, r7, #10
 8006a94:	8812      	ldrh	r2, [r2, #0]
 8006a96:	f082 0210 	eor.w	r2, r2, #16
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	f107 030a 	add.w	r3, r7, #10
 8006aa0:	f107 020a 	add.w	r2, r7, #10
 8006aa4:	8812      	ldrh	r2, [r2, #0]
 8006aa6:	f082 0220 	eor.w	r2, r2, #32
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	1d3b      	adds	r3, r7, #4
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	441a      	add	r2, r3
 8006aba:	f107 030a 	add.w	r3, r7, #10
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	8013      	strh	r3, [r2, #0]
 8006ad4:	e3b5      	b.n	8007242 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	7b1b      	ldrb	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f040 8090 	bne.w	8006c02 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ae2:	463b      	mov	r3, r7
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	463b      	mov	r3, r7
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d90e      	bls.n	8006b10 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006af2:	463b      	mov	r3, r7
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006afc:	463b      	mov	r3, r7
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b06:	1ad2      	subs	r2, r2, r3
 8006b08:	463b      	mov	r3, r7
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	619a      	str	r2, [r3, #24]
 8006b0e:	e008      	b.n	8006b22 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006b1a:	463b      	mov	r3, r7
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b22:	1d3b      	adds	r3, r7, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b2a:	1d3b      	adds	r3, r7, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b40:	463b      	mov	r3, r7
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	011a      	lsls	r2, r3, #4
 8006b48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d116      	bne.n	8006b8c <USB_EPStartXfer+0xf2c>
 8006b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b70:	801a      	strh	r2, [r3, #0]
 8006b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b88:	801a      	strh	r2, [r3, #0]
 8006b8a:	e32c      	b.n	80071e6 <USB_EPStartXfer+0x1586>
 8006b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b90:	2b3e      	cmp	r3, #62	; 0x3e
 8006b92:	d818      	bhi.n	8006bc6 <USB_EPStartXfer+0xf66>
 8006b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b98:	085b      	lsrs	r3, r3, #1
 8006b9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <USB_EPStartXfer+0xf54>
 8006baa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bae:	3301      	adds	r3, #1
 8006bb0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	029b      	lsls	r3, r3, #10
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	e30f      	b.n	80071e6 <USB_EPStartXfer+0x1586>
 8006bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <USB_EPStartXfer+0xf86>
 8006bdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006be0:	3b01      	subs	r3, #1
 8006be2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006be6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	029b      	lsls	r3, r3, #10
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bfe:	801a      	strh	r2, [r3, #0]
 8006c00:	e2f1      	b.n	80071e6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c02:	463b      	mov	r3, r7
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	78db      	ldrb	r3, [r3, #3]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	f040 818f 	bne.w	8006f2c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c0e:	463b      	mov	r3, r7
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d175      	bne.n	8006d04 <USB_EPStartXfer+0x10a4>
 8006c18:	1d3b      	adds	r3, r7, #4
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c20:	1d3b      	adds	r3, r7, #4
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c30:	4413      	add	r3, r2
 8006c32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c36:	463b      	mov	r3, r7
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	011a      	lsls	r2, r3, #4
 8006c3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c42:	4413      	add	r3, r2
 8006c44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c4c:	463b      	mov	r3, r7
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d116      	bne.n	8006c84 <USB_EPStartXfer+0x1024>
 8006c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	e065      	b.n	8006d50 <USB_EPStartXfer+0x10f0>
 8006c84:	463b      	mov	r3, r7
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c8c:	d81a      	bhi.n	8006cc4 <USB_EPStartXfer+0x1064>
 8006c8e:	463b      	mov	r3, r7
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	085b      	lsrs	r3, r3, #1
 8006c96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <USB_EPStartXfer+0x1052>
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cac:	3301      	adds	r3, #1
 8006cae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	029b      	lsls	r3, r3, #10
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	e045      	b.n	8006d50 <USB_EPStartXfer+0x10f0>
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 031f 	and.w	r3, r3, #31
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d104      	bne.n	8006ce8 <USB_EPStartXfer+0x1088>
 8006cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	029b      	lsls	r3, r3, #10
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e025      	b.n	8006d50 <USB_EPStartXfer+0x10f0>
 8006d04:	463b      	mov	r3, r7
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	785b      	ldrb	r3, [r3, #1]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d120      	bne.n	8006d50 <USB_EPStartXfer+0x10f0>
 8006d0e:	1d3b      	adds	r3, r7, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d16:	1d3b      	adds	r3, r7, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d26:	4413      	add	r3, r2
 8006d28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d2c:	463b      	mov	r3, r7
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	011a      	lsls	r2, r3, #4
 8006d34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d38:	4413      	add	r3, r2
 8006d3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d42:	463b      	mov	r3, r7
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d4e:	801a      	strh	r2, [r3, #0]
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	785b      	ldrb	r3, [r3, #1]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d175      	bne.n	8006e4e <USB_EPStartXfer+0x11ee>
 8006d62:	1d3b      	adds	r3, r7, #4
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d6a:	1d3b      	adds	r3, r7, #4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d80:	463b      	mov	r3, r7
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	011a      	lsls	r2, r3, #4
 8006d88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d96:	463b      	mov	r3, r7
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d116      	bne.n	8006dce <USB_EPStartXfer+0x116e>
 8006da0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006db2:	801a      	strh	r2, [r3, #0]
 8006db4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dca:	801a      	strh	r2, [r3, #0]
 8006dcc:	e061      	b.n	8006e92 <USB_EPStartXfer+0x1232>
 8006dce:	463b      	mov	r3, r7
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b3e      	cmp	r3, #62	; 0x3e
 8006dd6:	d81a      	bhi.n	8006e0e <USB_EPStartXfer+0x11ae>
 8006dd8:	463b      	mov	r3, r7
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006de4:	463b      	mov	r3, r7
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d004      	beq.n	8006dfc <USB_EPStartXfer+0x119c>
 8006df2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006df6:	3301      	adds	r3, #1
 8006df8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006dfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	029b      	lsls	r3, r3, #10
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	e041      	b.n	8006e92 <USB_EPStartXfer+0x1232>
 8006e0e:	463b      	mov	r3, r7
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	095b      	lsrs	r3, r3, #5
 8006e16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <USB_EPStartXfer+0x11d2>
 8006e28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	029b      	lsls	r3, r3, #10
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e4a:	801a      	strh	r2, [r3, #0]
 8006e4c:	e021      	b.n	8006e92 <USB_EPStartXfer+0x1232>
 8006e4e:	463b      	mov	r3, r7
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d11c      	bne.n	8006e92 <USB_EPStartXfer+0x1232>
 8006e58:	1d3b      	adds	r3, r7, #4
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e68:	4413      	add	r3, r2
 8006e6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e6e:	463b      	mov	r3, r7
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	011a      	lsls	r2, r3, #4
 8006e76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e84:	463b      	mov	r3, r7
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e90:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006e92:	463b      	mov	r3, r7
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 81a4 	beq.w	80071e6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e9e:	1d3b      	adds	r3, r7, #4
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006eb2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <USB_EPStartXfer+0x126a>
 8006ebe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10d      	bne.n	8006ee6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006eca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f040 8187 	bne.w	80071e6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ed8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f040 8180 	bne.w	80071e6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	463b      	mov	r3, r7
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f00:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006f04:	1d3b      	adds	r3, r7, #4
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	463b      	mov	r3, r7
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	441a      	add	r2, r3
 8006f12:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	8013      	strh	r3, [r2, #0]
 8006f2a:	e15c      	b.n	80071e6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	78db      	ldrb	r3, [r3, #3]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	f040 8155 	bne.w	80071e2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006f38:	463b      	mov	r3, r7
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699a      	ldr	r2, [r3, #24]
 8006f3e:	463b      	mov	r3, r7
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d90e      	bls.n	8006f66 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006f48:	463b      	mov	r3, r7
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006f52:	463b      	mov	r3, r7
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	699a      	ldr	r2, [r3, #24]
 8006f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5c:	1ad2      	subs	r2, r2, r3
 8006f5e:	463b      	mov	r3, r7
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	619a      	str	r2, [r3, #24]
 8006f64:	e008      	b.n	8006f78 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006f66:	463b      	mov	r3, r7
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006f70:	463b      	mov	r3, r7
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2200      	movs	r2, #0
 8006f76:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f78:	463b      	mov	r3, r7
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d16f      	bne.n	8007062 <USB_EPStartXfer+0x1402>
 8006f82:	1d3b      	adds	r3, r7, #4
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f8a:	1d3b      	adds	r3, r7, #4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	011a      	lsls	r2, r3, #4
 8006fa8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fac:	4413      	add	r3, r2
 8006fae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d116      	bne.n	8006fec <USB_EPStartXfer+0x138c>
 8006fbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fd0:	801a      	strh	r2, [r3, #0]
 8006fd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	e05f      	b.n	80070ac <USB_EPStartXfer+0x144c>
 8006fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ff2:	d818      	bhi.n	8007026 <USB_EPStartXfer+0x13c6>
 8006ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff8:	085b      	lsrs	r3, r3, #1
 8006ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <USB_EPStartXfer+0x13b4>
 800700a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800700e:	3301      	adds	r3, #1
 8007010:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007018:	b29b      	uxth	r3, r3
 800701a:	029b      	lsls	r3, r3, #10
 800701c:	b29a      	uxth	r2, r3
 800701e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	e042      	b.n	80070ac <USB_EPStartXfer+0x144c>
 8007026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	2b00      	cmp	r3, #0
 800703a:	d104      	bne.n	8007046 <USB_EPStartXfer+0x13e6>
 800703c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007040:	3b01      	subs	r3, #1
 8007042:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800704a:	b29b      	uxth	r3, r3
 800704c:	029b      	lsls	r3, r3, #10
 800704e:	b29b      	uxth	r3, r3
 8007050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	e024      	b.n	80070ac <USB_EPStartXfer+0x144c>
 8007062:	463b      	mov	r3, r7
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d11f      	bne.n	80070ac <USB_EPStartXfer+0x144c>
 800706c:	1d3b      	adds	r3, r7, #4
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007074:	1d3b      	adds	r3, r7, #4
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707c:	b29b      	uxth	r3, r3
 800707e:	461a      	mov	r2, r3
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007084:	4413      	add	r3, r2
 8007086:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800708a:	463b      	mov	r3, r7
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	011a      	lsls	r2, r3, #4
 8007092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007096:	4413      	add	r3, r2
 8007098:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800709c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070aa:	801a      	strh	r2, [r3, #0]
 80070ac:	1d3b      	adds	r3, r7, #4
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070b4:	463b      	mov	r3, r7
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	785b      	ldrb	r3, [r3, #1]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d16f      	bne.n	800719e <USB_EPStartXfer+0x153e>
 80070be:	1d3b      	adds	r3, r7, #4
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070c6:	1d3b      	adds	r3, r7, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d6:	4413      	add	r3, r2
 80070d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070dc:	463b      	mov	r3, r7
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	011a      	lsls	r2, r3, #4
 80070e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e8:	4413      	add	r3, r2
 80070ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d116      	bne.n	8007128 <USB_EPStartXfer+0x14c8>
 80070fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007106:	b29a      	uxth	r2, r3
 8007108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800710c:	801a      	strh	r2, [r3, #0]
 800710e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800711e:	b29a      	uxth	r2, r3
 8007120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007124:	801a      	strh	r2, [r3, #0]
 8007126:	e05e      	b.n	80071e6 <USB_EPStartXfer+0x1586>
 8007128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800712c:	2b3e      	cmp	r3, #62	; 0x3e
 800712e:	d818      	bhi.n	8007162 <USB_EPStartXfer+0x1502>
 8007130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007134:	085b      	lsrs	r3, r3, #1
 8007136:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800713a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d004      	beq.n	8007150 <USB_EPStartXfer+0x14f0>
 8007146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800714a:	3301      	adds	r3, #1
 800714c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007150:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007154:	b29b      	uxth	r3, r3
 8007156:	029b      	lsls	r3, r3, #10
 8007158:	b29a      	uxth	r2, r3
 800715a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800715e:	801a      	strh	r2, [r3, #0]
 8007160:	e041      	b.n	80071e6 <USB_EPStartXfer+0x1586>
 8007162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007166:	095b      	lsrs	r3, r3, #5
 8007168:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800716c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	2b00      	cmp	r3, #0
 8007176:	d104      	bne.n	8007182 <USB_EPStartXfer+0x1522>
 8007178:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800717c:	3b01      	subs	r3, #1
 800717e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007186:	b29b      	uxth	r3, r3
 8007188:	029b      	lsls	r3, r3, #10
 800718a:	b29b      	uxth	r3, r3
 800718c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007194:	b29a      	uxth	r2, r3
 8007196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	e023      	b.n	80071e6 <USB_EPStartXfer+0x1586>
 800719e:	463b      	mov	r3, r7
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	785b      	ldrb	r3, [r3, #1]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d11e      	bne.n	80071e6 <USB_EPStartXfer+0x1586>
 80071a8:	1d3b      	adds	r3, r7, #4
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b8:	4413      	add	r3, r2
 80071ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071be:	463b      	mov	r3, r7
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	011a      	lsls	r2, r3, #4
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	4413      	add	r3, r2
 80071cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d8:	b29a      	uxth	r2, r3
 80071da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071de:	801a      	strh	r2, [r3, #0]
 80071e0:	e001      	b.n	80071e6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e02e      	b.n	8007244 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071e6:	1d3b      	adds	r3, r7, #4
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	463b      	mov	r3, r7
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007200:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007204:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007208:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800720c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007210:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007214:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007218:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800721c:	1d3b      	adds	r3, r7, #4
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	463b      	mov	r3, r7
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	441a      	add	r2, r3
 800722a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800722e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800723a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723e:	b29b      	uxth	r3, r3
 8007240:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d020      	beq.n	80072a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007276:	81bb      	strh	r3, [r7, #12]
 8007278:	89bb      	ldrh	r3, [r7, #12]
 800727a:	f083 0310 	eor.w	r3, r3, #16
 800727e:	81bb      	strh	r3, [r7, #12]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	441a      	add	r2, r3
 800728a:	89bb      	ldrh	r3, [r7, #12]
 800728c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800729c:	b29b      	uxth	r3, r3
 800729e:	8013      	strh	r3, [r2, #0]
 80072a0:	e01f      	b.n	80072e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b8:	81fb      	strh	r3, [r7, #14]
 80072ba:	89fb      	ldrh	r3, [r7, #14]
 80072bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072c0:	81fb      	strh	r3, [r7, #14]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	441a      	add	r2, r3
 80072cc:	89fb      	ldrh	r3, [r7, #14]
 80072ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072de:	b29b      	uxth	r3, r3
 80072e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bc80      	pop	{r7}
 80072ec:	4770      	bx	lr

080072ee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b087      	sub	sp, #28
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	7b1b      	ldrb	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f040 809d 	bne.w	800743c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d04c      	beq.n	80073a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	823b      	strh	r3, [r7, #16]
 8007318:	8a3b      	ldrh	r3, [r7, #16]
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01b      	beq.n	800735a <USB_EPClearStall+0x6c>
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	b29b      	uxth	r3, r3
 8007330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007338:	81fb      	strh	r3, [r7, #14]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	441a      	add	r2, r3
 8007344:	89fb      	ldrh	r3, [r7, #14]
 8007346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800734a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800734e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007352:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007356:	b29b      	uxth	r3, r3
 8007358:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	78db      	ldrb	r3, [r3, #3]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d06c      	beq.n	800743c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007378:	81bb      	strh	r3, [r7, #12]
 800737a:	89bb      	ldrh	r3, [r7, #12]
 800737c:	f083 0320 	eor.w	r3, r3, #32
 8007380:	81bb      	strh	r3, [r7, #12]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	441a      	add	r2, r3
 800738c:	89bb      	ldrh	r3, [r7, #12]
 800738e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800739a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800739e:	b29b      	uxth	r3, r3
 80073a0:	8013      	strh	r3, [r2, #0]
 80073a2:	e04b      	b.n	800743c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	82fb      	strh	r3, [r7, #22]
 80073b2:	8afb      	ldrh	r3, [r7, #22]
 80073b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01b      	beq.n	80073f4 <USB_EPClearStall+0x106>
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d2:	82bb      	strh	r3, [r7, #20]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	441a      	add	r2, r3
 80073de:	8abb      	ldrh	r3, [r7, #20]
 80073e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740a:	827b      	strh	r3, [r7, #18]
 800740c:	8a7b      	ldrh	r3, [r7, #18]
 800740e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007412:	827b      	strh	r3, [r7, #18]
 8007414:	8a7b      	ldrh	r3, [r7, #18]
 8007416:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800741a:	827b      	strh	r3, [r7, #18]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	441a      	add	r2, r3
 8007426:	8a7b      	ldrh	r3, [r7, #18]
 8007428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800742c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007438:	b29b      	uxth	r3, r3
 800743a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr

08007448 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007454:	78fb      	ldrb	r3, [r7, #3]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d103      	bne.n	8007462 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2280      	movs	r2, #128	; 0x80
 800745e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr

0800746e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr

08007482 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	bc80      	pop	{r7}
 8007494:	4770      	bx	lr

08007496 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007496:	b480      	push	{r7}
 8007498:	b085      	sub	sp, #20
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80074a8:	68fb      	ldr	r3, [r7, #12]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bc80      	pop	{r7}
 80074b2:	4770      	bx	lr

080074b4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr

080074ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b08d      	sub	sp, #52	; 0x34
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	4611      	mov	r1, r2
 80074d6:	461a      	mov	r2, r3
 80074d8:	460b      	mov	r3, r1
 80074da:	80fb      	strh	r3, [r7, #6]
 80074dc:	4613      	mov	r3, r2
 80074de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80074e0:	88bb      	ldrh	r3, [r7, #4]
 80074e2:	3301      	adds	r3, #1
 80074e4:	085b      	lsrs	r3, r3, #1
 80074e6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074f0:	88fb      	ldrh	r3, [r7, #6]
 80074f2:	005a      	lsls	r2, r3, #1
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074fc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007502:	e01e      	b.n	8007542 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	3301      	adds	r3, #1
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	b29b      	uxth	r3, r3
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	b29b      	uxth	r3, r3
 800751a:	461a      	mov	r2, r3
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	b29a      	uxth	r2, r3
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	3302      	adds	r3, #2
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	3302      	adds	r3, #2
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	3301      	adds	r3, #1
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	3b01      	subs	r3, #1
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1dd      	bne.n	8007504 <USB_WritePMA+0x3a>
  }
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	3734      	adds	r7, #52	; 0x34
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr

08007554 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007554:	b480      	push	{r7}
 8007556:	b08b      	sub	sp, #44	; 0x2c
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	4611      	mov	r1, r2
 8007560:	461a      	mov	r2, r3
 8007562:	460b      	mov	r3, r1
 8007564:	80fb      	strh	r3, [r7, #6]
 8007566:	4613      	mov	r3, r2
 8007568:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800756a:	88bb      	ldrh	r3, [r7, #4]
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	b29b      	uxth	r3, r3
 8007570:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	005a      	lsls	r2, r3, #1
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007586:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
 800758c:	e01b      	b.n	80075c6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	3302      	adds	r3, #2
 800759a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	3301      	adds	r3, #1
 80075a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	0a1b      	lsrs	r3, r3, #8
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	3301      	adds	r3, #1
 80075b8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	3302      	adds	r3, #2
 80075be:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	3b01      	subs	r3, #1
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1e0      	bne.n	800758e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80075cc:	88bb      	ldrh	r3, [r7, #4]
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d007      	beq.n	80075e8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	701a      	strb	r2, [r3, #0]
  }
}
 80075e8:	bf00      	nop
 80075ea:	372c      	adds	r7, #44	; 0x2c
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr

080075f2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	460b      	mov	r3, r1
 80075fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	7c1b      	ldrb	r3, [r3, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d115      	bne.n	8007636 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800760a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800760e:	2202      	movs	r2, #2
 8007610:	2181      	movs	r1, #129	; 0x81
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 fe9b 	bl	800934e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800761e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007622:	2202      	movs	r2, #2
 8007624:	2101      	movs	r1, #1
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fe91 	bl	800934e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007634:	e012      	b.n	800765c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007636:	2340      	movs	r3, #64	; 0x40
 8007638:	2202      	movs	r2, #2
 800763a:	2181      	movs	r1, #129	; 0x81
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 fe86 	bl	800934e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007648:	2340      	movs	r3, #64	; 0x40
 800764a:	2202      	movs	r2, #2
 800764c:	2101      	movs	r1, #1
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 fe7d 	bl	800934e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800765c:	2308      	movs	r3, #8
 800765e:	2203      	movs	r2, #3
 8007660:	2182      	movs	r1, #130	; 0x82
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fe73 	bl	800934e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800766e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007672:	f001 ff93 	bl	800959c <USBD_static_malloc>
 8007676:	4602      	mov	r2, r0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007684:	2b00      	cmp	r3, #0
 8007686:	d102      	bne.n	800768e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007688:	2301      	movs	r3, #1
 800768a:	73fb      	strb	r3, [r7, #15]
 800768c:	e026      	b.n	80076dc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	7c1b      	ldrb	r3, [r3, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d109      	bne.n	80076cc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076c2:	2101      	movs	r1, #1
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 ff33 	bl	8009530 <USBD_LL_PrepareReceive>
 80076ca:	e007      	b.n	80076dc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076d2:	2340      	movs	r3, #64	; 0x40
 80076d4:	2101      	movs	r1, #1
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 ff2a 	bl	8009530 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80076f6:	2181      	movs	r1, #129	; 0x81
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fe4e 	bl	800939a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007704:	2101      	movs	r1, #1
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 fe47 	bl	800939a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007714:	2182      	movs	r1, #130	; 0x82
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 fe3f 	bl	800939a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00e      	beq.n	800774a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773c:	4618      	mov	r0, r3
 800773e:	f001 ff39 	bl	80095b4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800774a:	7bfb      	ldrb	r3, [r7, #15]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007764:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800777a:	2b00      	cmp	r3, #0
 800777c:	d039      	beq.n	80077f2 <USBD_CDC_Setup+0x9e>
 800777e:	2b20      	cmp	r3, #32
 8007780:	d17f      	bne.n	8007882 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	88db      	ldrh	r3, [r3, #6]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d029      	beq.n	80077de <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	b25b      	sxtb	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	da11      	bge.n	80077b8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80077a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	88d2      	ldrh	r2, [r2, #6]
 80077a6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077a8:	6939      	ldr	r1, [r7, #16]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	88db      	ldrh	r3, [r3, #6]
 80077ae:	461a      	mov	r2, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 f9da 	bl	8008b6a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80077b6:	e06b      	b.n	8007890 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	785a      	ldrb	r2, [r3, #1]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	88db      	ldrh	r3, [r3, #6]
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077ce:	6939      	ldr	r1, [r7, #16]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	88db      	ldrh	r3, [r3, #6]
 80077d4:	461a      	mov	r2, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 f9f5 	bl	8008bc6 <USBD_CtlPrepareRx>
      break;
 80077dc:	e058      	b.n	8007890 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	7850      	ldrb	r0, [r2, #1]
 80077ea:	2200      	movs	r2, #0
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	4798      	blx	r3
      break;
 80077f0:	e04e      	b.n	8007890 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	2b0b      	cmp	r3, #11
 80077f8:	d02e      	beq.n	8007858 <USBD_CDC_Setup+0x104>
 80077fa:	2b0b      	cmp	r3, #11
 80077fc:	dc38      	bgt.n	8007870 <USBD_CDC_Setup+0x11c>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <USBD_CDC_Setup+0xb4>
 8007802:	2b0a      	cmp	r3, #10
 8007804:	d014      	beq.n	8007830 <USBD_CDC_Setup+0xdc>
 8007806:	e033      	b.n	8007870 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780e:	2b03      	cmp	r3, #3
 8007810:	d107      	bne.n	8007822 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007812:	f107 030c 	add.w	r3, r7, #12
 8007816:	2202      	movs	r2, #2
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 f9a5 	bl	8008b6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007820:	e02e      	b.n	8007880 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 f936 	bl	8008a96 <USBD_CtlError>
            ret = USBD_FAIL;
 800782a:	2302      	movs	r3, #2
 800782c:	75fb      	strb	r3, [r7, #23]
          break;
 800782e:	e027      	b.n	8007880 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007836:	2b03      	cmp	r3, #3
 8007838:	d107      	bne.n	800784a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800783a:	f107 030f 	add.w	r3, r7, #15
 800783e:	2201      	movs	r2, #1
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 f991 	bl	8008b6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007848:	e01a      	b.n	8007880 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f922 	bl	8008a96 <USBD_CtlError>
            ret = USBD_FAIL;
 8007852:	2302      	movs	r3, #2
 8007854:	75fb      	strb	r3, [r7, #23]
          break;
 8007856:	e013      	b.n	8007880 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785e:	2b03      	cmp	r3, #3
 8007860:	d00d      	beq.n	800787e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 f916 	bl	8008a96 <USBD_CtlError>
            ret = USBD_FAIL;
 800786a:	2302      	movs	r3, #2
 800786c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800786e:	e006      	b.n	800787e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 f90f 	bl	8008a96 <USBD_CtlError>
          ret = USBD_FAIL;
 8007878:	2302      	movs	r3, #2
 800787a:	75fb      	strb	r3, [r7, #23]
          break;
 800787c:	e000      	b.n	8007880 <USBD_CDC_Setup+0x12c>
          break;
 800787e:	bf00      	nop
      }
      break;
 8007880:	e006      	b.n	8007890 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 f906 	bl	8008a96 <USBD_CtlError>
      ret = USBD_FAIL;
 800788a:	2302      	movs	r3, #2
 800788c:	75fb      	strb	r3, [r7, #23]
      break;
 800788e:	bf00      	nop
  }

  return ret;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	460b      	mov	r3, r1
 80078a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ac:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078b4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d03a      	beq.n	8007936 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80078c0:	78fa      	ldrb	r2, [r7, #3]
 80078c2:	6879      	ldr	r1, [r7, #4]
 80078c4:	4613      	mov	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	440b      	add	r3, r1
 80078ce:	331c      	adds	r3, #28
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d029      	beq.n	800792a <USBD_CDC_DataIn+0x90>
 80078d6:	78fa      	ldrb	r2, [r7, #3]
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	440b      	add	r3, r1
 80078e4:	331c      	adds	r3, #28
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	78f9      	ldrb	r1, [r7, #3]
 80078ea:	68b8      	ldr	r0, [r7, #8]
 80078ec:	460b      	mov	r3, r1
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	440b      	add	r3, r1
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	4403      	add	r3, r0
 80078f6:	3338      	adds	r3, #56	; 0x38
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	fbb2 f1f3 	udiv	r1, r2, r3
 80078fe:	fb03 f301 	mul.w	r3, r3, r1
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d110      	bne.n	800792a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	4613      	mov	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	440b      	add	r3, r1
 8007916:	331c      	adds	r3, #28
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800791c:	78f9      	ldrb	r1, [r7, #3]
 800791e:	2300      	movs	r3, #0
 8007920:	2200      	movs	r2, #0
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f001 fde1 	bl	80094ea <USBD_LL_Transmit>
 8007928:	e003      	b.n	8007932 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	e000      	b.n	8007938 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007936:	2302      	movs	r3, #2
  }
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007952:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f001 fe0c 	bl	8009576 <USBD_LL_GetRxDataSize>
 800795e:	4602      	mov	r2, r0
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00d      	beq.n	800798c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007984:	4611      	mov	r1, r2
 8007986:	4798      	blx	r3

    return USBD_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	e000      	b.n	800798e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800798c:	2302      	movs	r3, #2
  }
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d015      	beq.n	80079dc <USBD_CDC_EP0_RxReady+0x46>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079b6:	2bff      	cmp	r3, #255	; 0xff
 80079b8:	d010      	beq.n	80079dc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80079c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079d0:	b292      	uxth	r2, r2
 80079d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	22ff      	movs	r2, #255	; 0xff
 80079d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2243      	movs	r2, #67	; 0x43
 80079f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80079f6:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bc80      	pop	{r7}
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000094 	.word	0x20000094

08007a08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2243      	movs	r2, #67	; 0x43
 8007a14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a16:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20000050 	.word	0x20000050

08007a28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2243      	movs	r2, #67	; 0x43
 8007a34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a36:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bc80      	pop	{r7}
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	200000d8 	.word	0x200000d8

08007a48 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	220a      	movs	r2, #10
 8007a54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007a56:	4b03      	ldr	r3, [pc, #12]	; (8007a64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	2000000c 	.word	0x2000000c

08007a68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007a72:	2302      	movs	r3, #2
 8007a74:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr

08007a94 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ab2:	88fa      	ldrh	r2, [r7, #6]
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr

08007ac6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr

08007aec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d017      	beq.n	8007b36 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	7c1b      	ldrb	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b18:	2101      	movs	r1, #1
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 fd08 	bl	8009530 <USBD_LL_PrepareReceive>
 8007b20:	e007      	b.n	8007b32 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b28:	2340      	movs	r3, #64	; 0x40
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 fcff 	bl	8009530 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	e000      	b.n	8007b38 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007b36:	2302      	movs	r3, #2
  }
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b54:	2302      	movs	r3, #2
 8007b56:	e01a      	b.n	8007b8e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	79fa      	ldrb	r2, [r7, #7]
 8007b84:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f001 fb6c 	bl	8009264 <USBD_LL_Init>

  return USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b085      	sub	sp, #20
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d006      	beq.n	8007bb8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]
 8007bb6:	e001      	b.n	8007bbc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007bb8:	2302      	movs	r3, #2
 8007bba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr

08007bc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 fba1 	bl	8009318 <USBD_LL_Start>

  return USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr

08007bf4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c00:	2302      	movs	r3, #2
 8007c02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00c      	beq.n	8007c28 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	4611      	mov	r1, r2
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	4798      	blx	r3
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3

  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fed7 	bl	8008a1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c7e:	461a      	mov	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c8c:	f003 031f 	and.w	r3, r3, #31
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d016      	beq.n	8007cc2 <USBD_LL_SetupStage+0x6a>
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d81c      	bhi.n	8007cd2 <USBD_LL_SetupStage+0x7a>
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <USBD_LL_SetupStage+0x4a>
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d008      	beq.n	8007cb2 <USBD_LL_SetupStage+0x5a>
 8007ca0:	e017      	b.n	8007cd2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f9ca 	bl	8008044 <USBD_StdDevReq>
      break;
 8007cb0:	e01a      	b.n	8007ce8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa2c 	bl	8008118 <USBD_StdItfReq>
      break;
 8007cc0:	e012      	b.n	8007ce8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa6c 	bl	80081a8 <USBD_StdEPReq>
      break;
 8007cd0:	e00a      	b.n	8007ce8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007cd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 fb79 	bl	80093d8 <USBD_LL_StallEP>
      break;
 8007ce6:	bf00      	nop
  }

  return USBD_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b086      	sub	sp, #24
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	607a      	str	r2, [r7, #4]
 8007cfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d14b      	bne.n	8007d9e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d0c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d134      	bne.n	8007d82 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d919      	bls.n	8007d58 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	1ad2      	subs	r2, r2, r3
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d203      	bcs.n	8007d46 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	e002      	b.n	8007d4c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 ff56 	bl	8008c02 <USBD_CtlContinueRx>
 8007d56:	e038      	b.n	8007dca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d105      	bne.n	8007d7a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 ff53 	bl	8008c26 <USBD_CtlSendStatus>
 8007d80:	e023      	b.n	8007dca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d88:	2b05      	cmp	r3, #5
 8007d8a:	d11e      	bne.n	8007dca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007d94:	2100      	movs	r1, #0
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f001 fb1e 	bl	80093d8 <USBD_LL_StallEP>
 8007d9c:	e015      	b.n	8007dca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00d      	beq.n	8007dc6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d108      	bne.n	8007dc6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	7afa      	ldrb	r2, [r7, #11]
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	4798      	blx	r3
 8007dc4:	e001      	b.n	8007dca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e000      	b.n	8007dcc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007de2:	7afb      	ldrb	r3, [r7, #11]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d17f      	bne.n	8007ee8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3314      	adds	r3, #20
 8007dec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d15c      	bne.n	8007eb2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d915      	bls.n	8007e30 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	1ad2      	subs	r2, r2, r3
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6879      	ldr	r1, [r7, #4]
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 fec0 	bl	8008ba2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e22:	2300      	movs	r3, #0
 8007e24:	2200      	movs	r2, #0
 8007e26:	2100      	movs	r1, #0
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f001 fb81 	bl	8009530 <USBD_LL_PrepareReceive>
 8007e2e:	e04e      	b.n	8007ece <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	6912      	ldr	r2, [r2, #16]
 8007e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e3c:	fb02 f201 	mul.w	r2, r2, r1
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d11c      	bne.n	8007e80 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d316      	bcc.n	8007e80 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d20f      	bcs.n	8007e80 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e60:	2200      	movs	r2, #0
 8007e62:	2100      	movs	r1, #0
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 fe9c 	bl	8008ba2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e72:	2300      	movs	r3, #0
 8007e74:	2200      	movs	r2, #0
 8007e76:	2100      	movs	r1, #0
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f001 fb59 	bl	8009530 <USBD_LL_PrepareReceive>
 8007e7e:	e026      	b.n	8007ece <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d105      	bne.n	8007ea2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007ea2:	2180      	movs	r1, #128	; 0x80
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f001 fa97 	bl	80093d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 fece 	bl	8008c4c <USBD_CtlReceiveStatus>
 8007eb0:	e00d      	b.n	8007ece <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d004      	beq.n	8007ec6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d103      	bne.n	8007ece <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007ec6:	2180      	movs	r1, #128	; 0x80
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f001 fa85 	bl	80093d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d11d      	bne.n	8007f14 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f7ff fe81 	bl	8007be0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ee6:	e015      	b.n	8007f14 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00d      	beq.n	8007f10 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d108      	bne.n	8007f10 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	7afa      	ldrb	r2, [r7, #11]
 8007f08:	4611      	mov	r1, r2
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	4798      	blx	r3
 8007f0e:	e001      	b.n	8007f14 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f10:	2302      	movs	r3, #2
 8007f12:	e000      	b.n	8007f16 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f26:	2340      	movs	r3, #64	; 0x40
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 fa0e 	bl	800934e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2240      	movs	r2, #64	; 0x40
 8007f3e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f42:	2340      	movs	r3, #64	; 0x40
 8007f44:	2200      	movs	r2, #0
 8007f46:	2180      	movs	r1, #128	; 0x80
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 fa00 	bl	800934e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2240      	movs	r2, #64	; 0x40
 8007f58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d009      	beq.n	8007f96 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6852      	ldr	r2, [r2, #4]
 8007f8e:	b2d2      	uxtb	r2, r2
 8007f90:	4611      	mov	r1, r2
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
  }

  return USBD_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	78fa      	ldrb	r2, [r7, #3]
 8007fb0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc80      	pop	{r7}
 8007fbc:	4770      	bx	lr

08007fbe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc80      	pop	{r7}
 8007fe4:	4770      	bx	lr

08007fe6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d105      	bne.n	8008004 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	bc80      	pop	{r7}
 800800e:	4770      	bx	lr

08008010 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801e:	2b03      	cmp	r3, #3
 8008020:	d10b      	bne.n	800803a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800805a:	2b40      	cmp	r3, #64	; 0x40
 800805c:	d005      	beq.n	800806a <USBD_StdDevReq+0x26>
 800805e:	2b40      	cmp	r3, #64	; 0x40
 8008060:	d84f      	bhi.n	8008102 <USBD_StdDevReq+0xbe>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d009      	beq.n	800807a <USBD_StdDevReq+0x36>
 8008066:	2b20      	cmp	r3, #32
 8008068:	d14b      	bne.n	8008102 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
      break;
 8008078:	e048      	b.n	800810c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	2b09      	cmp	r3, #9
 8008080:	d839      	bhi.n	80080f6 <USBD_StdDevReq+0xb2>
 8008082:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <USBD_StdDevReq+0x44>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080d9 	.word	0x080080d9
 800808c:	080080ed 	.word	0x080080ed
 8008090:	080080f7 	.word	0x080080f7
 8008094:	080080e3 	.word	0x080080e3
 8008098:	080080f7 	.word	0x080080f7
 800809c:	080080bb 	.word	0x080080bb
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080f7 	.word	0x080080f7
 80080a8:	080080cf 	.word	0x080080cf
 80080ac:	080080c5 	.word	0x080080c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f9dc 	bl	8008470 <USBD_GetDescriptor>
          break;
 80080b8:	e022      	b.n	8008100 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fb3f 	bl	8008740 <USBD_SetAddress>
          break;
 80080c2:	e01d      	b.n	8008100 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fb7e 	bl	80087c8 <USBD_SetConfig>
          break;
 80080cc:	e018      	b.n	8008100 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fc07 	bl	80088e4 <USBD_GetConfig>
          break;
 80080d6:	e013      	b.n	8008100 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fc37 	bl	800894e <USBD_GetStatus>
          break;
 80080e0:	e00e      	b.n	8008100 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fc65 	bl	80089b4 <USBD_SetFeature>
          break;
 80080ea:	e009      	b.n	8008100 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fc74 	bl	80089dc <USBD_ClrFeature>
          break;
 80080f4:	e004      	b.n	8008100 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fccc 	bl	8008a96 <USBD_CtlError>
          break;
 80080fe:	bf00      	nop
      }
      break;
 8008100:	e004      	b.n	800810c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fcc6 	bl	8008a96 <USBD_CtlError>
      break;
 800810a:	bf00      	nop
  }

  return ret;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop

08008118 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800812e:	2b40      	cmp	r3, #64	; 0x40
 8008130:	d005      	beq.n	800813e <USBD_StdItfReq+0x26>
 8008132:	2b40      	cmp	r3, #64	; 0x40
 8008134:	d82e      	bhi.n	8008194 <USBD_StdItfReq+0x7c>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <USBD_StdItfReq+0x26>
 800813a:	2b20      	cmp	r3, #32
 800813c:	d12a      	bne.n	8008194 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008144:	3b01      	subs	r3, #1
 8008146:	2b02      	cmp	r3, #2
 8008148:	d81d      	bhi.n	8008186 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	889b      	ldrh	r3, [r3, #4]
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b01      	cmp	r3, #1
 8008152:	d813      	bhi.n	800817c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	4798      	blx	r3
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	88db      	ldrh	r3, [r3, #6]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d110      	bne.n	8008190 <USBD_StdItfReq+0x78>
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10d      	bne.n	8008190 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fd56 	bl	8008c26 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800817a:	e009      	b.n	8008190 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fc89 	bl	8008a96 <USBD_CtlError>
          break;
 8008184:	e004      	b.n	8008190 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fc84 	bl	8008a96 <USBD_CtlError>
          break;
 800818e:	e000      	b.n	8008192 <USBD_StdItfReq+0x7a>
          break;
 8008190:	bf00      	nop
      }
      break;
 8008192:	e004      	b.n	800819e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fc7d 	bl	8008a96 <USBD_CtlError>
      break;
 800819c:	bf00      	nop
  }

  return USBD_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	889b      	ldrh	r3, [r3, #4]
 80081ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081c4:	2b40      	cmp	r3, #64	; 0x40
 80081c6:	d007      	beq.n	80081d8 <USBD_StdEPReq+0x30>
 80081c8:	2b40      	cmp	r3, #64	; 0x40
 80081ca:	f200 8146 	bhi.w	800845a <USBD_StdEPReq+0x2b2>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <USBD_StdEPReq+0x40>
 80081d2:	2b20      	cmp	r3, #32
 80081d4:	f040 8141 	bne.w	800845a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	4798      	blx	r3
      break;
 80081e6:	e13d      	b.n	8008464 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	d10a      	bne.n	800820a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	4798      	blx	r3
 8008202:	4603      	mov	r3, r0
 8008204:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	e12d      	b.n	8008466 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	785b      	ldrb	r3, [r3, #1]
 800820e:	2b03      	cmp	r3, #3
 8008210:	d007      	beq.n	8008222 <USBD_StdEPReq+0x7a>
 8008212:	2b03      	cmp	r3, #3
 8008214:	f300 811b 	bgt.w	800844e <USBD_StdEPReq+0x2a6>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d072      	beq.n	8008302 <USBD_StdEPReq+0x15a>
 800821c:	2b01      	cmp	r3, #1
 800821e:	d03a      	beq.n	8008296 <USBD_StdEPReq+0xee>
 8008220:	e115      	b.n	800844e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008228:	2b02      	cmp	r3, #2
 800822a:	d002      	beq.n	8008232 <USBD_StdEPReq+0x8a>
 800822c:	2b03      	cmp	r3, #3
 800822e:	d015      	beq.n	800825c <USBD_StdEPReq+0xb4>
 8008230:	e02b      	b.n	800828a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00c      	beq.n	8008252 <USBD_StdEPReq+0xaa>
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	2b80      	cmp	r3, #128	; 0x80
 800823c:	d009      	beq.n	8008252 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 f8c8 	bl	80093d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008248:	2180      	movs	r1, #128	; 0x80
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 f8c4 	bl	80093d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008250:	e020      	b.n	8008294 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fc1e 	bl	8008a96 <USBD_CtlError>
              break;
 800825a:	e01b      	b.n	8008294 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	885b      	ldrh	r3, [r3, #2]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10e      	bne.n	8008282 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00b      	beq.n	8008282 <USBD_StdEPReq+0xda>
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d008      	beq.n	8008282 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	88db      	ldrh	r3, [r3, #6]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 f8ab 	bl	80093d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fccf 	bl	8008c26 <USBD_CtlSendStatus>

              break;
 8008288:	e004      	b.n	8008294 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fc02 	bl	8008a96 <USBD_CtlError>
              break;
 8008292:	bf00      	nop
          }
          break;
 8008294:	e0e0      	b.n	8008458 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829c:	2b02      	cmp	r3, #2
 800829e:	d002      	beq.n	80082a6 <USBD_StdEPReq+0xfe>
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d015      	beq.n	80082d0 <USBD_StdEPReq+0x128>
 80082a4:	e026      	b.n	80082f4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00c      	beq.n	80082c6 <USBD_StdEPReq+0x11e>
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	2b80      	cmp	r3, #128	; 0x80
 80082b0:	d009      	beq.n	80082c6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 f88e 	bl	80093d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082bc:	2180      	movs	r1, #128	; 0x80
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 f88a 	bl	80093d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082c4:	e01c      	b.n	8008300 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fbe4 	bl	8008a96 <USBD_CtlError>
              break;
 80082ce:	e017      	b.n	8008300 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	885b      	ldrh	r3, [r3, #2]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d112      	bne.n	80082fe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 f895 	bl	8009416 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fc9a 	bl	8008c26 <USBD_CtlSendStatus>
              }
              break;
 80082f2:	e004      	b.n	80082fe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fbcd 	bl	8008a96 <USBD_CtlError>
              break;
 80082fc:	e000      	b.n	8008300 <USBD_StdEPReq+0x158>
              break;
 80082fe:	bf00      	nop
          }
          break;
 8008300:	e0aa      	b.n	8008458 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008308:	2b02      	cmp	r3, #2
 800830a:	d002      	beq.n	8008312 <USBD_StdEPReq+0x16a>
 800830c:	2b03      	cmp	r3, #3
 800830e:	d032      	beq.n	8008376 <USBD_StdEPReq+0x1ce>
 8008310:	e097      	b.n	8008442 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d007      	beq.n	8008328 <USBD_StdEPReq+0x180>
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	2b80      	cmp	r3, #128	; 0x80
 800831c:	d004      	beq.n	8008328 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fbb8 	bl	8008a96 <USBD_CtlError>
                break;
 8008326:	e091      	b.n	800844c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800832c:	2b00      	cmp	r3, #0
 800832e:	da0b      	bge.n	8008348 <USBD_StdEPReq+0x1a0>
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	3310      	adds	r3, #16
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	4413      	add	r3, r2
 8008344:	3304      	adds	r3, #4
 8008346:	e00b      	b.n	8008360 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	4413      	add	r3, r2
 800835e:	3304      	adds	r3, #4
 8008360:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2202      	movs	r2, #2
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fbfb 	bl	8008b6a <USBD_CtlSendData>
              break;
 8008374:	e06a      	b.n	800844c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800837a:	2b00      	cmp	r3, #0
 800837c:	da11      	bge.n	80083a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	f003 020f 	and.w	r2, r3, #15
 8008384:	6879      	ldr	r1, [r7, #4]
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	440b      	add	r3, r1
 8008390:	3318      	adds	r3, #24
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d117      	bne.n	80083c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fb7b 	bl	8008a96 <USBD_CtlError>
                  break;
 80083a0:	e054      	b.n	800844c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	f003 020f 	and.w	r2, r3, #15
 80083a8:	6879      	ldr	r1, [r7, #4]
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	440b      	add	r3, r1
 80083b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d104      	bne.n	80083c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fb68 	bl	8008a96 <USBD_CtlError>
                  break;
 80083c6:	e041      	b.n	800844c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	da0b      	bge.n	80083e8 <USBD_StdEPReq+0x240>
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	3310      	adds	r3, #16
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	4413      	add	r3, r2
 80083e4:	3304      	adds	r3, #4
 80083e6:	e00b      	b.n	8008400 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	4413      	add	r3, r2
 80083fe:	3304      	adds	r3, #4
 8008400:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <USBD_StdEPReq+0x266>
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2b80      	cmp	r3, #128	; 0x80
 800840c:	d103      	bne.n	8008416 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	e00e      	b.n	8008434 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 f81a 	bl	8009454 <USBD_LL_IsStallEP>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2201      	movs	r2, #1
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	e002      	b.n	8008434 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2202      	movs	r2, #2
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fb95 	bl	8008b6a <USBD_CtlSendData>
              break;
 8008440:	e004      	b.n	800844c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fb26 	bl	8008a96 <USBD_CtlError>
              break;
 800844a:	bf00      	nop
          }
          break;
 800844c:	e004      	b.n	8008458 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fb20 	bl	8008a96 <USBD_CtlError>
          break;
 8008456:	bf00      	nop
      }
      break;
 8008458:	e004      	b.n	8008464 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fb1a 	bl	8008a96 <USBD_CtlError>
      break;
 8008462:	bf00      	nop
  }

  return ret;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800847a:	2300      	movs	r3, #0
 800847c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	885b      	ldrh	r3, [r3, #2]
 800848a:	0a1b      	lsrs	r3, r3, #8
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	2b06      	cmp	r3, #6
 8008492:	f200 8128 	bhi.w	80086e6 <USBD_GetDescriptor+0x276>
 8008496:	a201      	add	r2, pc, #4	; (adr r2, 800849c <USBD_GetDescriptor+0x2c>)
 8008498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849c:	080084b9 	.word	0x080084b9
 80084a0:	080084d1 	.word	0x080084d1
 80084a4:	08008511 	.word	0x08008511
 80084a8:	080086e7 	.word	0x080086e7
 80084ac:	080086e7 	.word	0x080086e7
 80084b0:	08008687 	.word	0x08008687
 80084b4:	080086b3 	.word	0x080086b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	7c12      	ldrb	r2, [r2, #16]
 80084c4:	f107 0108 	add.w	r1, r7, #8
 80084c8:	4610      	mov	r0, r2
 80084ca:	4798      	blx	r3
 80084cc:	60f8      	str	r0, [r7, #12]
      break;
 80084ce:	e112      	b.n	80086f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	7c1b      	ldrb	r3, [r3, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10d      	bne.n	80084f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e0:	f107 0208 	add.w	r2, r7, #8
 80084e4:	4610      	mov	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3301      	adds	r3, #1
 80084ee:	2202      	movs	r2, #2
 80084f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084f2:	e100      	b.n	80086f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	f107 0208 	add.w	r2, r7, #8
 8008500:	4610      	mov	r0, r2
 8008502:	4798      	blx	r3
 8008504:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3301      	adds	r3, #1
 800850a:	2202      	movs	r2, #2
 800850c:	701a      	strb	r2, [r3, #0]
      break;
 800850e:	e0f2      	b.n	80086f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	885b      	ldrh	r3, [r3, #2]
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b05      	cmp	r3, #5
 8008518:	f200 80ac 	bhi.w	8008674 <USBD_GetDescriptor+0x204>
 800851c:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <USBD_GetDescriptor+0xb4>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	0800853d 	.word	0x0800853d
 8008528:	08008571 	.word	0x08008571
 800852c:	080085a5 	.word	0x080085a5
 8008530:	080085d9 	.word	0x080085d9
 8008534:	0800860d 	.word	0x0800860d
 8008538:	08008641 	.word	0x08008641
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	7c12      	ldrb	r2, [r2, #16]
 8008554:	f107 0108 	add.w	r1, r7, #8
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800855e:	e091      	b.n	8008684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa97 	bl	8008a96 <USBD_CtlError>
            err++;
 8008568:	7afb      	ldrb	r3, [r7, #11]
 800856a:	3301      	adds	r3, #1
 800856c:	72fb      	strb	r3, [r7, #11]
          break;
 800856e:	e089      	b.n	8008684 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	7c12      	ldrb	r2, [r2, #16]
 8008588:	f107 0108 	add.w	r1, r7, #8
 800858c:	4610      	mov	r0, r2
 800858e:	4798      	blx	r3
 8008590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008592:	e077      	b.n	8008684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa7d 	bl	8008a96 <USBD_CtlError>
            err++;
 800859c:	7afb      	ldrb	r3, [r7, #11]
 800859e:	3301      	adds	r3, #1
 80085a0:	72fb      	strb	r3, [r7, #11]
          break;
 80085a2:	e06f      	b.n	8008684 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	7c12      	ldrb	r2, [r2, #16]
 80085bc:	f107 0108 	add.w	r1, r7, #8
 80085c0:	4610      	mov	r0, r2
 80085c2:	4798      	blx	r3
 80085c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085c6:	e05d      	b.n	8008684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa63 	bl	8008a96 <USBD_CtlError>
            err++;
 80085d0:	7afb      	ldrb	r3, [r7, #11]
 80085d2:	3301      	adds	r3, #1
 80085d4:	72fb      	strb	r3, [r7, #11]
          break;
 80085d6:	e055      	b.n	8008684 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	7c12      	ldrb	r2, [r2, #16]
 80085f0:	f107 0108 	add.w	r1, r7, #8
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3
 80085f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fa:	e043      	b.n	8008684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fa49 	bl	8008a96 <USBD_CtlError>
            err++;
 8008604:	7afb      	ldrb	r3, [r7, #11]
 8008606:	3301      	adds	r3, #1
 8008608:	72fb      	strb	r3, [r7, #11]
          break;
 800860a:	e03b      	b.n	8008684 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	7c12      	ldrb	r2, [r2, #16]
 8008624:	f107 0108 	add.w	r1, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800862e:	e029      	b.n	8008684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fa2f 	bl	8008a96 <USBD_CtlError>
            err++;
 8008638:	7afb      	ldrb	r3, [r7, #11]
 800863a:	3301      	adds	r3, #1
 800863c:	72fb      	strb	r3, [r7, #11]
          break;
 800863e:	e021      	b.n	8008684 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	7c12      	ldrb	r2, [r2, #16]
 8008658:	f107 0108 	add.w	r1, r7, #8
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3
 8008660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008662:	e00f      	b.n	8008684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa15 	bl	8008a96 <USBD_CtlError>
            err++;
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	3301      	adds	r3, #1
 8008670:	72fb      	strb	r3, [r7, #11]
          break;
 8008672:	e007      	b.n	8008684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa0d 	bl	8008a96 <USBD_CtlError>
          err++;
 800867c:	7afb      	ldrb	r3, [r7, #11]
 800867e:	3301      	adds	r3, #1
 8008680:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008682:	e038      	b.n	80086f6 <USBD_GetDescriptor+0x286>
 8008684:	e037      	b.n	80086f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	7c1b      	ldrb	r3, [r3, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d109      	bne.n	80086a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008696:	f107 0208 	add.w	r2, r7, #8
 800869a:	4610      	mov	r0, r2
 800869c:	4798      	blx	r3
 800869e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086a0:	e029      	b.n	80086f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f9f6 	bl	8008a96 <USBD_CtlError>
        err++;
 80086aa:	7afb      	ldrb	r3, [r7, #11]
 80086ac:	3301      	adds	r3, #1
 80086ae:	72fb      	strb	r3, [r7, #11]
      break;
 80086b0:	e021      	b.n	80086f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	7c1b      	ldrb	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10d      	bne.n	80086d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c2:	f107 0208 	add.w	r2, r7, #8
 80086c6:	4610      	mov	r0, r2
 80086c8:	4798      	blx	r3
 80086ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3301      	adds	r3, #1
 80086d0:	2207      	movs	r2, #7
 80086d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086d4:	e00f      	b.n	80086f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f9dc 	bl	8008a96 <USBD_CtlError>
        err++;
 80086de:	7afb      	ldrb	r3, [r7, #11]
 80086e0:	3301      	adds	r3, #1
 80086e2:	72fb      	strb	r3, [r7, #11]
      break;
 80086e4:	e007      	b.n	80086f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f9d4 	bl	8008a96 <USBD_CtlError>
      err++;
 80086ee:	7afb      	ldrb	r3, [r7, #11]
 80086f0:	3301      	adds	r3, #1
 80086f2:	72fb      	strb	r3, [r7, #11]
      break;
 80086f4:	bf00      	nop
  }

  if (err != 0U)
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d11c      	bne.n	8008736 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80086fc:	893b      	ldrh	r3, [r7, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d011      	beq.n	8008726 <USBD_GetDescriptor+0x2b6>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	88db      	ldrh	r3, [r3, #6]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00d      	beq.n	8008726 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	88da      	ldrh	r2, [r3, #6]
 800870e:	893b      	ldrh	r3, [r7, #8]
 8008710:	4293      	cmp	r3, r2
 8008712:	bf28      	it	cs
 8008714:	4613      	movcs	r3, r2
 8008716:	b29b      	uxth	r3, r3
 8008718:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800871a:	893b      	ldrh	r3, [r7, #8]
 800871c:	461a      	mov	r2, r3
 800871e:	68f9      	ldr	r1, [r7, #12]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa22 	bl	8008b6a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	88db      	ldrh	r3, [r3, #6]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d104      	bne.n	8008738 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa79 	bl	8008c26 <USBD_CtlSendStatus>
 8008734:	e000      	b.n	8008738 <USBD_GetDescriptor+0x2c8>
    return;
 8008736:	bf00      	nop
    }
  }
}
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop

08008740 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	889b      	ldrh	r3, [r3, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d130      	bne.n	80087b4 <USBD_SetAddress+0x74>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	88db      	ldrh	r3, [r3, #6]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d12c      	bne.n	80087b4 <USBD_SetAddress+0x74>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	885b      	ldrh	r3, [r3, #2]
 800875e:	2b7f      	cmp	r3, #127	; 0x7f
 8008760:	d828      	bhi.n	80087b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	885b      	ldrh	r3, [r3, #2]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008774:	2b03      	cmp	r3, #3
 8008776:	d104      	bne.n	8008782 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f98b 	bl	8008a96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008780:	e01d      	b.n	80087be <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	7bfa      	ldrb	r2, [r7, #15]
 8008786:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fe8c 	bl	80094ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fa46 	bl	8008c26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d004      	beq.n	80087aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a8:	e009      	b.n	80087be <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b2:	e004      	b.n	80087be <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f96d 	bl	8008a96 <USBD_CtlError>
  }
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	4b41      	ldr	r3, [pc, #260]	; (80088e0 <USBD_SetConfig+0x118>)
 80087da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087dc:	4b40      	ldr	r3, [pc, #256]	; (80088e0 <USBD_SetConfig+0x118>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d904      	bls.n	80087ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f955 	bl	8008a96 <USBD_CtlError>
 80087ec:	e075      	b.n	80088da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d002      	beq.n	80087fe <USBD_SetConfig+0x36>
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d023      	beq.n	8008844 <USBD_SetConfig+0x7c>
 80087fc:	e062      	b.n	80088c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80087fe:	4b38      	ldr	r3, [pc, #224]	; (80088e0 <USBD_SetConfig+0x118>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d01a      	beq.n	800883c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008806:	4b36      	ldr	r3, [pc, #216]	; (80088e0 <USBD_SetConfig+0x118>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2203      	movs	r2, #3
 8008814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008818:	4b31      	ldr	r3, [pc, #196]	; (80088e0 <USBD_SetConfig+0x118>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff f9e8 	bl	8007bf4 <USBD_SetClassConfig>
 8008824:	4603      	mov	r3, r0
 8008826:	2b02      	cmp	r3, #2
 8008828:	d104      	bne.n	8008834 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f932 	bl	8008a96 <USBD_CtlError>
            return;
 8008832:	e052      	b.n	80088da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f9f6 	bl	8008c26 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800883a:	e04e      	b.n	80088da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f9f2 	bl	8008c26 <USBD_CtlSendStatus>
        break;
 8008842:	e04a      	b.n	80088da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008844:	4b26      	ldr	r3, [pc, #152]	; (80088e0 <USBD_SetConfig+0x118>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d112      	bne.n	8008872 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008854:	4b22      	ldr	r3, [pc, #136]	; (80088e0 <USBD_SetConfig+0x118>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800885e:	4b20      	ldr	r3, [pc, #128]	; (80088e0 <USBD_SetConfig+0x118>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff f9e4 	bl	8007c32 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f9db 	bl	8008c26 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008870:	e033      	b.n	80088da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008872:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <USBD_SetConfig+0x118>)
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	429a      	cmp	r2, r3
 800887e:	d01d      	beq.n	80088bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff f9d2 	bl	8007c32 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800888e:	4b14      	ldr	r3, [pc, #80]	; (80088e0 <USBD_SetConfig+0x118>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008898:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <USBD_SetConfig+0x118>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff f9a8 	bl	8007bf4 <USBD_SetClassConfig>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d104      	bne.n	80088b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f8f2 	bl	8008a96 <USBD_CtlError>
            return;
 80088b2:	e012      	b.n	80088da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f9b6 	bl	8008c26 <USBD_CtlSendStatus>
        break;
 80088ba:	e00e      	b.n	80088da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f9b2 	bl	8008c26 <USBD_CtlSendStatus>
        break;
 80088c2:	e00a      	b.n	80088da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f8e5 	bl	8008a96 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80088cc:	4b04      	ldr	r3, [pc, #16]	; (80088e0 <USBD_SetConfig+0x118>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff f9ad 	bl	8007c32 <USBD_ClrClassConfig>
        break;
 80088d8:	bf00      	nop
    }
  }
}
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	200002bc 	.word	0x200002bc

080088e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	88db      	ldrh	r3, [r3, #6]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d004      	beq.n	8008900 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f8cc 	bl	8008a96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088fe:	e022      	b.n	8008946 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008906:	2b02      	cmp	r3, #2
 8008908:	dc02      	bgt.n	8008910 <USBD_GetConfig+0x2c>
 800890a:	2b00      	cmp	r3, #0
 800890c:	dc03      	bgt.n	8008916 <USBD_GetConfig+0x32>
 800890e:	e015      	b.n	800893c <USBD_GetConfig+0x58>
 8008910:	2b03      	cmp	r3, #3
 8008912:	d00b      	beq.n	800892c <USBD_GetConfig+0x48>
 8008914:	e012      	b.n	800893c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3308      	adds	r3, #8
 8008920:	2201      	movs	r2, #1
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f920 	bl	8008b6a <USBD_CtlSendData>
        break;
 800892a:	e00c      	b.n	8008946 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3304      	adds	r3, #4
 8008930:	2201      	movs	r2, #1
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f918 	bl	8008b6a <USBD_CtlSendData>
        break;
 800893a:	e004      	b.n	8008946 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f8a9 	bl	8008a96 <USBD_CtlError>
        break;
 8008944:	bf00      	nop
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895e:	3b01      	subs	r3, #1
 8008960:	2b02      	cmp	r3, #2
 8008962:	d81e      	bhi.n	80089a2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	88db      	ldrh	r3, [r3, #6]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d004      	beq.n	8008976 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f891 	bl	8008a96 <USBD_CtlError>
        break;
 8008974:	e01a      	b.n	80089ac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008982:	2b00      	cmp	r3, #0
 8008984:	d005      	beq.n	8008992 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f043 0202 	orr.w	r2, r3, #2
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	330c      	adds	r3, #12
 8008996:	2202      	movs	r2, #2
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f8e5 	bl	8008b6a <USBD_CtlSendData>
      break;
 80089a0:	e004      	b.n	80089ac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f876 	bl	8008a96 <USBD_CtlError>
      break;
 80089aa:	bf00      	nop
  }
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	885b      	ldrh	r3, [r3, #2]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d106      	bne.n	80089d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f929 	bl	8008c26 <USBD_CtlSendStatus>
  }
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ec:	3b01      	subs	r3, #1
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d80b      	bhi.n	8008a0a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	885b      	ldrh	r3, [r3, #2]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d10c      	bne.n	8008a14 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f90f 	bl	8008c26 <USBD_CtlSendStatus>
      }
      break;
 8008a08:	e004      	b.n	8008a14 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f842 	bl	8008a96 <USBD_CtlError>
      break;
 8008a12:	e000      	b.n	8008a16 <USBD_ClrFeature+0x3a>
      break;
 8008a14:	bf00      	nop
  }
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b083      	sub	sp, #12
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781a      	ldrb	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	785a      	ldrb	r2, [r3, #1]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	3302      	adds	r3, #2
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	3303      	adds	r3, #3
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	4413      	add	r3, r2
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	3304      	adds	r3, #4
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	3305      	adds	r3, #5
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	4413      	add	r3, r2
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	3306      	adds	r3, #6
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	3307      	adds	r3, #7
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	4413      	add	r3, r2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	80da      	strh	r2, [r3, #6]

}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bc80      	pop	{r7}
 8008a94:	4770      	bx	lr

08008a96 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b082      	sub	sp, #8
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008aa0:	2180      	movs	r1, #128	; 0x80
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fc98 	bl	80093d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fc94 	bl	80093d8 <USBD_LL_StallEP>
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d032      	beq.n	8008b34 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f000 f834 	bl	8008b3c <USBD_GetLen>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	75fa      	strb	r2, [r7, #23]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	4413      	add	r3, r2
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	7812      	ldrb	r2, [r2, #0]
 8008af2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	75fa      	strb	r2, [r7, #23]
 8008afa:	461a      	mov	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	4413      	add	r3, r2
 8008b00:	2203      	movs	r2, #3
 8008b02:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008b04:	e012      	b.n	8008b2c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	60fa      	str	r2, [r7, #12]
 8008b0c:	7dfa      	ldrb	r2, [r7, #23]
 8008b0e:	1c51      	adds	r1, r2, #1
 8008b10:	75f9      	strb	r1, [r7, #23]
 8008b12:	4611      	mov	r1, r2
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	440a      	add	r2, r1
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	75fa      	strb	r2, [r7, #23]
 8008b22:	461a      	mov	r2, r3
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	4413      	add	r3, r2
 8008b28:	2200      	movs	r2, #0
 8008b2a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e8      	bne.n	8008b06 <USBD_GetString+0x4e>
    }
  }
}
 8008b34:	bf00      	nop
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008b48:	e005      	b.n	8008b56 <USBD_GetLen+0x1a>
  {
    len++;
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3301      	adds	r3, #1
 8008b54:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1f5      	bne.n	8008b4a <USBD_GetLen+0xe>
  }

  return len;
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bc80      	pop	{r7}
 8008b68:	4770      	bx	lr

08008b6a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	4613      	mov	r3, r2
 8008b76:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b80:	88fa      	ldrh	r2, [r7, #6]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008b86:	88fa      	ldrh	r2, [r7, #6]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b8c:	88fb      	ldrh	r3, [r7, #6]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	2100      	movs	r1, #0
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 fca9 	bl	80094ea <USBD_LL_Transmit>

  return USBD_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	4613      	mov	r3, r2
 8008bae:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bb0:	88fb      	ldrh	r3, [r7, #6]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 fc97 	bl	80094ea <USBD_LL_Transmit>

  return USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2203      	movs	r2, #3
 8008bd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008bdc:	88fa      	ldrh	r2, [r7, #6]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008be4:	88fa      	ldrh	r2, [r7, #6]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bec:	88fb      	ldrh	r3, [r7, #6]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 fc9c 	bl	8009530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c10:	88fb      	ldrh	r3, [r7, #6]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	2100      	movs	r1, #0
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 fc8a 	bl	8009530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2204      	movs	r2, #4
 8008c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c36:	2300      	movs	r3, #0
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fc54 	bl	80094ea <USBD_LL_Transmit>

  return USBD_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2205      	movs	r2, #5
 8008c58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	2200      	movs	r2, #0
 8008c60:	2100      	movs	r1, #0
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fc64 	bl	8009530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4912      	ldr	r1, [pc, #72]	; (8008cc4 <MX_USB_DEVICE_Init+0x50>)
 8008c7c:	4812      	ldr	r0, [pc, #72]	; (8008cc8 <MX_USB_DEVICE_Init+0x54>)
 8008c7e:	f7fe ff5f 	bl	8007b40 <USBD_Init>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c88:	f7f7 fd6e 	bl	8000768 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c8c:	490f      	ldr	r1, [pc, #60]	; (8008ccc <MX_USB_DEVICE_Init+0x58>)
 8008c8e:	480e      	ldr	r0, [pc, #56]	; (8008cc8 <MX_USB_DEVICE_Init+0x54>)
 8008c90:	f7fe ff81 	bl	8007b96 <USBD_RegisterClass>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c9a:	f7f7 fd65 	bl	8000768 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c9e:	490c      	ldr	r1, [pc, #48]	; (8008cd0 <MX_USB_DEVICE_Init+0x5c>)
 8008ca0:	4809      	ldr	r0, [pc, #36]	; (8008cc8 <MX_USB_DEVICE_Init+0x54>)
 8008ca2:	f7fe fee1 	bl	8007a68 <USBD_CDC_RegisterInterface>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008cac:	f7f7 fd5c 	bl	8000768 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cb0:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <MX_USB_DEVICE_Init+0x54>)
 8008cb2:	f7fe ff89 	bl	8007bc8 <USBD_Start>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cbc:	f7f7 fd54 	bl	8000768 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cc0:	bf00      	nop
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	2000012c 	.word	0x2000012c
 8008cc8:	20000778 	.word	0x20000778
 8008ccc:	20000018 	.word	0x20000018
 8008cd0:	2000011c 	.word	0x2000011c

08008cd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4905      	ldr	r1, [pc, #20]	; (8008cf0 <CDC_Init_FS+0x1c>)
 8008cdc:	4805      	ldr	r0, [pc, #20]	; (8008cf4 <CDC_Init_FS+0x20>)
 8008cde:	f7fe fed9 	bl	8007a94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ce2:	4905      	ldr	r1, [pc, #20]	; (8008cf8 <CDC_Init_FS+0x24>)
 8008ce4:	4803      	ldr	r0, [pc, #12]	; (8008cf4 <CDC_Init_FS+0x20>)
 8008ce6:	f7fe feee 	bl	8007ac6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008cea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20001018 	.word	0x20001018
 8008cf4:	20000778 	.word	0x20000778
 8008cf8:	20000a3c 	.word	0x20000a3c

08008cfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bc80      	pop	{r7}
 8008d08:	4770      	bx	lr
	...

08008d0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	71fb      	strb	r3, [r7, #7]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	2b23      	cmp	r3, #35	; 0x23
 8008d20:	d84a      	bhi.n	8008db8 <CDC_Control_FS+0xac>
 8008d22:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <CDC_Control_FS+0x1c>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008db9 	.word	0x08008db9
 8008d2c:	08008db9 	.word	0x08008db9
 8008d30:	08008db9 	.word	0x08008db9
 8008d34:	08008db9 	.word	0x08008db9
 8008d38:	08008db9 	.word	0x08008db9
 8008d3c:	08008db9 	.word	0x08008db9
 8008d40:	08008db9 	.word	0x08008db9
 8008d44:	08008db9 	.word	0x08008db9
 8008d48:	08008db9 	.word	0x08008db9
 8008d4c:	08008db9 	.word	0x08008db9
 8008d50:	08008db9 	.word	0x08008db9
 8008d54:	08008db9 	.word	0x08008db9
 8008d58:	08008db9 	.word	0x08008db9
 8008d5c:	08008db9 	.word	0x08008db9
 8008d60:	08008db9 	.word	0x08008db9
 8008d64:	08008db9 	.word	0x08008db9
 8008d68:	08008db9 	.word	0x08008db9
 8008d6c:	08008db9 	.word	0x08008db9
 8008d70:	08008db9 	.word	0x08008db9
 8008d74:	08008db9 	.word	0x08008db9
 8008d78:	08008db9 	.word	0x08008db9
 8008d7c:	08008db9 	.word	0x08008db9
 8008d80:	08008db9 	.word	0x08008db9
 8008d84:	08008db9 	.word	0x08008db9
 8008d88:	08008db9 	.word	0x08008db9
 8008d8c:	08008db9 	.word	0x08008db9
 8008d90:	08008db9 	.word	0x08008db9
 8008d94:	08008db9 	.word	0x08008db9
 8008d98:	08008db9 	.word	0x08008db9
 8008d9c:	08008db9 	.word	0x08008db9
 8008da0:	08008db9 	.word	0x08008db9
 8008da4:	08008db9 	.word	0x08008db9
 8008da8:	08008db9 	.word	0x08008db9
 8008dac:	08008db9 	.word	0x08008db9
 8008db0:	08008db9 	.word	0x08008db9
 8008db4:	08008db9 	.word	0x08008db9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008db8:	bf00      	nop
  }

  return (USBD_OK);
 8008dba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bc80      	pop	{r7}
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop

08008dc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	dataSize = *Len;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	4b35      	ldr	r3, [pc, #212]	; (8008eb0 <CDC_Receive_FS+0xe8>)
 8008dda:	801a      	strh	r2, [r3, #0]
	if(data_ready==0)
 8008ddc:	4b35      	ldr	r3, [pc, #212]	; (8008eb4 <CDC_Receive_FS+0xec>)
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d158      	bne.n	8008e96 <CDC_Receive_FS+0xce>
	{
		if(data_count==0)
 8008de4:	4b34      	ldr	r3, [pc, #208]	; (8008eb8 <CDC_Receive_FS+0xf0>)
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d127      	bne.n	8008e3c <CDC_Receive_FS+0x74>
		{
			if(Buf[1]&0x80)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3301      	adds	r3, #1
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	b25b      	sxtb	r3, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	da4e      	bge.n	8008e96 <CDC_Receive_FS+0xce>
			{
				for(uint16_t i=0;i<dataSize;i++) usb_data[data_count+i] = Buf[i];
 8008df8:	2300      	movs	r3, #0
 8008dfa:	81fb      	strh	r3, [r7, #14]
 8008dfc:	e00d      	b.n	8008e1a <CDC_Receive_FS+0x52>
 8008dfe:	89fb      	ldrh	r3, [r7, #14]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	441a      	add	r2, r3
 8008e04:	4b2c      	ldr	r3, [pc, #176]	; (8008eb8 <CDC_Receive_FS+0xf0>)
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	89fb      	ldrh	r3, [r7, #14]
 8008e0c:	440b      	add	r3, r1
 8008e0e:	7811      	ldrb	r1, [r2, #0]
 8008e10:	4a2a      	ldr	r2, [pc, #168]	; (8008ebc <CDC_Receive_FS+0xf4>)
 8008e12:	54d1      	strb	r1, [r2, r3]
 8008e14:	89fb      	ldrh	r3, [r7, #14]
 8008e16:	3301      	adds	r3, #1
 8008e18:	81fb      	strh	r3, [r7, #14]
 8008e1a:	4b25      	ldr	r3, [pc, #148]	; (8008eb0 <CDC_Receive_FS+0xe8>)
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	89fa      	ldrh	r2, [r7, #14]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d3ec      	bcc.n	8008dfe <CDC_Receive_FS+0x36>
				data_count+=dataSize;
 8008e24:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <CDC_Receive_FS+0xf0>)
 8008e26:	881a      	ldrh	r2, [r3, #0]
 8008e28:	4b21      	ldr	r3, [pc, #132]	; (8008eb0 <CDC_Receive_FS+0xe8>)
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	4b21      	ldr	r3, [pc, #132]	; (8008eb8 <CDC_Receive_FS+0xf0>)
 8008e32:	801a      	strh	r2, [r3, #0]
				data_ready = 0;
 8008e34:	4b1f      	ldr	r3, [pc, #124]	; (8008eb4 <CDC_Receive_FS+0xec>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	701a      	strb	r2, [r3, #0]
 8008e3a:	e02c      	b.n	8008e96 <CDC_Receive_FS+0xce>
			}
		}
	else
	{
		for(uint16_t i=0;i<dataSize;i++) usb_data[data_count+i] = Buf[i];
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	81bb      	strh	r3, [r7, #12]
 8008e40:	e00d      	b.n	8008e5e <CDC_Receive_FS+0x96>
 8008e42:	89bb      	ldrh	r3, [r7, #12]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	441a      	add	r2, r3
 8008e48:	4b1b      	ldr	r3, [pc, #108]	; (8008eb8 <CDC_Receive_FS+0xf0>)
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	89bb      	ldrh	r3, [r7, #12]
 8008e50:	440b      	add	r3, r1
 8008e52:	7811      	ldrb	r1, [r2, #0]
 8008e54:	4a19      	ldr	r2, [pc, #100]	; (8008ebc <CDC_Receive_FS+0xf4>)
 8008e56:	54d1      	strb	r1, [r2, r3]
 8008e58:	89bb      	ldrh	r3, [r7, #12]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	81bb      	strh	r3, [r7, #12]
 8008e5e:	4b14      	ldr	r3, [pc, #80]	; (8008eb0 <CDC_Receive_FS+0xe8>)
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	89ba      	ldrh	r2, [r7, #12]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d3ec      	bcc.n	8008e42 <CDC_Receive_FS+0x7a>
		data_count+=dataSize;
 8008e68:	4b13      	ldr	r3, [pc, #76]	; (8008eb8 <CDC_Receive_FS+0xf0>)
 8008e6a:	881a      	ldrh	r2, [r3, #0]
 8008e6c:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <CDC_Receive_FS+0xe8>)
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	4413      	add	r3, r2
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	4b10      	ldr	r3, [pc, #64]	; (8008eb8 <CDC_Receive_FS+0xf0>)
 8008e76:	801a      	strh	r2, [r3, #0]
		if(data_count>=(_nled*2))
 8008e78:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <CDC_Receive_FS+0xf0>)
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008e80:	d306      	bcc.n	8008e90 <CDC_Receive_FS+0xc8>
		{
			data_count = 0;
 8008e82:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <CDC_Receive_FS+0xf0>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	801a      	strh	r2, [r3, #0]
			data_ready =1;
 8008e88:	4b0a      	ldr	r3, [pc, #40]	; (8008eb4 <CDC_Receive_FS+0xec>)
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	701a      	strb	r2, [r3, #0]
 8008e8e:	e002      	b.n	8008e96 <CDC_Receive_FS+0xce>
		}
		else
		{
			data_ready = 0;
 8008e90:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <CDC_Receive_FS+0xec>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]
	}
}
//	dataSize = *Len;
//	for(uint16_t i = 0;i<dataSize;i++) usb_packet[i]=Buf[i];
//	check_usb = 1;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	4809      	ldr	r0, [pc, #36]	; (8008ec0 <CDC_Receive_FS+0xf8>)
 8008e9a:	f7fe fe14 	bl	8007ac6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e9e:	4808      	ldr	r0, [pc, #32]	; (8008ec0 <CDC_Receive_FS+0xf8>)
 8008ea0:	f7fe fe24 	bl	8007aec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ea4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	200004e2 	.word	0x200004e2
 8008eb4:	20001ae1 	.word	0x20001ae1
 8008eb8:	20002038 	.word	0x20002038
 8008ebc:	20002044 	.word	0x20002044
 8008ec0:	20000778 	.word	0x20000778

08008ec4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	6039      	str	r1, [r7, #0]
 8008ece:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2212      	movs	r2, #18
 8008ed4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ed6:	4b03      	ldr	r3, [pc, #12]	; (8008ee4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bc80      	pop	{r7}
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20000148 	.word	0x20000148

08008ee8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	6039      	str	r1, [r7, #0]
 8008ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2204      	movs	r2, #4
 8008ef8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008efa:	4b03      	ldr	r3, [pc, #12]	; (8008f08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc80      	pop	{r7}
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	2000015c 	.word	0x2000015c

08008f0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	6039      	str	r1, [r7, #0]
 8008f16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f18:	79fb      	ldrb	r3, [r7, #7]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d105      	bne.n	8008f2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	4907      	ldr	r1, [pc, #28]	; (8008f40 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f22:	4808      	ldr	r0, [pc, #32]	; (8008f44 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f24:	f7ff fdc8 	bl	8008ab8 <USBD_GetString>
 8008f28:	e004      	b.n	8008f34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	4904      	ldr	r1, [pc, #16]	; (8008f40 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f2e:	4805      	ldr	r0, [pc, #20]	; (8008f44 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f30:	f7ff fdc2 	bl	8008ab8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f34:	4b02      	ldr	r3, [pc, #8]	; (8008f40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	200015f4 	.word	0x200015f4
 8008f44:	0800c100 	.word	0x0800c100

08008f48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	6039      	str	r1, [r7, #0]
 8008f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	4904      	ldr	r1, [pc, #16]	; (8008f68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f58:	4804      	ldr	r0, [pc, #16]	; (8008f6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f5a:	f7ff fdad 	bl	8008ab8 <USBD_GetString>
  return USBD_StrDesc;
 8008f5e:	4b02      	ldr	r3, [pc, #8]	; (8008f68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	200015f4 	.word	0x200015f4
 8008f6c:	0800c108 	.word	0x0800c108

08008f70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	6039      	str	r1, [r7, #0]
 8008f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	221a      	movs	r2, #26
 8008f80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f82:	f000 f843 	bl	800900c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f86:	4b02      	ldr	r3, [pc, #8]	; (8008f90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20000160 	.word	0x20000160

08008f94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6039      	str	r1, [r7, #0]
 8008f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fa0:	79fb      	ldrb	r3, [r7, #7]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d105      	bne.n	8008fb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	4907      	ldr	r1, [pc, #28]	; (8008fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008faa:	4808      	ldr	r0, [pc, #32]	; (8008fcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fac:	f7ff fd84 	bl	8008ab8 <USBD_GetString>
 8008fb0:	e004      	b.n	8008fbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	4904      	ldr	r1, [pc, #16]	; (8008fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fb6:	4805      	ldr	r0, [pc, #20]	; (8008fcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fb8:	f7ff fd7e 	bl	8008ab8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fbc:	4b02      	ldr	r3, [pc, #8]	; (8008fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	200015f4 	.word	0x200015f4
 8008fcc:	0800c11c 	.word	0x0800c11c

08008fd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	6039      	str	r1, [r7, #0]
 8008fda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d105      	bne.n	8008fee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	4907      	ldr	r1, [pc, #28]	; (8009004 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fe6:	4808      	ldr	r0, [pc, #32]	; (8009008 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fe8:	f7ff fd66 	bl	8008ab8 <USBD_GetString>
 8008fec:	e004      	b.n	8008ff8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	4904      	ldr	r1, [pc, #16]	; (8009004 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ff2:	4805      	ldr	r0, [pc, #20]	; (8009008 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ff4:	f7ff fd60 	bl	8008ab8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ff8:	4b02      	ldr	r3, [pc, #8]	; (8009004 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	200015f4 	.word	0x200015f4
 8009008:	0800c128 	.word	0x0800c128

0800900c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009012:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <Get_SerialNum+0x44>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009018:	4b0e      	ldr	r3, [pc, #56]	; (8009054 <Get_SerialNum+0x48>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800901e:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <Get_SerialNum+0x4c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4413      	add	r3, r2
 800902a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d009      	beq.n	8009046 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009032:	2208      	movs	r2, #8
 8009034:	4909      	ldr	r1, [pc, #36]	; (800905c <Get_SerialNum+0x50>)
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 f814 	bl	8009064 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800903c:	2204      	movs	r2, #4
 800903e:	4908      	ldr	r1, [pc, #32]	; (8009060 <Get_SerialNum+0x54>)
 8009040:	68b8      	ldr	r0, [r7, #8]
 8009042:	f000 f80f 	bl	8009064 <IntToUnicode>
  }
}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	1ffff7e8 	.word	0x1ffff7e8
 8009054:	1ffff7ec 	.word	0x1ffff7ec
 8009058:	1ffff7f0 	.word	0x1ffff7f0
 800905c:	20000162 	.word	0x20000162
 8009060:	20000172 	.word	0x20000172

08009064 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009064:	b480      	push	{r7}
 8009066:	b087      	sub	sp, #28
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009076:	2300      	movs	r3, #0
 8009078:	75fb      	strb	r3, [r7, #23]
 800907a:	e027      	b.n	80090cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	0f1b      	lsrs	r3, r3, #28
 8009080:	2b09      	cmp	r3, #9
 8009082:	d80b      	bhi.n	800909c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	0f1b      	lsrs	r3, r3, #28
 8009088:	b2da      	uxtb	r2, r3
 800908a:	7dfb      	ldrb	r3, [r7, #23]
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	4619      	mov	r1, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	440b      	add	r3, r1
 8009094:	3230      	adds	r2, #48	; 0x30
 8009096:	b2d2      	uxtb	r2, r2
 8009098:	701a      	strb	r2, [r3, #0]
 800909a:	e00a      	b.n	80090b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	0f1b      	lsrs	r3, r3, #28
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	4619      	mov	r1, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	440b      	add	r3, r1
 80090ac:	3237      	adds	r2, #55	; 0x37
 80090ae:	b2d2      	uxtb	r2, r2
 80090b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	3301      	adds	r3, #1
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	4413      	add	r3, r2
 80090c2:	2200      	movs	r2, #0
 80090c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	3301      	adds	r3, #1
 80090ca:	75fb      	strb	r3, [r7, #23]
 80090cc:	7dfa      	ldrb	r2, [r7, #23]
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d3d3      	bcc.n	800907c <IntToUnicode+0x18>
  }
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	371c      	adds	r7, #28
 80090da:	46bd      	mov	sp, r7
 80090dc:	bc80      	pop	{r7}
 80090de:	4770      	bx	lr

080090e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a0d      	ldr	r2, [pc, #52]	; (8009124 <HAL_PCD_MspInit+0x44>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d113      	bne.n	800911a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80090f2:	4b0d      	ldr	r3, [pc, #52]	; (8009128 <HAL_PCD_MspInit+0x48>)
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	4a0c      	ldr	r2, [pc, #48]	; (8009128 <HAL_PCD_MspInit+0x48>)
 80090f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090fc:	61d3      	str	r3, [r2, #28]
 80090fe:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <HAL_PCD_MspInit+0x48>)
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 800910a:	2200      	movs	r2, #0
 800910c:	2102      	movs	r1, #2
 800910e:	2014      	movs	r0, #20
 8009110:	f7f7 ff01 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009114:	2014      	movs	r0, #20
 8009116:	f7f7 ff1a 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800911a:	bf00      	nop
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	40005c00 	.word	0x40005c00
 8009128:	40021000 	.word	0x40021000

0800912c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009140:	4619      	mov	r1, r3
 8009142:	4610      	mov	r0, r2
 8009144:	f7fe fd88 	bl	8007c58 <USBD_LL_SetupStage>
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	440b      	add	r3, r1
 8009170:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	78fb      	ldrb	r3, [r7, #3]
 8009178:	4619      	mov	r1, r3
 800917a:	f7fe fdba 	bl	8007cf2 <USBD_LL_DataOutStage>
}
 800917e:	bf00      	nop
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	460b      	mov	r3, r1
 8009190:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009198:	78fa      	ldrb	r2, [r7, #3]
 800919a:	6879      	ldr	r1, [r7, #4]
 800919c:	4613      	mov	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	440b      	add	r3, r1
 80091a6:	333c      	adds	r3, #60	; 0x3c
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	78fb      	ldrb	r3, [r7, #3]
 80091ac:	4619      	mov	r1, r3
 80091ae:	f7fe fe11 	bl	8007dd4 <USBD_LL_DataInStage>
}
 80091b2:	bf00      	nop
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe ff21 	bl	8008010 <USBD_LL_SOF>
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091de:	2301      	movs	r3, #1
 80091e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d001      	beq.n	80091ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091ea:	f7f7 fabd 	bl	8000768 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091f4:	7bfa      	ldrb	r2, [r7, #15]
 80091f6:	4611      	mov	r1, r2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe fed1 	bl	8007fa0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009204:	4618      	mov	r0, r3
 8009206:	f7fe fe8a 	bl	8007f1e <USBD_LL_Reset>
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe fecb 	bl	8007fbe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d005      	beq.n	800923c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009230:	4b04      	ldr	r3, [pc, #16]	; (8009244 <HAL_PCD_SuspendCallback+0x30>)
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	4a03      	ldr	r2, [pc, #12]	; (8009244 <HAL_PCD_SuspendCallback+0x30>)
 8009236:	f043 0306 	orr.w	r3, r3, #6
 800923a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	e000ed00 	.word	0xe000ed00

08009248 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe fec5 	bl	8007fe6 <USBD_LL_Resume>
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800926c:	4a28      	ldr	r2, [pc, #160]	; (8009310 <USBD_LL_Init+0xac>)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a26      	ldr	r2, [pc, #152]	; (8009310 <USBD_LL_Init+0xac>)
 8009278:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800927c:	4b24      	ldr	r3, [pc, #144]	; (8009310 <USBD_LL_Init+0xac>)
 800927e:	4a25      	ldr	r2, [pc, #148]	; (8009314 <USBD_LL_Init+0xb0>)
 8009280:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009282:	4b23      	ldr	r3, [pc, #140]	; (8009310 <USBD_LL_Init+0xac>)
 8009284:	2208      	movs	r2, #8
 8009286:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009288:	4b21      	ldr	r3, [pc, #132]	; (8009310 <USBD_LL_Init+0xac>)
 800928a:	2202      	movs	r2, #2
 800928c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800928e:	4b20      	ldr	r3, [pc, #128]	; (8009310 <USBD_LL_Init+0xac>)
 8009290:	2200      	movs	r2, #0
 8009292:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009294:	4b1e      	ldr	r3, [pc, #120]	; (8009310 <USBD_LL_Init+0xac>)
 8009296:	2200      	movs	r2, #0
 8009298:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800929a:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <USBD_LL_Init+0xac>)
 800929c:	2200      	movs	r2, #0
 800929e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80092a0:	481b      	ldr	r0, [pc, #108]	; (8009310 <USBD_LL_Init+0xac>)
 80092a2:	f7f8 fa88 	bl	80017b6 <HAL_PCD_Init>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80092ac:	f7f7 fa5c 	bl	8000768 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092b6:	2318      	movs	r3, #24
 80092b8:	2200      	movs	r2, #0
 80092ba:	2100      	movs	r1, #0
 80092bc:	f7f9 fefe 	bl	80030bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092c6:	2358      	movs	r3, #88	; 0x58
 80092c8:	2200      	movs	r2, #0
 80092ca:	2180      	movs	r1, #128	; 0x80
 80092cc:	f7f9 fef6 	bl	80030bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092d6:	23c0      	movs	r3, #192	; 0xc0
 80092d8:	2200      	movs	r2, #0
 80092da:	2181      	movs	r1, #129	; 0x81
 80092dc:	f7f9 feee 	bl	80030bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80092ea:	2200      	movs	r2, #0
 80092ec:	2101      	movs	r1, #1
 80092ee:	f7f9 fee5 	bl	80030bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092fc:	2200      	movs	r2, #0
 80092fe:	2182      	movs	r1, #130	; 0x82
 8009300:	f7f9 fedc 	bl	80030bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	200017f4 	.word	0x200017f4
 8009314:	40005c00 	.word	0x40005c00

08009318 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800932e:	4618      	mov	r0, r3
 8009330:	f7f8 fb4c 	bl	80019cc <HAL_PCD_Start>
 8009334:	4603      	mov	r3, r0
 8009336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 f94e 	bl	80095dc <USBD_Get_USB_Status>
 8009340:	4603      	mov	r3, r0
 8009342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009344:	7bbb      	ldrb	r3, [r7, #14]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	4608      	mov	r0, r1
 8009358:	4611      	mov	r1, r2
 800935a:	461a      	mov	r2, r3
 800935c:	4603      	mov	r3, r0
 800935e:	70fb      	strb	r3, [r7, #3]
 8009360:	460b      	mov	r3, r1
 8009362:	70bb      	strb	r3, [r7, #2]
 8009364:	4613      	mov	r3, r2
 8009366:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009376:	78bb      	ldrb	r3, [r7, #2]
 8009378:	883a      	ldrh	r2, [r7, #0]
 800937a:	78f9      	ldrb	r1, [r7, #3]
 800937c:	f7f8 fcc6 	bl	8001d0c <HAL_PCD_EP_Open>
 8009380:	4603      	mov	r3, r0
 8009382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	4618      	mov	r0, r3
 8009388:	f000 f928 	bl	80095dc <USBD_Get_USB_Status>
 800938c:	4603      	mov	r3, r0
 800938e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009390:	7bbb      	ldrb	r3, [r7, #14]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	460b      	mov	r3, r1
 80093a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093b4:	78fa      	ldrb	r2, [r7, #3]
 80093b6:	4611      	mov	r1, r2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7f8 fd0d 	bl	8001dd8 <HAL_PCD_EP_Close>
 80093be:	4603      	mov	r3, r0
 80093c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 f909 	bl	80095dc <USBD_Get_USB_Status>
 80093ca:	4603      	mov	r3, r0
 80093cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	4611      	mov	r1, r2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7f8 fdcd 	bl	8001f96 <HAL_PCD_EP_SetStall>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009400:	7bfb      	ldrb	r3, [r7, #15]
 8009402:	4618      	mov	r0, r3
 8009404:	f000 f8ea 	bl	80095dc <USBD_Get_USB_Status>
 8009408:	4603      	mov	r3, r0
 800940a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940c:	7bbb      	ldrb	r3, [r7, #14]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	460b      	mov	r3, r1
 8009420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009430:	78fa      	ldrb	r2, [r7, #3]
 8009432:	4611      	mov	r1, r2
 8009434:	4618      	mov	r0, r3
 8009436:	f7f8 fe0e 	bl	8002056 <HAL_PCD_EP_ClrStall>
 800943a:	4603      	mov	r3, r0
 800943c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	4618      	mov	r0, r3
 8009442:	f000 f8cb 	bl	80095dc <USBD_Get_USB_Status>
 8009446:	4603      	mov	r3, r0
 8009448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800944a:	7bbb      	ldrb	r3, [r7, #14]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009466:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800946c:	2b00      	cmp	r3, #0
 800946e:	da0c      	bge.n	800948a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009476:	68f9      	ldr	r1, [r7, #12]
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	00db      	lsls	r3, r3, #3
 8009482:	440b      	add	r3, r1
 8009484:	3302      	adds	r3, #2
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	e00b      	b.n	80094a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800948a:	78fb      	ldrb	r3, [r7, #3]
 800948c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009490:	68f9      	ldr	r1, [r7, #12]
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	00db      	lsls	r3, r3, #3
 800949a:	440b      	add	r3, r1
 800949c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80094a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bc80      	pop	{r7}
 80094aa:	4770      	bx	lr

080094ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094c6:	78fa      	ldrb	r2, [r7, #3]
 80094c8:	4611      	mov	r1, r2
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7f8 fbf9 	bl	8001cc2 <HAL_PCD_SetAddress>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 f880 	bl	80095dc <USBD_Get_USB_Status>
 80094dc:	4603      	mov	r3, r0
 80094de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b086      	sub	sp, #24
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	607a      	str	r2, [r7, #4]
 80094f4:	461a      	mov	r2, r3
 80094f6:	460b      	mov	r3, r1
 80094f8:	72fb      	strb	r3, [r7, #11]
 80094fa:	4613      	mov	r3, r2
 80094fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800950c:	893b      	ldrh	r3, [r7, #8]
 800950e:	7af9      	ldrb	r1, [r7, #11]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	f7f8 fcfd 	bl	8001f10 <HAL_PCD_EP_Transmit>
 8009516:	4603      	mov	r3, r0
 8009518:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800951a:	7dfb      	ldrb	r3, [r7, #23]
 800951c:	4618      	mov	r0, r3
 800951e:	f000 f85d 	bl	80095dc <USBD_Get_USB_Status>
 8009522:	4603      	mov	r3, r0
 8009524:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009526:	7dbb      	ldrb	r3, [r7, #22]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	607a      	str	r2, [r7, #4]
 800953a:	461a      	mov	r2, r3
 800953c:	460b      	mov	r3, r1
 800953e:	72fb      	strb	r3, [r7, #11]
 8009540:	4613      	mov	r3, r2
 8009542:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009552:	893b      	ldrh	r3, [r7, #8]
 8009554:	7af9      	ldrb	r1, [r7, #11]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	f7f8 fc86 	bl	8001e68 <HAL_PCD_EP_Receive>
 800955c:	4603      	mov	r3, r0
 800955e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009560:	7dfb      	ldrb	r3, [r7, #23]
 8009562:	4618      	mov	r0, r3
 8009564:	f000 f83a 	bl	80095dc <USBD_Get_USB_Status>
 8009568:	4603      	mov	r3, r0
 800956a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800956c:	7dbb      	ldrb	r3, [r7, #22]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b082      	sub	sp, #8
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	460b      	mov	r3, r1
 8009580:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f7f8 fca8 	bl	8001ee2 <HAL_PCD_EP_GetRxCount>
 8009592:	4603      	mov	r3, r0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095a4:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <USBD_static_malloc+0x14>)
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bc80      	pop	{r7}
 80095ae:	4770      	bx	lr
 80095b0:	200002c0 	.word	0x200002c0

080095b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]

}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bc80      	pop	{r7}
 80095c4:	4770      	bx	lr

080095c6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bc80      	pop	{r7}
 80095da:	4770      	bx	lr

080095dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095ea:	79fb      	ldrb	r3, [r7, #7]
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d817      	bhi.n	8009620 <USBD_Get_USB_Status+0x44>
 80095f0:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <USBD_Get_USB_Status+0x1c>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	08009609 	.word	0x08009609
 80095fc:	0800960f 	.word	0x0800960f
 8009600:	08009615 	.word	0x08009615
 8009604:	0800961b 	.word	0x0800961b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
    break;
 800960c:	e00b      	b.n	8009626 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800960e:	2302      	movs	r3, #2
 8009610:	73fb      	strb	r3, [r7, #15]
    break;
 8009612:	e008      	b.n	8009626 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009614:	2301      	movs	r3, #1
 8009616:	73fb      	strb	r3, [r7, #15]
    break;
 8009618:	e005      	b.n	8009626 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800961a:	2302      	movs	r3, #2
 800961c:	73fb      	strb	r3, [r7, #15]
    break;
 800961e:	e002      	b.n	8009626 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009620:	2302      	movs	r3, #2
 8009622:	73fb      	strb	r3, [r7, #15]
    break;
 8009624:	bf00      	nop
  }
  return usb_status;
 8009626:	7bfb      	ldrb	r3, [r7, #15]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop

08009634 <_run>:


char test[] ={"Hello!!/n"};

void _run(void)
{
 8009634:	b590      	push	{r4, r7, lr}
 8009636:	b0c1      	sub	sp, #260	; 0x104
 8009638:	af04      	add	r7, sp, #16
		data_count = 0;
 800963a:	4bb9      	ldr	r3, [pc, #740]	; (8009920 <_run+0x2ec>)
 800963c:	2200      	movs	r2, #0
 800963e:	801a      	strh	r2, [r3, #0]
		data_ready = 0;
 8009640:	4bb8      	ldr	r3, [pc, #736]	; (8009924 <_run+0x2f0>)
 8009642:	2200      	movs	r2, #0
 8009644:	701a      	strb	r2, [r3, #0]
		check_usb = 0;
 8009646:	4bb8      	ldr	r3, [pc, #736]	; (8009928 <_run+0x2f4>)
 8009648:	2200      	movs	r2, #0
 800964a:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Start_IT(&htim2);
 800964c:	48b7      	ldr	r0, [pc, #732]	; (800992c <_run+0x2f8>)
 800964e:	f7fa fdd3 	bl	80041f8 <HAL_TIM_Base_Start_IT>
		 HAL_TIM_Base_Start_IT(&htim3);
 8009652:	48b7      	ldr	r0, [pc, #732]	; (8009930 <_run+0x2fc>)
 8009654:	f7fa fdd0 	bl	80041f8 <HAL_TIM_Base_Start_IT>
		 HAL_Delay(1000);
 8009658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800965c:	f7f7 fb60 	bl	8000d20 <HAL_Delay>
		 brigthness(30);
 8009660:	201e      	movs	r0, #30
 8009662:	f001 fcbb 	bl	800afdc <brigthness>
		 Color cls = RGB_base_convert(rand()%7);
 8009666:	f001 fd2b 	bl	800b0c0 <rand>
 800966a:	4602      	mov	r2, r0
 800966c:	4bb1      	ldr	r3, [pc, #708]	; (8009934 <_run+0x300>)
 800966e:	fb83 1302 	smull	r1, r3, r3, r2
 8009672:	4413      	add	r3, r2
 8009674:	1099      	asrs	r1, r3, #2
 8009676:	17d3      	asrs	r3, r2, #31
 8009678:	1ac9      	subs	r1, r1, r3
 800967a:	460b      	mov	r3, r1
 800967c:	00db      	lsls	r3, r3, #3
 800967e:	1a5b      	subs	r3, r3, r1
 8009680:	1ad1      	subs	r1, r2, r3
 8009682:	b2cb      	uxtb	r3, r1
 8009684:	4618      	mov	r0, r3
 8009686:	f001 fab1 	bl	800abec <RGB_base_convert>
 800968a:	4603      	mov	r3, r0
 800968c:	461a      	mov	r2, r3
 800968e:	723a      	strb	r2, [r7, #8]
 8009690:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009694:	727a      	strb	r2, [r7, #9]
 8009696:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800969a:	72bb      	strb	r3, [r7, #10]
		 Color cld = RGB_base_convert(rand()%7);
 800969c:	f001 fd10 	bl	800b0c0 <rand>
 80096a0:	4602      	mov	r2, r0
 80096a2:	4ba4      	ldr	r3, [pc, #656]	; (8009934 <_run+0x300>)
 80096a4:	fb83 1302 	smull	r1, r3, r3, r2
 80096a8:	4413      	add	r3, r2
 80096aa:	1099      	asrs	r1, r3, #2
 80096ac:	17d3      	asrs	r3, r2, #31
 80096ae:	1ac9      	subs	r1, r1, r3
 80096b0:	460b      	mov	r3, r1
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	1a5b      	subs	r3, r3, r1
 80096b6:	1ad1      	subs	r1, r2, r3
 80096b8:	b2cb      	uxtb	r3, r1
 80096ba:	4618      	mov	r0, r3
 80096bc:	f001 fa96 	bl	800abec <RGB_base_convert>
 80096c0:	4603      	mov	r3, r0
 80096c2:	461a      	mov	r2, r3
 80096c4:	713a      	strb	r2, [r7, #4]
 80096c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80096ca:	717a      	strb	r2, [r7, #5]
 80096cc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80096d0:	71bb      	strb	r3, [r7, #6]
		 Color temp=RGB_base_convert(rand()%7);
 80096d2:	f001 fcf5 	bl	800b0c0 <rand>
 80096d6:	4602      	mov	r2, r0
 80096d8:	4b96      	ldr	r3, [pc, #600]	; (8009934 <_run+0x300>)
 80096da:	fb83 1302 	smull	r1, r3, r3, r2
 80096de:	4413      	add	r3, r2
 80096e0:	1099      	asrs	r1, r3, #2
 80096e2:	17d3      	asrs	r3, r2, #31
 80096e4:	1ac9      	subs	r1, r1, r3
 80096e6:	460b      	mov	r3, r1
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	1a5b      	subs	r3, r3, r1
 80096ec:	1ad1      	subs	r1, r2, r3
 80096ee:	b2cb      	uxtb	r3, r1
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 fa7b 	bl	800abec <RGB_base_convert>
 80096f6:	4603      	mov	r3, r0
 80096f8:	461a      	mov	r2, r3
 80096fa:	703a      	strb	r2, [r7, #0]
 80096fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009700:	707a      	strb	r2, [r7, #1]
 8009702:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009706:	70bb      	strb	r3, [r7, #2]
		 color_s = cls;
 8009708:	4b8b      	ldr	r3, [pc, #556]	; (8009938 <_run+0x304>)
 800970a:	461a      	mov	r2, r3
 800970c:	f107 0308 	add.w	r3, r7, #8
 8009710:	8819      	ldrh	r1, [r3, #0]
 8009712:	789b      	ldrb	r3, [r3, #2]
 8009714:	8011      	strh	r1, [r2, #0]
 8009716:	7093      	strb	r3, [r2, #2]
		 color_d = cld;
 8009718:	4b88      	ldr	r3, [pc, #544]	; (800993c <_run+0x308>)
 800971a:	461a      	mov	r2, r3
 800971c:	1d3b      	adds	r3, r7, #4
 800971e:	8819      	ldrh	r1, [r3, #0]
 8009720:	789b      	ldrb	r3, [r3, #2]
 8009722:	8011      	strh	r1, [r2, #0]
 8009724:	7093      	strb	r3, [r2, #2]
		 color_s2 = cld;
 8009726:	4b86      	ldr	r3, [pc, #536]	; (8009940 <_run+0x30c>)
 8009728:	461a      	mov	r2, r3
 800972a:	1d3b      	adds	r3, r7, #4
 800972c:	8819      	ldrh	r1, [r3, #0]
 800972e:	789b      	ldrb	r3, [r3, #2]
 8009730:	8011      	strh	r1, [r2, #0]
 8009732:	7093      	strb	r3, [r2, #2]
		 color_d2 = cls;
 8009734:	4b83      	ldr	r3, [pc, #524]	; (8009944 <_run+0x310>)
 8009736:	461a      	mov	r2, r3
 8009738:	f107 0308 	add.w	r3, r7, #8
 800973c:	8819      	ldrh	r1, [r3, #0]
 800973e:	789b      	ldrb	r3, [r3, #2]
 8009740:	8011      	strh	r1, [r2, #0]
 8009742:	7093      	strb	r3, [r2, #2]
		 RGB_write(point_to(&_r,&_g,&_b),RGB_base_convert(black),0,_nled-1);
 8009744:	f107 000c 	add.w	r0, r7, #12
 8009748:	4b7f      	ldr	r3, [pc, #508]	; (8009948 <_run+0x314>)
 800974a:	4a80      	ldr	r2, [pc, #512]	; (800994c <_run+0x318>)
 800974c:	4980      	ldr	r1, [pc, #512]	; (8009950 <_run+0x31c>)
 800974e:	f001 fabb 	bl	800acc8 <point_to>
 8009752:	2000      	movs	r0, #0
 8009754:	f001 fa4a 	bl	800abec <RGB_base_convert>
 8009758:	4603      	mov	r3, r0
 800975a:	461a      	mov	r2, r3
 800975c:	763a      	strb	r2, [r7, #24]
 800975e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009762:	767a      	strb	r2, [r7, #25]
 8009764:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009768:	76bb      	strb	r3, [r7, #26]
 800976a:	f240 237f 	movw	r3, #639	; 0x27f
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	2300      	movs	r3, #0
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	f107 020c 	add.w	r2, r7, #12
 800977a:	ca07      	ldmia	r2, {r0, r1, r2}
 800977c:	f001 fa05 	bl	800ab8a <RGB_write>
*/

		while(1)
		{

			var5 = rand()%2;
 8009780:	f001 fc9e 	bl	800b0c0 <rand>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	f003 0301 	and.w	r3, r3, #1
 800978c:	bfb8      	it	lt
 800978e:	425b      	neglt	r3, r3
 8009790:	b2da      	uxtb	r2, r3
 8009792:	4b70      	ldr	r3, [pc, #448]	; (8009954 <_run+0x320>)
 8009794:	701a      	strb	r2, [r3, #0]
		//	var5 +=2;
		//	var5 = 3;
				switch(var5)
 8009796:	4b6f      	ldr	r3, [pc, #444]	; (8009954 <_run+0x320>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	2b07      	cmp	r3, #7
 800979c:	f200 812c 	bhi.w	80099f8 <_run+0x3c4>
 80097a0:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <_run+0x174>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097c9 	.word	0x080097c9
 80097ac:	0800984d 	.word	0x0800984d
 80097b0:	08009895 	.word	0x08009895
 80097b4:	080098b7 	.word	0x080098b7
 80097b8:	080098d9 	.word	0x080098d9
 80097bc:	080098df 	.word	0x080098df
 80097c0:	080098e5 	.word	0x080098e5
 80097c4:	08009975 	.word	0x08009975
				{
				case 0:
					load_map_h_gradian(point_to(&t_r,&t_g,&t_b),image[rand()%46],RGB_base_convert(black),1,rand()%2);
 80097c8:	f107 001c 	add.w	r0, r7, #28
 80097cc:	4b62      	ldr	r3, [pc, #392]	; (8009958 <_run+0x324>)
 80097ce:	4a63      	ldr	r2, [pc, #396]	; (800995c <_run+0x328>)
 80097d0:	4963      	ldr	r1, [pc, #396]	; (8009960 <_run+0x32c>)
 80097d2:	f001 fa79 	bl	800acc8 <point_to>
 80097d6:	f001 fc73 	bl	800b0c0 <rand>
 80097da:	4603      	mov	r3, r0
 80097dc:	4a61      	ldr	r2, [pc, #388]	; (8009964 <_run+0x330>)
 80097de:	fb82 1203 	smull	r1, r2, r2, r3
 80097e2:	441a      	add	r2, r3
 80097e4:	1151      	asrs	r1, r2, #5
 80097e6:	17da      	asrs	r2, r3, #31
 80097e8:	1a8a      	subs	r2, r1, r2
 80097ea:	212e      	movs	r1, #46	; 0x2e
 80097ec:	fb01 f202 	mul.w	r2, r1, r2
 80097f0:	1a9a      	subs	r2, r3, r2
 80097f2:	4b5d      	ldr	r3, [pc, #372]	; (8009968 <_run+0x334>)
 80097f4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80097f8:	2000      	movs	r0, #0
 80097fa:	f001 f9f7 	bl	800abec <RGB_base_convert>
 80097fe:	4603      	mov	r3, r0
 8009800:	461a      	mov	r2, r3
 8009802:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8009806:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800980a:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 800980e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009812:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009816:	f001 fc53 	bl	800b0c0 <rand>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	bfb8      	it	lt
 8009824:	425b      	neglt	r3, r3
 8009826:	9302      	str	r3, [sp, #8]
 8009828:	2301      	movs	r3, #1
 800982a:	9301      	str	r3, [sp, #4]
 800982c:	466b      	mov	r3, sp
 800982e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009832:	6812      	ldr	r2, [r2, #0]
 8009834:	4611      	mov	r1, r2
 8009836:	8019      	strh	r1, [r3, #0]
 8009838:	3302      	adds	r3, #2
 800983a:	0c12      	lsrs	r2, r2, #16
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	4623      	mov	r3, r4
 8009840:	f107 021c 	add.w	r2, r7, #28
 8009844:	ca07      	ldmia	r2, {r0, r1, r2}
 8009846:	f000 fc09 	bl	800a05c <load_map_h_gradian>
				break;
 800984a:	e0d6      	b.n	80099fa <_run+0x3c6>
				case 1:
					load_map_h_gradian_random2(point_to(&t_r,&t_g,&t_b),image[rand()%46],&gradient_random,&gradient_random2,1);
 800984c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8009850:	4b41      	ldr	r3, [pc, #260]	; (8009958 <_run+0x324>)
 8009852:	4a42      	ldr	r2, [pc, #264]	; (800995c <_run+0x328>)
 8009854:	4942      	ldr	r1, [pc, #264]	; (8009960 <_run+0x32c>)
 8009856:	f001 fa37 	bl	800acc8 <point_to>
 800985a:	f001 fc31 	bl	800b0c0 <rand>
 800985e:	4603      	mov	r3, r0
 8009860:	4a40      	ldr	r2, [pc, #256]	; (8009964 <_run+0x330>)
 8009862:	fb82 1203 	smull	r1, r2, r2, r3
 8009866:	441a      	add	r2, r3
 8009868:	1151      	asrs	r1, r2, #5
 800986a:	17da      	asrs	r2, r3, #31
 800986c:	1a8a      	subs	r2, r1, r2
 800986e:	212e      	movs	r1, #46	; 0x2e
 8009870:	fb01 f202 	mul.w	r2, r1, r2
 8009874:	1a9a      	subs	r2, r3, r2
 8009876:	4b3c      	ldr	r3, [pc, #240]	; (8009968 <_run+0x334>)
 8009878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987c:	2201      	movs	r2, #1
 800987e:	9202      	str	r2, [sp, #8]
 8009880:	4a3a      	ldr	r2, [pc, #232]	; (800996c <_run+0x338>)
 8009882:	9201      	str	r2, [sp, #4]
 8009884:	4a3a      	ldr	r2, [pc, #232]	; (8009970 <_run+0x33c>)
 8009886:	9200      	str	r2, [sp, #0]
 8009888:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800988c:	ca07      	ldmia	r2, {r0, r1, r2}
 800988e:	f000 fb64 	bl	8009f5a <load_map_h_gradian_random2>
				break;
 8009892:	e0b2      	b.n	80099fa <_run+0x3c6>

				case 2:
					for(int i = 0; i<16; i++) sun_in(100);
 8009894:	2300      	movs	r3, #0
 8009896:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800989a:	e007      	b.n	80098ac <_run+0x278>
 800989c:	2064      	movs	r0, #100	; 0x64
 800989e:	f000 fcfb 	bl	800a298 <sun_in>
 80098a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a6:	3301      	adds	r3, #1
 80098a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098b0:	2b0f      	cmp	r3, #15
 80098b2:	ddf3      	ble.n	800989c <_run+0x268>
					break;
 80098b4:	e0a1      	b.n	80099fa <_run+0x3c6>
				case 3:

					for(int i = 0; i<16; i++) sun_ou(100);
 80098b6:	2300      	movs	r3, #0
 80098b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80098bc:	e007      	b.n	80098ce <_run+0x29a>
 80098be:	2064      	movs	r0, #100	; 0x64
 80098c0:	f000 fd66 	bl	800a390 <sun_ou>
 80098c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80098c8:	3301      	adds	r3, #1
 80098ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80098ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80098d2:	2b0f      	cmp	r3, #15
 80098d4:	ddf3      	ble.n	80098be <_run+0x28a>
					break;
 80098d6:	e090      	b.n	80099fa <_run+0x3c6>

				case 4:
					 galaxy_in();
 80098d8:	f000 fdde 	bl	800a498 <galaxy_in>
					break;
 80098dc:	e08d      	b.n	80099fa <_run+0x3c6>
				case 5:
					 galaxy_ou();
 80098de:	f000 fe5b 	bl	800a598 <galaxy_ou>
					 break;
 80098e2:	e08a      	b.n	80099fa <_run+0x3c6>
				case 6:
					load_map_h_2color_random(point_to(&t_r,&t_g,&t_b),image[rand()%46]);
 80098e4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80098e8:	4b1b      	ldr	r3, [pc, #108]	; (8009958 <_run+0x324>)
 80098ea:	4a1c      	ldr	r2, [pc, #112]	; (800995c <_run+0x328>)
 80098ec:	491c      	ldr	r1, [pc, #112]	; (8009960 <_run+0x32c>)
 80098ee:	f001 f9eb 	bl	800acc8 <point_to>
 80098f2:	f001 fbe5 	bl	800b0c0 <rand>
 80098f6:	4603      	mov	r3, r0
 80098f8:	4a1a      	ldr	r2, [pc, #104]	; (8009964 <_run+0x330>)
 80098fa:	fb82 1203 	smull	r1, r2, r2, r3
 80098fe:	441a      	add	r2, r3
 8009900:	1151      	asrs	r1, r2, #5
 8009902:	17da      	asrs	r2, r3, #31
 8009904:	1a8a      	subs	r2, r1, r2
 8009906:	212e      	movs	r1, #46	; 0x2e
 8009908:	fb01 f202 	mul.w	r2, r1, r2
 800990c:	1a9a      	subs	r2, r3, r2
 800990e:	4b16      	ldr	r3, [pc, #88]	; (8009968 <_run+0x334>)
 8009910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009914:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009918:	ca07      	ldmia	r2, {r0, r1, r2}
 800991a:	f000 fa9d 	bl	8009e58 <load_map_h_2color_random>
					break;
 800991e:	e06c      	b.n	80099fa <_run+0x3c6>
 8009920:	20002038 	.word	0x20002038
 8009924:	20001ae1 	.word	0x20001ae1
 8009928:	200004e4 	.word	0x200004e4
 800992c:	200006e8 	.word	0x200006e8
 8009930:	20000618 	.word	0x20000618
 8009934:	92492493 	.word	0x92492493
 8009938:	20002f60 	.word	0x20002f60
 800993c:	20002f54 	.word	0x20002f54
 8009940:	20002cc8 	.word	0x20002cc8
 8009944:	20002f58 	.word	0x20002f58
 8009948:	20002548 	.word	0x20002548
 800994c:	20001d64 	.word	0x20001d64
 8009950:	200027c8 	.word	0x200027c8
 8009954:	20001ae0 	.word	0x20001ae0
 8009958:	20002ccc 	.word	0x20002ccc
 800995c:	20001ae4 	.word	0x20001ae4
 8009960:	20002a48 	.word	0x20002a48
 8009964:	b21642c9 	.word	0xb21642c9
 8009968:	2000017c 	.word	0x2000017c
 800996c:	08009cf5 	.word	0x08009cf5
 8009970:	08009c59 	.word	0x08009c59
				case 7:
					load_map_v_gradianx(point_to(&t_r,&t_g,&t_b),image[rand()%46],RGB_base_convert(black),1,rand()%2);
 8009974:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8009978:	4b8e      	ldr	r3, [pc, #568]	; (8009bb4 <_run+0x580>)
 800997a:	4a8f      	ldr	r2, [pc, #572]	; (8009bb8 <_run+0x584>)
 800997c:	498f      	ldr	r1, [pc, #572]	; (8009bbc <_run+0x588>)
 800997e:	f001 f9a3 	bl	800acc8 <point_to>
 8009982:	f001 fb9d 	bl	800b0c0 <rand>
 8009986:	4603      	mov	r3, r0
 8009988:	4a8d      	ldr	r2, [pc, #564]	; (8009bc0 <_run+0x58c>)
 800998a:	fb82 1203 	smull	r1, r2, r2, r3
 800998e:	441a      	add	r2, r3
 8009990:	1151      	asrs	r1, r2, #5
 8009992:	17da      	asrs	r2, r3, #31
 8009994:	1a8a      	subs	r2, r1, r2
 8009996:	212e      	movs	r1, #46	; 0x2e
 8009998:	fb01 f202 	mul.w	r2, r1, r2
 800999c:	1a9a      	subs	r2, r3, r2
 800999e:	4b89      	ldr	r3, [pc, #548]	; (8009bc4 <_run+0x590>)
 80099a0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80099a4:	2000      	movs	r0, #0
 80099a6:	f001 f921 	bl	800abec <RGB_base_convert>
 80099aa:	4603      	mov	r3, r0
 80099ac:	461a      	mov	r2, r3
 80099ae:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
 80099b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80099b6:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
 80099ba:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80099be:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80099c2:	f001 fb7d 	bl	800b0c0 <rand>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	bfb8      	it	lt
 80099d0:	425b      	neglt	r3, r3
 80099d2:	9302      	str	r3, [sp, #8]
 80099d4:	2301      	movs	r3, #1
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	466b      	mov	r3, sp
 80099da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	4611      	mov	r1, r2
 80099e2:	8019      	strh	r1, [r3, #0]
 80099e4:	3302      	adds	r3, #2
 80099e6:	0c12      	lsrs	r2, r2, #16
 80099e8:	701a      	strb	r2, [r3, #0]
 80099ea:	4623      	mov	r3, r4
 80099ec:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80099f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80099f2:	f000 fbc6 	bl	800a182 <load_map_v_gradianx>
					break;
 80099f6:	e000      	b.n	80099fa <_run+0x3c6>
				default:
					break;
 80099f8:	bf00      	nop
				}
				var6++;
 80099fa:	4b73      	ldr	r3, [pc, #460]	; (8009bc8 <_run+0x594>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	3301      	adds	r3, #1
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	4b71      	ldr	r3, [pc, #452]	; (8009bc8 <_run+0x594>)
 8009a04:	701a      	strb	r2, [r3, #0]
									var3 = rand()%2;
 8009a06:	f001 fb5b 	bl	800b0c0 <rand>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	bfb8      	it	lt
 8009a14:	425b      	neglt	r3, r3
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	4b6c      	ldr	r3, [pc, #432]	; (8009bcc <_run+0x598>)
 8009a1a:	701a      	strb	r2, [r3, #0]

									if(var3)
 8009a1c:	4b6b      	ldr	r3, [pc, #428]	; (8009bcc <_run+0x598>)
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d04d      	beq.n	8009ac0 <_run+0x48c>
									{
										var = rand()%2;
 8009a24:	f001 fb4c 	bl	800b0c0 <rand>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	bfb8      	it	lt
 8009a32:	425b      	neglt	r3, r3
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	4b66      	ldr	r3, [pc, #408]	; (8009bd0 <_run+0x59c>)
 8009a38:	701a      	strb	r2, [r3, #0]
										var1 = rand()%2;
 8009a3a:	f001 fb41 	bl	800b0c0 <rand>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	bfb8      	it	lt
 8009a48:	425b      	neglt	r3, r3
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	4b61      	ldr	r3, [pc, #388]	; (8009bd4 <_run+0x5a0>)
 8009a4e:	701a      	strb	r2, [r3, #0]
										for(int i = 0; i<64; i++)
 8009a50:	2300      	movs	r3, #0
 8009a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a56:	e02e      	b.n	8009ab6 <_run+0x482>
										{

										 if (var) rota_mx_ud(point_to(&t_r,&t_g,&t_b),var1,1);
 8009a58:	4b5d      	ldr	r3, [pc, #372]	; (8009bd0 <_run+0x59c>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d010      	beq.n	8009a82 <_run+0x44e>
 8009a60:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8009a64:	4b53      	ldr	r3, [pc, #332]	; (8009bb4 <_run+0x580>)
 8009a66:	4a54      	ldr	r2, [pc, #336]	; (8009bb8 <_run+0x584>)
 8009a68:	4954      	ldr	r1, [pc, #336]	; (8009bbc <_run+0x588>)
 8009a6a:	f001 f92d 	bl	800acc8 <point_to>
 8009a6e:	4b59      	ldr	r3, [pc, #356]	; (8009bd4 <_run+0x5a0>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2201      	movs	r2, #1
 8009a74:	9200      	str	r2, [sp, #0]
 8009a76:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8009a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a7c:	f000 ff47 	bl	800a90e <rota_mx_ud>
 8009a80:	e00f      	b.n	8009aa2 <_run+0x46e>
										 else rota_mx_lr(point_to(&t_r,&t_g,&t_b),var1,1);
 8009a82:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8009a86:	4b4b      	ldr	r3, [pc, #300]	; (8009bb4 <_run+0x580>)
 8009a88:	4a4b      	ldr	r2, [pc, #300]	; (8009bb8 <_run+0x584>)
 8009a8a:	494c      	ldr	r1, [pc, #304]	; (8009bbc <_run+0x588>)
 8009a8c:	f001 f91c 	bl	800acc8 <point_to>
 8009a90:	4b50      	ldr	r3, [pc, #320]	; (8009bd4 <_run+0x5a0>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	2201      	movs	r2, #1
 8009a96:	9200      	str	r2, [sp, #0]
 8009a98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009a9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a9e:	f000 fe6b 	bl	800a778 <rota_mx_lr>

										 graphic_updata();
 8009aa2:	f000 f89b 	bl	8009bdc <graphic_updata>
										// graphic_updata_DMA();
										 HAL_Delay(100);
 8009aa6:	2064      	movs	r0, #100	; 0x64
 8009aa8:	f7f7 f93a 	bl	8000d20 <HAL_Delay>
										for(int i = 0; i<64; i++)
 8009aac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ab6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009aba:	2b3f      	cmp	r3, #63	; 0x3f
 8009abc:	ddcc      	ble.n	8009a58 <_run+0x424>
 8009abe:	e65f      	b.n	8009780 <_run+0x14c>
										}
									}
									else
									{

										var = rand()%2;
 8009ac0:	f001 fafe 	bl	800b0c0 <rand>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	bfb8      	it	lt
 8009ace:	425b      	neglt	r3, r3
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	4b3f      	ldr	r3, [pc, #252]	; (8009bd0 <_run+0x59c>)
 8009ad4:	701a      	strb	r2, [r3, #0]
										var1 = rand()%2;
 8009ad6:	f001 faf3 	bl	800b0c0 <rand>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	bfb8      	it	lt
 8009ae4:	425b      	neglt	r3, r3
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	4b3a      	ldr	r3, [pc, #232]	; (8009bd4 <_run+0x5a0>)
 8009aea:	701a      	strb	r2, [r3, #0]
										var4 = rand()%2;
 8009aec:	f001 fae8 	bl	800b0c0 <rand>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	bfb8      	it	lt
 8009afa:	425b      	neglt	r3, r3
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	4b36      	ldr	r3, [pc, #216]	; (8009bd8 <_run+0x5a4>)
 8009b00:	701a      	strb	r2, [r3, #0]
										for(int i = 0; i<64; i++)
 8009b02:	2300      	movs	r3, #0
 8009b04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b08:	e04e      	b.n	8009ba8 <_run+0x574>
										{
										 if (var)
 8009b0a:	4b31      	ldr	r3, [pc, #196]	; (8009bd0 <_run+0x59c>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d020      	beq.n	8009b54 <_run+0x520>
											 {

											 	 rota_mx_lr(point_to(&t_r,&t_g,&t_b),var4,1);
 8009b12:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8009b16:	4b27      	ldr	r3, [pc, #156]	; (8009bb4 <_run+0x580>)
 8009b18:	4a27      	ldr	r2, [pc, #156]	; (8009bb8 <_run+0x584>)
 8009b1a:	4928      	ldr	r1, [pc, #160]	; (8009bbc <_run+0x588>)
 8009b1c:	f001 f8d4 	bl	800acc8 <point_to>
 8009b20:	4b2d      	ldr	r3, [pc, #180]	; (8009bd8 <_run+0x5a4>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2201      	movs	r2, #1
 8009b26:	9200      	str	r2, [sp, #0]
 8009b28:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8009b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b2e:	f000 fe23 	bl	800a778 <rota_mx_lr>
											 	 rota_mx_ud(point_to(&t_r,&t_g,&t_b),var1,1);
 8009b32:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8009b36:	4b1f      	ldr	r3, [pc, #124]	; (8009bb4 <_run+0x580>)
 8009b38:	4a1f      	ldr	r2, [pc, #124]	; (8009bb8 <_run+0x584>)
 8009b3a:	4920      	ldr	r1, [pc, #128]	; (8009bbc <_run+0x588>)
 8009b3c:	f001 f8c4 	bl	800acc8 <point_to>
 8009b40:	4b24      	ldr	r3, [pc, #144]	; (8009bd4 <_run+0x5a0>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2201      	movs	r2, #1
 8009b46:	9200      	str	r2, [sp, #0]
 8009b48:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8009b4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b4e:	f000 fede 	bl	800a90e <rota_mx_ud>
 8009b52:	e01f      	b.n	8009b94 <_run+0x560>

											 }
										 else
											 {

											 	 rota_mx_lr(point_to(&t_r,&t_g,&t_b),var1,1);
 8009b54:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8009b58:	4b16      	ldr	r3, [pc, #88]	; (8009bb4 <_run+0x580>)
 8009b5a:	4a17      	ldr	r2, [pc, #92]	; (8009bb8 <_run+0x584>)
 8009b5c:	4917      	ldr	r1, [pc, #92]	; (8009bbc <_run+0x588>)
 8009b5e:	f001 f8b3 	bl	800acc8 <point_to>
 8009b62:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <_run+0x5a0>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	2201      	movs	r2, #1
 8009b68:	9200      	str	r2, [sp, #0]
 8009b6a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8009b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b70:	f000 fe02 	bl	800a778 <rota_mx_lr>
											 	 rota_mx_ud(point_to(&t_r,&t_g,&t_b),var4,1);
 8009b74:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8009b78:	4b0e      	ldr	r3, [pc, #56]	; (8009bb4 <_run+0x580>)
 8009b7a:	4a0f      	ldr	r2, [pc, #60]	; (8009bb8 <_run+0x584>)
 8009b7c:	490f      	ldr	r1, [pc, #60]	; (8009bbc <_run+0x588>)
 8009b7e:	f001 f8a3 	bl	800acc8 <point_to>
 8009b82:	4b15      	ldr	r3, [pc, #84]	; (8009bd8 <_run+0x5a4>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	2201      	movs	r2, #1
 8009b88:	9200      	str	r2, [sp, #0]
 8009b8a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009b8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b90:	f000 febd 	bl	800a90e <rota_mx_ud>

											 }
										 graphic_updata();
 8009b94:	f000 f822 	bl	8009bdc <graphic_updata>
										// graphic_updata_DMA();
										 HAL_Delay(100);
 8009b98:	2064      	movs	r0, #100	; 0x64
 8009b9a:	f7f7 f8c1 	bl	8000d20 <HAL_Delay>
										for(int i = 0; i<64; i++)
 8009b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bac:	2b3f      	cmp	r3, #63	; 0x3f
 8009bae:	ddac      	ble.n	8009b0a <_run+0x4d6>
			var5 = rand()%2;
 8009bb0:	e5e6      	b.n	8009780 <_run+0x14c>
 8009bb2:	bf00      	nop
 8009bb4:	20002ccc 	.word	0x20002ccc
 8009bb8:	20001ae4 	.word	0x20001ae4
 8009bbc:	20002a48 	.word	0x20002a48
 8009bc0:	b21642c9 	.word	0xb21642c9
 8009bc4:	2000017c 	.word	0x2000017c
 8009bc8:	20002f4d 	.word	0x20002f4d
 8009bcc:	20002f4e 	.word	0x20002f4e
 8009bd0:	20002f5e 	.word	0x20002f5e
 8009bd4:	2000203f 	.word	0x2000203f
 8009bd8:	20002544 	.word	0x20002544

08009bdc <graphic_updata>:




void graphic_updata(void)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
	for(int i = 0;i<_nled;i++)
 8009be2:	2300      	movs	r3, #0
 8009be4:	607b      	str	r3, [r7, #4]
 8009be6:	e020      	b.n	8009c2a <graphic_updata+0x4e>
	{
		_r[i]=t_r[i];
 8009be8:	4a15      	ldr	r2, [pc, #84]	; (8009c40 <graphic_updata+0x64>)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4413      	add	r3, r2
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	b2d9      	uxtb	r1, r3
 8009bf2:	4a14      	ldr	r2, [pc, #80]	; (8009c44 <graphic_updata+0x68>)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	460a      	mov	r2, r1
 8009bfa:	701a      	strb	r2, [r3, #0]
		_g[i]=t_g[i];
 8009bfc:	4a12      	ldr	r2, [pc, #72]	; (8009c48 <graphic_updata+0x6c>)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4413      	add	r3, r2
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	b2d9      	uxtb	r1, r3
 8009c06:	4a11      	ldr	r2, [pc, #68]	; (8009c4c <graphic_updata+0x70>)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	460a      	mov	r2, r1
 8009c0e:	701a      	strb	r2, [r3, #0]
		_b[i]=t_b[i];
 8009c10:	4a0f      	ldr	r2, [pc, #60]	; (8009c50 <graphic_updata+0x74>)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4413      	add	r3, r2
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	b2d9      	uxtb	r1, r3
 8009c1a:	4a0e      	ldr	r2, [pc, #56]	; (8009c54 <graphic_updata+0x78>)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4413      	add	r3, r2
 8009c20:	460a      	mov	r2, r1
 8009c22:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<_nled;i++)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3301      	adds	r3, #1
 8009c28:	607b      	str	r3, [r7, #4]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009c30:	dbda      	blt.n	8009be8 <graphic_updata+0xc>

	}
}
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	20002a48 	.word	0x20002a48
 8009c44:	200027c8 	.word	0x200027c8
 8009c48:	20001ae4 	.word	0x20001ae4
 8009c4c:	20001d64 	.word	0x20001d64
 8009c50:	20002ccc 	.word	0x20002ccc
 8009c54:	20002548 	.word	0x20002548

08009c58 <gradient_random>:




Color gradient_random(int step)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]

			while(RGB_color_change(&color_s,&color_d,step))
 8009c60:	e023      	b.n	8009caa <gradient_random+0x52>
			{
				color_s =color_d ;
 8009c62:	4b21      	ldr	r3, [pc, #132]	; (8009ce8 <gradient_random+0x90>)
 8009c64:	4a21      	ldr	r2, [pc, #132]	; (8009cec <gradient_random+0x94>)
 8009c66:	8811      	ldrh	r1, [r2, #0]
 8009c68:	7892      	ldrb	r2, [r2, #2]
 8009c6a:	8019      	strh	r1, [r3, #0]
 8009c6c:	709a      	strb	r2, [r3, #2]
				color_d =RGB_base_convert(1+rand()%7);
 8009c6e:	f001 fa27 	bl	800b0c0 <rand>
 8009c72:	4602      	mov	r2, r0
 8009c74:	4b1e      	ldr	r3, [pc, #120]	; (8009cf0 <gradient_random+0x98>)
 8009c76:	fb83 1302 	smull	r1, r3, r3, r2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	1099      	asrs	r1, r3, #2
 8009c7e:	17d3      	asrs	r3, r2, #31
 8009c80:	1ac9      	subs	r1, r1, r3
 8009c82:	460b      	mov	r3, r1
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	1a5b      	subs	r3, r3, r1
 8009c88:	1ad1      	subs	r1, r2, r3
 8009c8a:	b2cb      	uxtb	r3, r1
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 ffab 	bl	800abec <RGB_base_convert>
 8009c96:	4602      	mov	r2, r0
 8009c98:	4b14      	ldr	r3, [pc, #80]	; (8009cec <gradient_random+0x94>)
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	7019      	strb	r1, [r3, #0]
 8009c9e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009ca2:	7059      	strb	r1, [r3, #1]
 8009ca4:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8009ca8:	709a      	strb	r2, [r3, #2]
			while(RGB_color_change(&color_s,&color_d,step))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	461a      	mov	r2, r3
 8009cb0:	490e      	ldr	r1, [pc, #56]	; (8009cec <gradient_random+0x94>)
 8009cb2:	480d      	ldr	r0, [pc, #52]	; (8009ce8 <gradient_random+0x90>)
 8009cb4:	f000 fef3 	bl	800aa9e <RGB_color_change>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1d1      	bne.n	8009c62 <gradient_random+0xa>
			}
			return color_s;
 8009cbe:	4a0a      	ldr	r2, [pc, #40]	; (8009ce8 <gradient_random+0x90>)
 8009cc0:	f107 030c 	add.w	r3, r7, #12
 8009cc4:	8811      	ldrh	r1, [r2, #0]
 8009cc6:	7892      	ldrb	r2, [r2, #2]
 8009cc8:	8019      	strh	r1, [r3, #0]
 8009cca:	709a      	strb	r2, [r3, #2]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	7b3a      	ldrb	r2, [r7, #12]
 8009cd0:	f362 0307 	bfi	r3, r2, #0, #8
 8009cd4:	7b7a      	ldrb	r2, [r7, #13]
 8009cd6:	f362 230f 	bfi	r3, r2, #8, #8
 8009cda:	7bba      	ldrb	r2, [r7, #14]
 8009cdc:	f362 4317 	bfi	r3, r2, #16, #8
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	20002f60 	.word	0x20002f60
 8009cec:	20002f54 	.word	0x20002f54
 8009cf0:	92492493 	.word	0x92492493

08009cf4 <gradient_random2>:


Color gradient_random2(int step)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]

			while(RGB_color_change(&color_s2,&color_d2,step))
 8009cfc:	e023      	b.n	8009d46 <gradient_random2+0x52>
			{
				color_s2 =color_d2 ;
 8009cfe:	4b21      	ldr	r3, [pc, #132]	; (8009d84 <gradient_random2+0x90>)
 8009d00:	4a21      	ldr	r2, [pc, #132]	; (8009d88 <gradient_random2+0x94>)
 8009d02:	8811      	ldrh	r1, [r2, #0]
 8009d04:	7892      	ldrb	r2, [r2, #2]
 8009d06:	8019      	strh	r1, [r3, #0]
 8009d08:	709a      	strb	r2, [r3, #2]
				color_d2 =RGB_base_convert(1+rand()%7);
 8009d0a:	f001 f9d9 	bl	800b0c0 <rand>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	4b1e      	ldr	r3, [pc, #120]	; (8009d8c <gradient_random2+0x98>)
 8009d12:	fb83 1302 	smull	r1, r3, r3, r2
 8009d16:	4413      	add	r3, r2
 8009d18:	1099      	asrs	r1, r3, #2
 8009d1a:	17d3      	asrs	r3, r2, #31
 8009d1c:	1ac9      	subs	r1, r1, r3
 8009d1e:	460b      	mov	r3, r1
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	1a5b      	subs	r3, r3, r1
 8009d24:	1ad1      	subs	r1, r2, r3
 8009d26:	b2cb      	uxtb	r3, r1
 8009d28:	3301      	adds	r3, #1
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 ff5d 	bl	800abec <RGB_base_convert>
 8009d32:	4602      	mov	r2, r0
 8009d34:	4b14      	ldr	r3, [pc, #80]	; (8009d88 <gradient_random2+0x94>)
 8009d36:	4611      	mov	r1, r2
 8009d38:	7019      	strb	r1, [r3, #0]
 8009d3a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009d3e:	7059      	strb	r1, [r3, #1]
 8009d40:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8009d44:	709a      	strb	r2, [r3, #2]
			while(RGB_color_change(&color_s2,&color_d2,step))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	490e      	ldr	r1, [pc, #56]	; (8009d88 <gradient_random2+0x94>)
 8009d4e:	480d      	ldr	r0, [pc, #52]	; (8009d84 <gradient_random2+0x90>)
 8009d50:	f000 fea5 	bl	800aa9e <RGB_color_change>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1d1      	bne.n	8009cfe <gradient_random2+0xa>
			}
			return color_s2;
 8009d5a:	4a0a      	ldr	r2, [pc, #40]	; (8009d84 <gradient_random2+0x90>)
 8009d5c:	f107 030c 	add.w	r3, r7, #12
 8009d60:	8811      	ldrh	r1, [r2, #0]
 8009d62:	7892      	ldrb	r2, [r2, #2]
 8009d64:	8019      	strh	r1, [r3, #0]
 8009d66:	709a      	strb	r2, [r3, #2]
 8009d68:	2300      	movs	r3, #0
 8009d6a:	7b3a      	ldrb	r2, [r7, #12]
 8009d6c:	f362 0307 	bfi	r3, r2, #0, #8
 8009d70:	7b7a      	ldrb	r2, [r7, #13]
 8009d72:	f362 230f 	bfi	r3, r2, #8, #8
 8009d76:	7bba      	ldrb	r2, [r7, #14]
 8009d78:	f362 4317 	bfi	r3, r2, #16, #8
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	20002cc8 	.word	0x20002cc8
 8009d88:	20002f58 	.word	0x20002f58
 8009d8c:	92492493 	.word	0x92492493

08009d90 <color_random>:


Color color_random(uint8_t rate)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	4603      	mov	r3, r0
 8009d98:	71fb      	strb	r3, [r7, #7]
	Color _cl;
	if(rate<=0) rate = 1;
 8009d9a:	79fb      	ldrb	r3, [r7, #7]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <color_random+0x14>
 8009da0:	2301      	movs	r3, #1
 8009da2:	71fb      	strb	r3, [r7, #7]
	_cl = RGB_base_convert(rand()%8);
 8009da4:	f001 f98c 	bl	800b0c0 <rand>
 8009da8:	4603      	mov	r3, r0
 8009daa:	425a      	negs	r2, r3
 8009dac:	f003 0307 	and.w	r3, r3, #7
 8009db0:	f002 0207 	and.w	r2, r2, #7
 8009db4:	bf58      	it	pl
 8009db6:	4253      	negpl	r3, r2
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 ff16 	bl	800abec <RGB_base_convert>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	723a      	strb	r2, [r7, #8]
 8009dc6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009dca:	727a      	strb	r2, [r7, #9]
 8009dcc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009dd0:	72bb      	strb	r3, [r7, #10]
	_cl.b_cl /=rate;
 8009dd2:	7aba      	ldrb	r2, [r7, #10]
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	72bb      	strb	r3, [r7, #10]
	_cl.g_cl /=rate;
 8009dde:	7a7a      	ldrb	r2, [r7, #9]
 8009de0:	79fb      	ldrb	r3, [r7, #7]
 8009de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	727b      	strb	r3, [r7, #9]
	_cl.r_cl /=rate;
 8009dea:	7a3a      	ldrb	r2, [r7, #8]
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	723b      	strb	r3, [r7, #8]
	return _cl;
 8009df6:	f107 030c 	add.w	r3, r7, #12
 8009dfa:	f107 0208 	add.w	r2, r7, #8
 8009dfe:	6812      	ldr	r2, [r2, #0]
 8009e00:	4611      	mov	r1, r2
 8009e02:	8019      	strh	r1, [r3, #0]
 8009e04:	3302      	adds	r3, #2
 8009e06:	0c12      	lsrs	r2, r2, #16
 8009e08:	701a      	strb	r2, [r3, #0]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	7b3a      	ldrb	r2, [r7, #12]
 8009e0e:	f362 0307 	bfi	r3, r2, #0, #8
 8009e12:	7b7a      	ldrb	r2, [r7, #13]
 8009e14:	f362 230f 	bfi	r3, r2, #8, #8
 8009e18:	7bba      	ldrb	r2, [r7, #14]
 8009e1a:	f362 4317 	bfi	r3, r2, #16, #8
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <check_color_eq>:




int check_color_eq(Color cl1, Color cl2)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
	if((cl1.r_cl==cl2.r_cl)&&(cl1.g_cl==cl2.g_cl)&&(cl1.b_cl==cl2.b_cl)) return 1;
 8009e30:	793a      	ldrb	r2, [r7, #4]
 8009e32:	783b      	ldrb	r3, [r7, #0]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d109      	bne.n	8009e4c <check_color_eq+0x26>
 8009e38:	797a      	ldrb	r2, [r7, #5]
 8009e3a:	787b      	ldrb	r3, [r7, #1]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d105      	bne.n	8009e4c <check_color_eq+0x26>
 8009e40:	79ba      	ldrb	r2, [r7, #6]
 8009e42:	78bb      	ldrb	r3, [r7, #2]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d101      	bne.n	8009e4c <check_color_eq+0x26>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e000      	b.n	8009e4e <check_color_eq+0x28>
	return 0;
 8009e4c:	2300      	movs	r3, #0


}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bc80      	pop	{r7}
 8009e56:	4770      	bx	lr

08009e58 <load_map_h_2color_random>:


void load_map_h_2color_random(RGB_pointer point, uint8_t* map)
{
 8009e58:	b590      	push	{r4, r7, lr}
 8009e5a:	b08d      	sub	sp, #52	; 0x34
 8009e5c:	af02      	add	r7, sp, #8
 8009e5e:	1d3c      	adds	r4, r7, #4
 8009e60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e64:	603b      	str	r3, [r7, #0]
	uint8_t data,n;
	Color _cl,_cl2;
	do {
		_cl =color_random(1);
 8009e66:	2001      	movs	r0, #1
 8009e68:	f7ff ff92 	bl	8009d90 <color_random>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	461a      	mov	r2, r3
 8009e70:	763a      	strb	r2, [r7, #24]
 8009e72:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009e76:	767a      	strb	r2, [r7, #25]
 8009e78:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009e7c:	76bb      	strb	r3, [r7, #26]
		_cl2 = color_random(1);
 8009e7e:	2001      	movs	r0, #1
 8009e80:	f7ff ff86 	bl	8009d90 <color_random>
 8009e84:	4603      	mov	r3, r0
 8009e86:	461a      	mov	r2, r3
 8009e88:	753a      	strb	r2, [r7, #20]
 8009e8a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009e8e:	757a      	strb	r2, [r7, #21]
 8009e90:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009e94:	75bb      	strb	r3, [r7, #22]
		} while (check_color_eq(_cl2,_cl));
 8009e96:	69b9      	ldr	r1, [r7, #24]
 8009e98:	6978      	ldr	r0, [r7, #20]
 8009e9a:	f7ff ffc4 	bl	8009e26 <check_color_eq>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e0      	bne.n	8009e66 <load_map_h_2color_random+0xe>

	for(int i = 0;i<16;i++)
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ea8:	e04f      	b.n	8009f4a <load_map_h_2color_random+0xf2>
	{
		for(int j = 0;j<40;j++)
 8009eaa:	2300      	movs	r3, #0
 8009eac:	623b      	str	r3, [r7, #32]
 8009eae:	e046      	b.n	8009f3e <load_map_h_2color_random+0xe6>
		{
			data = (j/8)+(5*i);
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	da00      	bge.n	8009eb8 <load_map_h_2color_random+0x60>
 8009eb6:	3307      	adds	r3, #7
 8009eb8:	10db      	asrs	r3, r3, #3
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	0089      	lsls	r1, r1, #2
 8009ec4:	440b      	add	r3, r1
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	4413      	add	r3, r2
 8009eca:	77fb      	strb	r3, [r7, #31]
				n=j%8;
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	425a      	negs	r2, r3
 8009ed0:	f003 0307 	and.w	r3, r3, #7
 8009ed4:	f002 0207 	and.w	r2, r2, #7
 8009ed8:	bf58      	it	pl
 8009eda:	4253      	negpl	r3, r2
 8009edc:	77bb      	strb	r3, [r7, #30]
			if(map[data]&(1<<n))
 8009ede:	7ffb      	ldrb	r3, [r7, #31]
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	7fbb      	ldrb	r3, [r7, #30]
 8009eea:	fa42 f303 	asr.w	r3, r2, r3
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d010      	beq.n	8009f18 <load_map_h_2color_random+0xc0>
				{
					write_matrix(point, j, i,_cl);
 8009ef6:	ab01      	add	r3, sp, #4
 8009ef8:	f107 0218 	add.w	r2, r7, #24
 8009efc:	6812      	ldr	r2, [r2, #0]
 8009efe:	4611      	mov	r1, r2
 8009f00:	8019      	strh	r1, [r3, #0]
 8009f02:	3302      	adds	r3, #2
 8009f04:	0c12      	lsrs	r2, r2, #16
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	1d3a      	adds	r2, r7, #4
 8009f10:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f12:	f000 fbc1 	bl	800a698 <write_matrix>
 8009f16:	e00f      	b.n	8009f38 <load_map_h_2color_random+0xe0>
				}
			else write_matrix(point, j, i,_cl2);
 8009f18:	ab01      	add	r3, sp, #4
 8009f1a:	f107 0214 	add.w	r2, r7, #20
 8009f1e:	6812      	ldr	r2, [r2, #0]
 8009f20:	4611      	mov	r1, r2
 8009f22:	8019      	strh	r1, [r3, #0]
 8009f24:	3302      	adds	r3, #2
 8009f26:	0c12      	lsrs	r2, r2, #16
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	1d3a      	adds	r2, r7, #4
 8009f32:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f34:	f000 fbb0 	bl	800a698 <write_matrix>
		for(int j = 0;j<40;j++)
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	623b      	str	r3, [r7, #32]
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	2b27      	cmp	r3, #39	; 0x27
 8009f42:	ddb5      	ble.n	8009eb0 <load_map_h_2color_random+0x58>
	for(int i = 0;i<16;i++)
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	3301      	adds	r3, #1
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	2b0f      	cmp	r3, #15
 8009f4e:	ddac      	ble.n	8009eaa <load_map_h_2color_random+0x52>
		}
	}
}
 8009f50:	bf00      	nop
 8009f52:	bf00      	nop
 8009f54:	372c      	adds	r7, #44	; 0x2c
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd90      	pop	{r4, r7, pc}

08009f5a <load_map_h_gradian_random2>:



void load_map_h_gradian_random2(RGB_pointer point, uint8_t* map,Color (*color_gen)(int),Color (*color_gen2)(int), int step)
{
 8009f5a:	b590      	push	{r4, r7, lr}
 8009f5c:	b08d      	sub	sp, #52	; 0x34
 8009f5e:	af02      	add	r7, sp, #8
 8009f60:	1d3c      	adds	r4, r7, #4
 8009f62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f66:	603b      	str	r3, [r7, #0]
	uint8_t data,n;
	Color _cl,_cl2;
	for(int i = 0;i<16;i++)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f6c:	e06e      	b.n	800a04c <load_map_h_gradian_random2+0xf2>
	{
		do {
		_cl =color_gen(step);
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f70:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009f72:	4798      	blx	r3
 8009f74:	4603      	mov	r3, r0
 8009f76:	461a      	mov	r2, r3
 8009f78:	763a      	strb	r2, [r7, #24]
 8009f7a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009f7e:	767a      	strb	r2, [r7, #25]
 8009f80:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009f84:	76bb      	strb	r3, [r7, #26]
		_cl2 = color_gen2(step);
 8009f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f88:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009f8a:	4798      	blx	r3
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	461a      	mov	r2, r3
 8009f90:	753a      	strb	r2, [r7, #20]
 8009f92:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009f96:	757a      	strb	r2, [r7, #21]
 8009f98:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009f9c:	75bb      	strb	r3, [r7, #22]
		} while (check_color_eq(_cl2,_cl));
 8009f9e:	69b9      	ldr	r1, [r7, #24]
 8009fa0:	6978      	ldr	r0, [r7, #20]
 8009fa2:	f7ff ff40 	bl	8009e26 <check_color_eq>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1e0      	bne.n	8009f6e <load_map_h_gradian_random2+0x14>


		for(int j = 0;j<40;j++)
 8009fac:	2300      	movs	r3, #0
 8009fae:	623b      	str	r3, [r7, #32]
 8009fb0:	e046      	b.n	800a040 <load_map_h_gradian_random2+0xe6>
		{
			data = (j/8)+(5*i);
 8009fb2:	6a3b      	ldr	r3, [r7, #32]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	da00      	bge.n	8009fba <load_map_h_gradian_random2+0x60>
 8009fb8:	3307      	adds	r3, #7
 8009fba:	10db      	asrs	r3, r3, #3
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	0089      	lsls	r1, r1, #2
 8009fc6:	440b      	add	r3, r1
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	4413      	add	r3, r2
 8009fcc:	77fb      	strb	r3, [r7, #31]
				n=j%8;
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	425a      	negs	r2, r3
 8009fd2:	f003 0307 	and.w	r3, r3, #7
 8009fd6:	f002 0207 	and.w	r2, r2, #7
 8009fda:	bf58      	it	pl
 8009fdc:	4253      	negpl	r3, r2
 8009fde:	77bb      	strb	r3, [r7, #30]
			if(map[data]&(1<<n))
 8009fe0:	7ffb      	ldrb	r3, [r7, #31]
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	7fbb      	ldrb	r3, [r7, #30]
 8009fec:	fa42 f303 	asr.w	r3, r2, r3
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d010      	beq.n	800a01a <load_map_h_gradian_random2+0xc0>
				{
					write_matrix(point, j, i,_cl);
 8009ff8:	ab01      	add	r3, sp, #4
 8009ffa:	f107 0218 	add.w	r2, r7, #24
 8009ffe:	6812      	ldr	r2, [r2, #0]
 800a000:	4611      	mov	r1, r2
 800a002:	8019      	strh	r1, [r3, #0]
 800a004:	3302      	adds	r3, #2
 800a006:	0c12      	lsrs	r2, r2, #16
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	1d3a      	adds	r2, r7, #4
 800a012:	ca07      	ldmia	r2, {r0, r1, r2}
 800a014:	f000 fb40 	bl	800a698 <write_matrix>
 800a018:	e00f      	b.n	800a03a <load_map_h_gradian_random2+0xe0>
				}
			else write_matrix(point, j, i,_cl2);
 800a01a:	ab01      	add	r3, sp, #4
 800a01c:	f107 0214 	add.w	r2, r7, #20
 800a020:	6812      	ldr	r2, [r2, #0]
 800a022:	4611      	mov	r1, r2
 800a024:	8019      	strh	r1, [r3, #0]
 800a026:	3302      	adds	r3, #2
 800a028:	0c12      	lsrs	r2, r2, #16
 800a02a:	701a      	strb	r2, [r3, #0]
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	1d3a      	adds	r2, r7, #4
 800a034:	ca07      	ldmia	r2, {r0, r1, r2}
 800a036:	f000 fb2f 	bl	800a698 <write_matrix>
		for(int j = 0;j<40;j++)
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	3301      	adds	r3, #1
 800a03e:	623b      	str	r3, [r7, #32]
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	2b27      	cmp	r3, #39	; 0x27
 800a044:	ddb5      	ble.n	8009fb2 <load_map_h_gradian_random2+0x58>
	for(int i = 0;i<16;i++)
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	3301      	adds	r3, #1
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
 800a04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04e:	2b0f      	cmp	r3, #15
 800a050:	dd8d      	ble.n	8009f6e <load_map_h_gradian_random2+0x14>
		}
	}
}
 800a052:	bf00      	nop
 800a054:	bf00      	nop
 800a056:	372c      	adds	r7, #44	; 0x2c
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd90      	pop	{r4, r7, pc}

0800a05c <load_map_h_gradian>:




void load_map_h_gradian(RGB_pointer point, uint8_t* map,Color backgroud, int step, int inv)
{
 800a05c:	b590      	push	{r4, r7, lr}
 800a05e:	b08d      	sub	sp, #52	; 0x34
 800a060:	af02      	add	r7, sp, #8
 800a062:	1d3c      	adds	r4, r7, #4
 800a064:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a068:	603b      	str	r3, [r7, #0]
	uint8_t data,n;
	Color _cl,_cl2;
	for(int i = 0;i<16;i++)
 800a06a:	2300      	movs	r3, #0
 800a06c:	627b      	str	r3, [r7, #36]	; 0x24
 800a06e:	e07f      	b.n	800a170 <load_map_h_gradian+0x114>
	{

		if(inv)  {
 800a070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a072:	2b00      	cmp	r3, #0
 800a074:	d016      	beq.n	800a0a4 <load_map_h_gradian+0x48>
				_cl = gradient_random(step);
 800a076:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a078:	f7ff fdee 	bl	8009c58 <gradient_random>
 800a07c:	4603      	mov	r3, r0
 800a07e:	461a      	mov	r2, r3
 800a080:	763a      	strb	r2, [r7, #24]
 800a082:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a086:	767a      	strb	r2, [r7, #25]
 800a088:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a08c:	76bb      	strb	r3, [r7, #26]
				_cl2 = backgroud;
 800a08e:	f107 0314 	add.w	r3, r7, #20
 800a092:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a096:	6812      	ldr	r2, [r2, #0]
 800a098:	4611      	mov	r1, r2
 800a09a:	8019      	strh	r1, [r3, #0]
 800a09c:	3302      	adds	r3, #2
 800a09e:	0c12      	lsrs	r2, r2, #16
 800a0a0:	701a      	strb	r2, [r3, #0]
 800a0a2:	e015      	b.n	800a0d0 <load_map_h_gradian+0x74>

			}
		else	{
				_cl2 = gradient_random(step);
 800a0a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a0a6:	f7ff fdd7 	bl	8009c58 <gradient_random>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	753a      	strb	r2, [r7, #20]
 800a0b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a0b4:	757a      	strb	r2, [r7, #21]
 800a0b6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a0ba:	75bb      	strb	r3, [r7, #22]
				_cl = backgroud;
 800a0bc:	f107 0318 	add.w	r3, r7, #24
 800a0c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a0c4:	6812      	ldr	r2, [r2, #0]
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	8019      	strh	r1, [r3, #0]
 800a0ca:	3302      	adds	r3, #2
 800a0cc:	0c12      	lsrs	r2, r2, #16
 800a0ce:	701a      	strb	r2, [r3, #0]
			}

		for(int j = 0;j<40;j++)
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	623b      	str	r3, [r7, #32]
 800a0d4:	e046      	b.n	800a164 <load_map_h_gradian+0x108>
		{
			data = (j/8)+(5*i);
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	da00      	bge.n	800a0de <load_map_h_gradian+0x82>
 800a0dc:	3307      	adds	r3, #7
 800a0de:	10db      	asrs	r3, r3, #3
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	0089      	lsls	r1, r1, #2
 800a0ea:	440b      	add	r3, r1
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	4413      	add	r3, r2
 800a0f0:	77fb      	strb	r3, [r7, #31]
				n=j%8;
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	425a      	negs	r2, r3
 800a0f6:	f003 0307 	and.w	r3, r3, #7
 800a0fa:	f002 0207 	and.w	r2, r2, #7
 800a0fe:	bf58      	it	pl
 800a100:	4253      	negpl	r3, r2
 800a102:	77bb      	strb	r3, [r7, #30]
			if(map[data]&(1<<n))
 800a104:	7ffb      	ldrb	r3, [r7, #31]
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	4413      	add	r3, r2
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	461a      	mov	r2, r3
 800a10e:	7fbb      	ldrb	r3, [r7, #30]
 800a110:	fa42 f303 	asr.w	r3, r2, r3
 800a114:	f003 0301 	and.w	r3, r3, #1
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d010      	beq.n	800a13e <load_map_h_gradian+0xe2>
				{
					write_matrix(point, j, i,_cl);
 800a11c:	ab01      	add	r3, sp, #4
 800a11e:	f107 0218 	add.w	r2, r7, #24
 800a122:	6812      	ldr	r2, [r2, #0]
 800a124:	4611      	mov	r1, r2
 800a126:	8019      	strh	r1, [r3, #0]
 800a128:	3302      	adds	r3, #2
 800a12a:	0c12      	lsrs	r2, r2, #16
 800a12c:	701a      	strb	r2, [r3, #0]
 800a12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	1d3a      	adds	r2, r7, #4
 800a136:	ca07      	ldmia	r2, {r0, r1, r2}
 800a138:	f000 faae 	bl	800a698 <write_matrix>
 800a13c:	e00f      	b.n	800a15e <load_map_h_gradian+0x102>
				}
			else	write_matrix(point, j, i,_cl2);
 800a13e:	ab01      	add	r3, sp, #4
 800a140:	f107 0214 	add.w	r2, r7, #20
 800a144:	6812      	ldr	r2, [r2, #0]
 800a146:	4611      	mov	r1, r2
 800a148:	8019      	strh	r1, [r3, #0]
 800a14a:	3302      	adds	r3, #2
 800a14c:	0c12      	lsrs	r2, r2, #16
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	1d3a      	adds	r2, r7, #4
 800a158:	ca07      	ldmia	r2, {r0, r1, r2}
 800a15a:	f000 fa9d 	bl	800a698 <write_matrix>
		for(int j = 0;j<40;j++)
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	3301      	adds	r3, #1
 800a162:	623b      	str	r3, [r7, #32]
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	2b27      	cmp	r3, #39	; 0x27
 800a168:	ddb5      	ble.n	800a0d6 <load_map_h_gradian+0x7a>
	for(int i = 0;i<16;i++)
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	3301      	adds	r3, #1
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	2b0f      	cmp	r3, #15
 800a174:	f77f af7c 	ble.w	800a070 <load_map_h_gradian+0x14>
		}
	}
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	372c      	adds	r7, #44	; 0x2c
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd90      	pop	{r4, r7, pc}

0800a182 <load_map_v_gradianx>:



void load_map_v_gradianx(RGB_pointer point, uint8_t* map,Color backgroud, int step,int inv)
{
 800a182:	b590      	push	{r4, r7, lr}
 800a184:	b08f      	sub	sp, #60	; 0x3c
 800a186:	af02      	add	r7, sp, #8
 800a188:	1d3c      	adds	r4, r7, #4
 800a18a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a18e:	603b      	str	r3, [r7, #0]
	int lsb, msb,data;
	Color _cl,_cl2;
	for(int i = 0;i<40;i++)
 800a190:	2300      	movs	r3, #0
 800a192:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a194:	e077      	b.n	800a286 <load_map_v_gradianx+0x104>
	{
	if(inv)  {
 800a196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d016      	beq.n	800a1ca <load_map_v_gradianx+0x48>
				_cl = gradient_random(step);
 800a19c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a19e:	f7ff fd5b 	bl	8009c58 <gradient_random>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	763a      	strb	r2, [r7, #24]
 800a1a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a1ac:	767a      	strb	r2, [r7, #25]
 800a1ae:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a1b2:	76bb      	strb	r3, [r7, #26]
				_cl2 = backgroud;
 800a1b4:	f107 0314 	add.w	r3, r7, #20
 800a1b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a1bc:	6812      	ldr	r2, [r2, #0]
 800a1be:	4611      	mov	r1, r2
 800a1c0:	8019      	strh	r1, [r3, #0]
 800a1c2:	3302      	adds	r3, #2
 800a1c4:	0c12      	lsrs	r2, r2, #16
 800a1c6:	701a      	strb	r2, [r3, #0]
 800a1c8:	e015      	b.n	800a1f6 <load_map_v_gradianx+0x74>

			}
		else	{
				_cl2 = gradient_random(step);
 800a1ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a1cc:	f7ff fd44 	bl	8009c58 <gradient_random>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	753a      	strb	r2, [r7, #20]
 800a1d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a1da:	757a      	strb	r2, [r7, #21]
 800a1dc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a1e0:	75bb      	strb	r3, [r7, #22]
				_cl = backgroud;
 800a1e2:	f107 0318 	add.w	r3, r7, #24
 800a1e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a1ea:	6812      	ldr	r2, [r2, #0]
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	8019      	strh	r1, [r3, #0]
 800a1f0:	3302      	adds	r3, #2
 800a1f2:	0c12      	lsrs	r2, r2, #16
 800a1f4:	701a      	strb	r2, [r3, #0]
			}

		lsb= map[i*2];
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	4413      	add	r3, r2
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
		msb = map[(i*2)+1];
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a206:	005b      	lsls	r3, r3, #1
 800a208:	3301      	adds	r3, #1
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	4413      	add	r3, r2
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	623b      	str	r3, [r7, #32]
		data = lsb|(msb<<8);
 800a212:	6a3b      	ldr	r3, [r7, #32]
 800a214:	021b      	lsls	r3, r3, #8
 800a216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a218:	4313      	orrs	r3, r2
 800a21a:	61fb      	str	r3, [r7, #28]
		for(int j = 0;j<16;j++)
 800a21c:	2300      	movs	r3, #0
 800a21e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a220:	e02b      	b.n	800a27a <load_map_v_gradianx+0xf8>
		{

			if(data&(1<<j)) write_matrix(point, i, j, _cl);
 800a222:	69fa      	ldr	r2, [r7, #28]
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	fa42 f303 	asr.w	r3, r2, r3
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d010      	beq.n	800a254 <load_map_v_gradianx+0xd2>
 800a232:	ab01      	add	r3, sp, #4
 800a234:	f107 0218 	add.w	r2, r7, #24
 800a238:	6812      	ldr	r2, [r2, #0]
 800a23a:	4611      	mov	r1, r2
 800a23c:	8019      	strh	r1, [r3, #0]
 800a23e:	3302      	adds	r3, #2
 800a240:	0c12      	lsrs	r2, r2, #16
 800a242:	701a      	strb	r2, [r3, #0]
 800a244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24a:	1d3a      	adds	r2, r7, #4
 800a24c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a24e:	f000 fa23 	bl	800a698 <write_matrix>
 800a252:	e00f      	b.n	800a274 <load_map_v_gradianx+0xf2>
			else write_matrix(point, i, j, _cl2);
 800a254:	ab01      	add	r3, sp, #4
 800a256:	f107 0214 	add.w	r2, r7, #20
 800a25a:	6812      	ldr	r2, [r2, #0]
 800a25c:	4611      	mov	r1, r2
 800a25e:	8019      	strh	r1, [r3, #0]
 800a260:	3302      	adds	r3, #2
 800a262:	0c12      	lsrs	r2, r2, #16
 800a264:	701a      	strb	r2, [r3, #0]
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	1d3a      	adds	r2, r7, #4
 800a26e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a270:	f000 fa12 	bl	800a698 <write_matrix>
		for(int j = 0;j<16;j++)
 800a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a276:	3301      	adds	r3, #1
 800a278:	62bb      	str	r3, [r7, #40]	; 0x28
 800a27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27c:	2b0f      	cmp	r3, #15
 800a27e:	ddd0      	ble.n	800a222 <load_map_v_gradianx+0xa0>
	for(int i = 0;i<40;i++)
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	3301      	adds	r3, #1
 800a284:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	2b27      	cmp	r3, #39	; 0x27
 800a28a:	dd84      	ble.n	800a196 <load_map_v_gradianx+0x14>
		}
	}
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	3734      	adds	r7, #52	; 0x34
 800a292:	46bd      	mov	sp, r7
 800a294:	bd90      	pop	{r4, r7, pc}
	...

0800a298 <sun_in>:
        }

    }


void sun_in(int hold){
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08c      	sub	sp, #48	; 0x30
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<16; i++){
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a4:	e05f      	b.n	800a366 <sun_in+0xce>
		if(RGB_color_change(&cls,&cld,1)!=0)
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	4933      	ldr	r1, [pc, #204]	; (800a378 <sun_in+0xe0>)
 800a2aa:	4834      	ldr	r0, [pc, #208]	; (800a37c <sun_in+0xe4>)
 800a2ac:	f000 fbf7 	bl	800aa9e <RGB_color_change>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d023      	beq.n	800a2fe <sun_in+0x66>
		{
			cls = temp;
 800a2b6:	4b31      	ldr	r3, [pc, #196]	; (800a37c <sun_in+0xe4>)
 800a2b8:	4a31      	ldr	r2, [pc, #196]	; (800a380 <sun_in+0xe8>)
 800a2ba:	8811      	ldrh	r1, [r2, #0]
 800a2bc:	7892      	ldrb	r2, [r2, #2]
 800a2be:	8019      	strh	r1, [r3, #0]
 800a2c0:	709a      	strb	r2, [r3, #2]
			cld =RGB_base_convert((rand()%8));
 800a2c2:	f000 fefd 	bl	800b0c0 <rand>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	425a      	negs	r2, r3
 800a2ca:	f003 0307 	and.w	r3, r3, #7
 800a2ce:	f002 0207 	and.w	r2, r2, #7
 800a2d2:	bf58      	it	pl
 800a2d4:	4253      	negpl	r3, r2
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 fc87 	bl	800abec <RGB_base_convert>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	4b25      	ldr	r3, [pc, #148]	; (800a378 <sun_in+0xe0>)
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	7019      	strb	r1, [r3, #0]
 800a2e6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a2ea:	7059      	strb	r1, [r3, #1]
 800a2ec:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800a2f0:	709a      	strb	r2, [r3, #2]
			temp = cld;
 800a2f2:	4b23      	ldr	r3, [pc, #140]	; (800a380 <sun_in+0xe8>)
 800a2f4:	4a20      	ldr	r2, [pc, #128]	; (800a378 <sun_in+0xe0>)
 800a2f6:	8811      	ldrh	r1, [r2, #0]
 800a2f8:	7892      	ldrb	r2, [r2, #2]
 800a2fa:	8019      	strh	r1, [r3, #0]
 800a2fc:	709a      	strb	r2, [r3, #2]
		}
		rota_mx_ud(point_to(&_r,&_g,&_b),1,0);
 800a2fe:	f107 0008 	add.w	r0, r7, #8
 800a302:	4b20      	ldr	r3, [pc, #128]	; (800a384 <sun_in+0xec>)
 800a304:	4a20      	ldr	r2, [pc, #128]	; (800a388 <sun_in+0xf0>)
 800a306:	4921      	ldr	r1, [pc, #132]	; (800a38c <sun_in+0xf4>)
 800a308:	f000 fcde 	bl	800acc8 <point_to>
 800a30c:	2300      	movs	r3, #0
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	2301      	movs	r3, #1
 800a312:	f107 0208 	add.w	r2, r7, #8
 800a316:	ca07      	ldmia	r2, {r0, r1, r2}
 800a318:	f000 faf9 	bl	800a90e <rota_mx_ud>
	for(int j=0;j<40;j++){
 800a31c:	2300      	movs	r3, #0
 800a31e:	623b      	str	r3, [r7, #32]
 800a320:	e017      	b.n	800a352 <sun_in+0xba>
	write_matrix(point_to(&_r,&_g,&_b),j,15,cls);
 800a322:	f107 0014 	add.w	r0, r7, #20
 800a326:	4b17      	ldr	r3, [pc, #92]	; (800a384 <sun_in+0xec>)
 800a328:	4a17      	ldr	r2, [pc, #92]	; (800a388 <sun_in+0xf0>)
 800a32a:	4918      	ldr	r1, [pc, #96]	; (800a38c <sun_in+0xf4>)
 800a32c:	f000 fccc 	bl	800acc8 <point_to>
 800a330:	4a12      	ldr	r2, [pc, #72]	; (800a37c <sun_in+0xe4>)
 800a332:	ab01      	add	r3, sp, #4
 800a334:	8811      	ldrh	r1, [r2, #0]
 800a336:	7892      	ldrb	r2, [r2, #2]
 800a338:	8019      	strh	r1, [r3, #0]
 800a33a:	709a      	strb	r2, [r3, #2]
 800a33c:	230f      	movs	r3, #15
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	6a3b      	ldr	r3, [r7, #32]
 800a342:	f107 0214 	add.w	r2, r7, #20
 800a346:	ca07      	ldmia	r2, {r0, r1, r2}
 800a348:	f000 f9a6 	bl	800a698 <write_matrix>
	for(int j=0;j<40;j++){
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	3301      	adds	r3, #1
 800a350:	623b      	str	r3, [r7, #32]
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	2b27      	cmp	r3, #39	; 0x27
 800a356:	dde4      	ble.n	800a322 <sun_in+0x8a>

		}
		HAL_Delay(hold);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7f6 fce0 	bl	8000d20 <HAL_Delay>
	for(int i = 0; i<16; i++){
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	3301      	adds	r3, #1
 800a364:	627b      	str	r3, [r7, #36]	; 0x24
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a368:	2b0f      	cmp	r3, #15
 800a36a:	dd9c      	ble.n	800a2a6 <sun_in+0xe>
	}
}
 800a36c:	bf00      	nop
 800a36e:	bf00      	nop
 800a370:	3728      	adds	r7, #40	; 0x28
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20002034 	.word	0x20002034
 800a37c:	20002f64 	.word	0x20002f64
 800a380:	20002040 	.word	0x20002040
 800a384:	20002548 	.word	0x20002548
 800a388:	20001d64 	.word	0x20001d64
 800a38c:	200027c8 	.word	0x200027c8

0800a390 <sun_ou>:

void sun_ou(int hold){
 800a390:	b580      	push	{r7, lr}
 800a392:	b08c      	sub	sp, #48	; 0x30
 800a394:	af02      	add	r7, sp, #8
 800a396:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<16; i++){
 800a398:	2300      	movs	r3, #0
 800a39a:	627b      	str	r3, [r7, #36]	; 0x24
 800a39c:	e065      	b.n	800a46a <sun_ou+0xda>
			if(RGB_color_change(&cls,&cld,1)!=0)
 800a39e:	2201      	movs	r2, #1
 800a3a0:	4936      	ldr	r1, [pc, #216]	; (800a47c <sun_ou+0xec>)
 800a3a2:	4837      	ldr	r0, [pc, #220]	; (800a480 <sun_ou+0xf0>)
 800a3a4:	f000 fb7b 	bl	800aa9e <RGB_color_change>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d029      	beq.n	800a402 <sun_ou+0x72>
			{
				cls = temp;
 800a3ae:	4b34      	ldr	r3, [pc, #208]	; (800a480 <sun_ou+0xf0>)
 800a3b0:	4a34      	ldr	r2, [pc, #208]	; (800a484 <sun_ou+0xf4>)
 800a3b2:	8811      	ldrh	r1, [r2, #0]
 800a3b4:	7892      	ldrb	r2, [r2, #2]
 800a3b6:	8019      	strh	r1, [r3, #0]
 800a3b8:	709a      	strb	r2, [r3, #2]
				cld =RGB_base_convert(1+(rand()%7));
 800a3ba:	f000 fe81 	bl	800b0c0 <rand>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	4b31      	ldr	r3, [pc, #196]	; (800a488 <sun_ou+0xf8>)
 800a3c2:	fb83 1302 	smull	r1, r3, r3, r2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	1099      	asrs	r1, r3, #2
 800a3ca:	17d3      	asrs	r3, r2, #31
 800a3cc:	1ac9      	subs	r1, r1, r3
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	00db      	lsls	r3, r3, #3
 800a3d2:	1a5b      	subs	r3, r3, r1
 800a3d4:	1ad1      	subs	r1, r2, r3
 800a3d6:	b2cb      	uxtb	r3, r1
 800a3d8:	3301      	adds	r3, #1
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f000 fc05 	bl	800abec <RGB_base_convert>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	4b25      	ldr	r3, [pc, #148]	; (800a47c <sun_ou+0xec>)
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	7019      	strb	r1, [r3, #0]
 800a3ea:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a3ee:	7059      	strb	r1, [r3, #1]
 800a3f0:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800a3f4:	709a      	strb	r2, [r3, #2]
				temp = cld;
 800a3f6:	4b23      	ldr	r3, [pc, #140]	; (800a484 <sun_ou+0xf4>)
 800a3f8:	4a20      	ldr	r2, [pc, #128]	; (800a47c <sun_ou+0xec>)
 800a3fa:	8811      	ldrh	r1, [r2, #0]
 800a3fc:	7892      	ldrb	r2, [r2, #2]
 800a3fe:	8019      	strh	r1, [r3, #0]
 800a400:	709a      	strb	r2, [r3, #2]
			}
		rota_mx_ud(point_to(&_r,&_g,&_b),0,0);
 800a402:	f107 0008 	add.w	r0, r7, #8
 800a406:	4b21      	ldr	r3, [pc, #132]	; (800a48c <sun_ou+0xfc>)
 800a408:	4a21      	ldr	r2, [pc, #132]	; (800a490 <sun_ou+0x100>)
 800a40a:	4922      	ldr	r1, [pc, #136]	; (800a494 <sun_ou+0x104>)
 800a40c:	f000 fc5c 	bl	800acc8 <point_to>
 800a410:	2300      	movs	r3, #0
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	2300      	movs	r3, #0
 800a416:	f107 0208 	add.w	r2, r7, #8
 800a41a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a41c:	f000 fa77 	bl	800a90e <rota_mx_ud>
		for(int j=0;j<40;j++){
 800a420:	2300      	movs	r3, #0
 800a422:	623b      	str	r3, [r7, #32]
 800a424:	e017      	b.n	800a456 <sun_ou+0xc6>
		write_matrix(point_to(&_r,&_g,&_b),j,0,cls);
 800a426:	f107 0014 	add.w	r0, r7, #20
 800a42a:	4b18      	ldr	r3, [pc, #96]	; (800a48c <sun_ou+0xfc>)
 800a42c:	4a18      	ldr	r2, [pc, #96]	; (800a490 <sun_ou+0x100>)
 800a42e:	4919      	ldr	r1, [pc, #100]	; (800a494 <sun_ou+0x104>)
 800a430:	f000 fc4a 	bl	800acc8 <point_to>
 800a434:	4a12      	ldr	r2, [pc, #72]	; (800a480 <sun_ou+0xf0>)
 800a436:	ab01      	add	r3, sp, #4
 800a438:	8811      	ldrh	r1, [r2, #0]
 800a43a:	7892      	ldrb	r2, [r2, #2]
 800a43c:	8019      	strh	r1, [r3, #0]
 800a43e:	709a      	strb	r2, [r3, #2]
 800a440:	2300      	movs	r3, #0
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	f107 0214 	add.w	r2, r7, #20
 800a44a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a44c:	f000 f924 	bl	800a698 <write_matrix>
		for(int j=0;j<40;j++){
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	3301      	adds	r3, #1
 800a454:	623b      	str	r3, [r7, #32]
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	2b27      	cmp	r3, #39	; 0x27
 800a45a:	dde4      	ble.n	800a426 <sun_ou+0x96>
			}
		HAL_Delay(hold);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4618      	mov	r0, r3
 800a460:	f7f6 fc5e 	bl	8000d20 <HAL_Delay>
	for(int i = 0; i<16; i++){
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	3301      	adds	r3, #1
 800a468:	627b      	str	r3, [r7, #36]	; 0x24
 800a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46c:	2b0f      	cmp	r3, #15
 800a46e:	dd96      	ble.n	800a39e <sun_ou+0xe>
		}
}
 800a470:	bf00      	nop
 800a472:	bf00      	nop
 800a474:	3728      	adds	r7, #40	; 0x28
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20002034 	.word	0x20002034
 800a480:	20002f64 	.word	0x20002f64
 800a484:	20002040 	.word	0x20002040
 800a488:	92492493 	.word	0x92492493
 800a48c:	20002548 	.word	0x20002548
 800a490:	20001d64 	.word	0x20001d64
 800a494:	200027c8 	.word	0x200027c8

0800a498 <galaxy_in>:

void galaxy_in(void){
 800a498:	b580      	push	{r7, lr}
 800a49a:	b08a      	sub	sp, #40	; 0x28
 800a49c:	af02      	add	r7, sp, #8
	for(int i = 0; i<16; i++){
 800a49e:	2300      	movs	r3, #0
 800a4a0:	61fb      	str	r3, [r7, #28]
 800a4a2:	e062      	b.n	800a56a <galaxy_in+0xd2>
		if(RGB_color_change(&cls,&cld,1)!=0)
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	4935      	ldr	r1, [pc, #212]	; (800a57c <galaxy_in+0xe4>)
 800a4a8:	4835      	ldr	r0, [pc, #212]	; (800a580 <galaxy_in+0xe8>)
 800a4aa:	f000 faf8 	bl	800aa9e <RGB_color_change>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d029      	beq.n	800a508 <galaxy_in+0x70>
		{
			cls = temp;
 800a4b4:	4b32      	ldr	r3, [pc, #200]	; (800a580 <galaxy_in+0xe8>)
 800a4b6:	4a33      	ldr	r2, [pc, #204]	; (800a584 <galaxy_in+0xec>)
 800a4b8:	8811      	ldrh	r1, [r2, #0]
 800a4ba:	7892      	ldrb	r2, [r2, #2]
 800a4bc:	8019      	strh	r1, [r3, #0]
 800a4be:	709a      	strb	r2, [r3, #2]
			cld =RGB_base_convert(1+(rand()%7));
 800a4c0:	f000 fdfe 	bl	800b0c0 <rand>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	4b30      	ldr	r3, [pc, #192]	; (800a588 <galaxy_in+0xf0>)
 800a4c8:	fb83 1302 	smull	r1, r3, r3, r2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	1099      	asrs	r1, r3, #2
 800a4d0:	17d3      	asrs	r3, r2, #31
 800a4d2:	1ac9      	subs	r1, r1, r3
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	1a5b      	subs	r3, r3, r1
 800a4da:	1ad1      	subs	r1, r2, r3
 800a4dc:	b2cb      	uxtb	r3, r1
 800a4de:	3301      	adds	r3, #1
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 fb82 	bl	800abec <RGB_base_convert>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	4b24      	ldr	r3, [pc, #144]	; (800a57c <galaxy_in+0xe4>)
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	7019      	strb	r1, [r3, #0]
 800a4f0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a4f4:	7059      	strb	r1, [r3, #1]
 800a4f6:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800a4fa:	709a      	strb	r2, [r3, #2]
			temp = cld;
 800a4fc:	4b21      	ldr	r3, [pc, #132]	; (800a584 <galaxy_in+0xec>)
 800a4fe:	4a1f      	ldr	r2, [pc, #124]	; (800a57c <galaxy_in+0xe4>)
 800a500:	8811      	ldrh	r1, [r2, #0]
 800a502:	7892      	ldrb	r2, [r2, #2]
 800a504:	8019      	strh	r1, [r3, #0]
 800a506:	709a      	strb	r2, [r3, #2]
		}
	for(int j=0;j<40;j++){
 800a508:	2300      	movs	r3, #0
 800a50a:	61bb      	str	r3, [r7, #24]
 800a50c:	e027      	b.n	800a55e <galaxy_in+0xc6>
	rota_mx_ud(point_to(&_r,&_g,&_b),0,1);
 800a50e:	4638      	mov	r0, r7
 800a510:	4b1e      	ldr	r3, [pc, #120]	; (800a58c <galaxy_in+0xf4>)
 800a512:	4a1f      	ldr	r2, [pc, #124]	; (800a590 <galaxy_in+0xf8>)
 800a514:	491f      	ldr	r1, [pc, #124]	; (800a594 <galaxy_in+0xfc>)
 800a516:	f000 fbd7 	bl	800acc8 <point_to>
 800a51a:	2301      	movs	r3, #1
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	2300      	movs	r3, #0
 800a520:	463a      	mov	r2, r7
 800a522:	ca07      	ldmia	r2, {r0, r1, r2}
 800a524:	f000 f9f3 	bl	800a90e <rota_mx_ud>
	write_matrix(point_to(&_r,&_g,&_b),j,0,cls);
 800a528:	f107 000c 	add.w	r0, r7, #12
 800a52c:	4b17      	ldr	r3, [pc, #92]	; (800a58c <galaxy_in+0xf4>)
 800a52e:	4a18      	ldr	r2, [pc, #96]	; (800a590 <galaxy_in+0xf8>)
 800a530:	4918      	ldr	r1, [pc, #96]	; (800a594 <galaxy_in+0xfc>)
 800a532:	f000 fbc9 	bl	800acc8 <point_to>
 800a536:	4a12      	ldr	r2, [pc, #72]	; (800a580 <galaxy_in+0xe8>)
 800a538:	ab01      	add	r3, sp, #4
 800a53a:	8811      	ldrh	r1, [r2, #0]
 800a53c:	7892      	ldrb	r2, [r2, #2]
 800a53e:	8019      	strh	r1, [r3, #0]
 800a540:	709a      	strb	r2, [r3, #2]
 800a542:	2300      	movs	r3, #0
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	f107 020c 	add.w	r2, r7, #12
 800a54c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a54e:	f000 f8a3 	bl	800a698 <write_matrix>
	HAL_Delay(50);
 800a552:	2032      	movs	r0, #50	; 0x32
 800a554:	f7f6 fbe4 	bl	8000d20 <HAL_Delay>
	for(int j=0;j<40;j++){
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	3301      	adds	r3, #1
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	2b27      	cmp	r3, #39	; 0x27
 800a562:	ddd4      	ble.n	800a50e <galaxy_in+0x76>
	for(int i = 0; i<16; i++){
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	3301      	adds	r3, #1
 800a568:	61fb      	str	r3, [r7, #28]
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	2b0f      	cmp	r3, #15
 800a56e:	dd99      	ble.n	800a4a4 <galaxy_in+0xc>
		}
	}
}
 800a570:	bf00      	nop
 800a572:	bf00      	nop
 800a574:	3720      	adds	r7, #32
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20002034 	.word	0x20002034
 800a580:	20002f64 	.word	0x20002f64
 800a584:	20002040 	.word	0x20002040
 800a588:	92492493 	.word	0x92492493
 800a58c:	20002548 	.word	0x20002548
 800a590:	20001d64 	.word	0x20001d64
 800a594:	200027c8 	.word	0x200027c8

0800a598 <galaxy_ou>:


void galaxy_ou(void){
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08a      	sub	sp, #40	; 0x28
 800a59c:	af02      	add	r7, sp, #8
	for(int i = 0; i<16; i++){
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61fb      	str	r3, [r7, #28]
 800a5a2:	e062      	b.n	800a66a <galaxy_ou+0xd2>
		if(RGB_color_change(&cls,&cld,1)!=0)
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	4935      	ldr	r1, [pc, #212]	; (800a67c <galaxy_ou+0xe4>)
 800a5a8:	4835      	ldr	r0, [pc, #212]	; (800a680 <galaxy_ou+0xe8>)
 800a5aa:	f000 fa78 	bl	800aa9e <RGB_color_change>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d029      	beq.n	800a608 <galaxy_ou+0x70>
		{
			cls = temp;
 800a5b4:	4b32      	ldr	r3, [pc, #200]	; (800a680 <galaxy_ou+0xe8>)
 800a5b6:	4a33      	ldr	r2, [pc, #204]	; (800a684 <galaxy_ou+0xec>)
 800a5b8:	8811      	ldrh	r1, [r2, #0]
 800a5ba:	7892      	ldrb	r2, [r2, #2]
 800a5bc:	8019      	strh	r1, [r3, #0]
 800a5be:	709a      	strb	r2, [r3, #2]
			cld =RGB_base_convert(1+(rand()%7));
 800a5c0:	f000 fd7e 	bl	800b0c0 <rand>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	4b30      	ldr	r3, [pc, #192]	; (800a688 <galaxy_ou+0xf0>)
 800a5c8:	fb83 1302 	smull	r1, r3, r3, r2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	1099      	asrs	r1, r3, #2
 800a5d0:	17d3      	asrs	r3, r2, #31
 800a5d2:	1ac9      	subs	r1, r1, r3
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	00db      	lsls	r3, r3, #3
 800a5d8:	1a5b      	subs	r3, r3, r1
 800a5da:	1ad1      	subs	r1, r2, r3
 800a5dc:	b2cb      	uxtb	r3, r1
 800a5de:	3301      	adds	r3, #1
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 fb02 	bl	800abec <RGB_base_convert>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	4b24      	ldr	r3, [pc, #144]	; (800a67c <galaxy_ou+0xe4>)
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	7019      	strb	r1, [r3, #0]
 800a5f0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a5f4:	7059      	strb	r1, [r3, #1]
 800a5f6:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800a5fa:	709a      	strb	r2, [r3, #2]
			temp = cld;
 800a5fc:	4b21      	ldr	r3, [pc, #132]	; (800a684 <galaxy_ou+0xec>)
 800a5fe:	4a1f      	ldr	r2, [pc, #124]	; (800a67c <galaxy_ou+0xe4>)
 800a600:	8811      	ldrh	r1, [r2, #0]
 800a602:	7892      	ldrb	r2, [r2, #2]
 800a604:	8019      	strh	r1, [r3, #0]
 800a606:	709a      	strb	r2, [r3, #2]
		}

	for(int j=0;j<40;j++){
 800a608:	2300      	movs	r3, #0
 800a60a:	61bb      	str	r3, [r7, #24]
 800a60c:	e027      	b.n	800a65e <galaxy_ou+0xc6>
	rota_mx_ud(point_to(&_r,&_g,&_b),1,1);
 800a60e:	4638      	mov	r0, r7
 800a610:	4b1e      	ldr	r3, [pc, #120]	; (800a68c <galaxy_ou+0xf4>)
 800a612:	4a1f      	ldr	r2, [pc, #124]	; (800a690 <galaxy_ou+0xf8>)
 800a614:	491f      	ldr	r1, [pc, #124]	; (800a694 <galaxy_ou+0xfc>)
 800a616:	f000 fb57 	bl	800acc8 <point_to>
 800a61a:	2301      	movs	r3, #1
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	2301      	movs	r3, #1
 800a620:	463a      	mov	r2, r7
 800a622:	ca07      	ldmia	r2, {r0, r1, r2}
 800a624:	f000 f973 	bl	800a90e <rota_mx_ud>
	write_matrix(point_to(&_r,&_g,&_b),j,15,cls);
 800a628:	f107 000c 	add.w	r0, r7, #12
 800a62c:	4b17      	ldr	r3, [pc, #92]	; (800a68c <galaxy_ou+0xf4>)
 800a62e:	4a18      	ldr	r2, [pc, #96]	; (800a690 <galaxy_ou+0xf8>)
 800a630:	4918      	ldr	r1, [pc, #96]	; (800a694 <galaxy_ou+0xfc>)
 800a632:	f000 fb49 	bl	800acc8 <point_to>
 800a636:	4a12      	ldr	r2, [pc, #72]	; (800a680 <galaxy_ou+0xe8>)
 800a638:	ab01      	add	r3, sp, #4
 800a63a:	8811      	ldrh	r1, [r2, #0]
 800a63c:	7892      	ldrb	r2, [r2, #2]
 800a63e:	8019      	strh	r1, [r3, #0]
 800a640:	709a      	strb	r2, [r3, #2]
 800a642:	230f      	movs	r3, #15
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	f107 020c 	add.w	r2, r7, #12
 800a64c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a64e:	f000 f823 	bl	800a698 <write_matrix>
	HAL_Delay(50);
 800a652:	2032      	movs	r0, #50	; 0x32
 800a654:	f7f6 fb64 	bl	8000d20 <HAL_Delay>
	for(int j=0;j<40;j++){
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	3301      	adds	r3, #1
 800a65c:	61bb      	str	r3, [r7, #24]
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2b27      	cmp	r3, #39	; 0x27
 800a662:	ddd4      	ble.n	800a60e <galaxy_ou+0x76>
	for(int i = 0; i<16; i++){
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	3301      	adds	r3, #1
 800a668:	61fb      	str	r3, [r7, #28]
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	2b0f      	cmp	r3, #15
 800a66e:	dd99      	ble.n	800a5a4 <galaxy_ou+0xc>
		}
	}

}
 800a670:	bf00      	nop
 800a672:	bf00      	nop
 800a674:	3720      	adds	r7, #32
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	20002034 	.word	0x20002034
 800a680:	20002f64 	.word	0x20002f64
 800a684:	20002040 	.word	0x20002040
 800a688:	92492493 	.word	0x92492493
 800a68c:	20002548 	.word	0x20002548
 800a690:	20001d64 	.word	0x20001d64
 800a694:	200027c8 	.word	0x200027c8

0800a698 <write_matrix>:


void write_matrix(RGB_pointer point,int x, int y,Color _cl)// y=16
{
 800a698:	b490      	push	{r4, r7}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	1d3c      	adds	r4, r7, #4
 800a6a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6a4:	603b      	str	r3, [r7, #0]
	if(y>=16) y = 15;
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	2b0f      	cmp	r3, #15
 800a6aa:	dd01      	ble.n	800a6b0 <write_matrix+0x18>
 800a6ac:	230f      	movs	r3, #15
 800a6ae:	61bb      	str	r3, [r7, #24]
	if(x>=40) x= 39;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	2b27      	cmp	r3, #39	; 0x27
 800a6b4:	dd01      	ble.n	800a6ba <write_matrix+0x22>
 800a6b6:	2327      	movs	r3, #39	; 0x27
 800a6b8:	603b      	str	r3, [r7, #0]
	point.r_pointer[x*16+y] = _cl.r_cl;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	0111      	lsls	r1, r2, #4
 800a6c0:	69ba      	ldr	r2, [r7, #24]
 800a6c2:	440a      	add	r2, r1
 800a6c4:	4413      	add	r3, r2
 800a6c6:	7f3a      	ldrb	r2, [r7, #28]
 800a6c8:	701a      	strb	r2, [r3, #0]
	point.g_pointer[x*16+y] = _cl.g_cl;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	0111      	lsls	r1, r2, #4
 800a6d0:	69ba      	ldr	r2, [r7, #24]
 800a6d2:	440a      	add	r2, r1
 800a6d4:	4413      	add	r3, r2
 800a6d6:	7f7a      	ldrb	r2, [r7, #29]
 800a6d8:	701a      	strb	r2, [r3, #0]
	point.b_pointer[x*16+y] = _cl.b_cl;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	0111      	lsls	r1, r2, #4
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	440a      	add	r2, r1
 800a6e4:	4413      	add	r3, r2
 800a6e6:	7fba      	ldrb	r2, [r7, #30]
 800a6e8:	701a      	strb	r2, [r3, #0]
}
 800a6ea:	bf00      	nop
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bc90      	pop	{r4, r7}
 800a6f2:	4770      	bx	lr

0800a6f4 <read_matrix>:


Color read_matrix(RGB_pointer point,int x, int y)
{
 800a6f4:	b490      	push	{r4, r7}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	1d3c      	adds	r4, r7, #4
 800a6fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a700:	603b      	str	r3, [r7, #0]
	Color tem;
	if(y>=16) y = 15;
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	2b0f      	cmp	r3, #15
 800a706:	dd01      	ble.n	800a70c <read_matrix+0x18>
 800a708:	230f      	movs	r3, #15
 800a70a:	623b      	str	r3, [r7, #32]
	if(x>=40) x= 39;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	2b27      	cmp	r3, #39	; 0x27
 800a710:	dd01      	ble.n	800a716 <read_matrix+0x22>
 800a712:	2327      	movs	r3, #39	; 0x27
 800a714:	603b      	str	r3, [r7, #0]
	tem.r_cl= point.r_pointer[x*16+y];
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	0111      	lsls	r1, r2, #4
 800a71c:	6a3a      	ldr	r2, [r7, #32]
 800a71e:	440a      	add	r2, r1
 800a720:	4413      	add	r3, r2
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	743b      	strb	r3, [r7, #16]
	tem.g_cl= point.g_pointer[x*16+y];
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	0111      	lsls	r1, r2, #4
 800a72c:	6a3a      	ldr	r2, [r7, #32]
 800a72e:	440a      	add	r2, r1
 800a730:	4413      	add	r3, r2
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	747b      	strb	r3, [r7, #17]
	tem.b_cl= point.b_pointer[x*16+y];
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	0111      	lsls	r1, r2, #4
 800a73c:	6a3a      	ldr	r2, [r7, #32]
 800a73e:	440a      	add	r2, r1
 800a740:	4413      	add	r3, r2
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	74bb      	strb	r3, [r7, #18]
	return tem;
 800a746:	f107 0314 	add.w	r3, r7, #20
 800a74a:	f107 0210 	add.w	r2, r7, #16
 800a74e:	6812      	ldr	r2, [r2, #0]
 800a750:	4611      	mov	r1, r2
 800a752:	8019      	strh	r1, [r3, #0]
 800a754:	3302      	adds	r3, #2
 800a756:	0c12      	lsrs	r2, r2, #16
 800a758:	701a      	strb	r2, [r3, #0]
 800a75a:	2300      	movs	r3, #0
 800a75c:	7d3a      	ldrb	r2, [r7, #20]
 800a75e:	f362 0307 	bfi	r3, r2, #0, #8
 800a762:	7d7a      	ldrb	r2, [r7, #21]
 800a764:	f362 230f 	bfi	r3, r2, #8, #8
 800a768:	7dba      	ldrb	r2, [r7, #22]
 800a76a:	f362 4317 	bfi	r3, r2, #16, #8
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bc90      	pop	{r4, r7}
 800a776:	4770      	bx	lr

0800a778 <rota_mx_lr>:

void rota_mx_lr(RGB_pointer point,char ud, char roll)
{
 800a778:	b590      	push	{r4, r7, lr}
 800a77a:	b08f      	sub	sp, #60	; 0x3c
 800a77c:	af02      	add	r7, sp, #8
 800a77e:	1d3c      	adds	r4, r7, #4
 800a780:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a784:	70fb      	strb	r3, [r7, #3]
	Color tem;
		if(ud==1){
 800a786:	78fb      	ldrb	r3, [r7, #3]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d15c      	bne.n	800a846 <rota_mx_lr+0xce>
		for(int i=0;i<16;i++){
 800a78c:	2300      	movs	r3, #0
 800a78e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a790:	e055      	b.n	800a83e <rota_mx_lr+0xc6>
			if(roll==1) tem = read_matrix(point,0,i);
 800a792:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a796:	2b01      	cmp	r3, #1
 800a798:	d10f      	bne.n	800a7ba <rota_mx_lr+0x42>
 800a79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	1d3a      	adds	r2, r7, #4
 800a7a2:	ca07      	ldmia	r2, {r0, r1, r2}
 800a7a4:	f7ff ffa6 	bl	800a6f4 <read_matrix>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	753a      	strb	r2, [r7, #20]
 800a7ae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a7b2:	757a      	strb	r2, [r7, #21]
 800a7b4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a7b8:	75bb      	strb	r3, [r7, #22]
			for(int j=0;j<39;j++) write_matrix(point,j,i,read_matrix(point,j+1,i));
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7be:	e024      	b.n	800a80a <rota_mx_lr+0x92>
 800a7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	1d3a      	adds	r2, r7, #4
 800a7cc:	ca07      	ldmia	r2, {r0, r1, r2}
 800a7ce:	f7ff ff91 	bl	800a6f4 <read_matrix>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	763a      	strb	r2, [r7, #24]
 800a7d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a7dc:	767a      	strb	r2, [r7, #25]
 800a7de:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a7e2:	76bb      	strb	r3, [r7, #26]
 800a7e4:	ab01      	add	r3, sp, #4
 800a7e6:	f107 0218 	add.w	r2, r7, #24
 800a7ea:	6812      	ldr	r2, [r2, #0]
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	8019      	strh	r1, [r3, #0]
 800a7f0:	3302      	adds	r3, #2
 800a7f2:	0c12      	lsrs	r2, r2, #16
 800a7f4:	701a      	strb	r2, [r3, #0]
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	1d3a      	adds	r2, r7, #4
 800a7fe:	ca07      	ldmia	r2, {r0, r1, r2}
 800a800:	f7ff ff4a 	bl	800a698 <write_matrix>
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	3301      	adds	r3, #1
 800a808:	62bb      	str	r3, [r7, #40]	; 0x28
 800a80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80c:	2b26      	cmp	r3, #38	; 0x26
 800a80e:	ddd7      	ble.n	800a7c0 <rota_mx_lr+0x48>
			if(roll==1) write_matrix(point,39,i,tem);
 800a810:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a814:	2b01      	cmp	r3, #1
 800a816:	d10f      	bne.n	800a838 <rota_mx_lr+0xc0>
 800a818:	ab01      	add	r3, sp, #4
 800a81a:	f107 0214 	add.w	r2, r7, #20
 800a81e:	6812      	ldr	r2, [r2, #0]
 800a820:	4611      	mov	r1, r2
 800a822:	8019      	strh	r1, [r3, #0]
 800a824:	3302      	adds	r3, #2
 800a826:	0c12      	lsrs	r2, r2, #16
 800a828:	701a      	strb	r2, [r3, #0]
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	2327      	movs	r3, #39	; 0x27
 800a830:	1d3a      	adds	r2, r7, #4
 800a832:	ca07      	ldmia	r2, {r0, r1, r2}
 800a834:	f7ff ff30 	bl	800a698 <write_matrix>
		for(int i=0;i<16;i++){
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	3301      	adds	r3, #1
 800a83c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a840:	2b0f      	cmp	r3, #15
 800a842:	dda6      	ble.n	800a792 <rota_mx_lr+0x1a>
			for(int j=0;j<39;j++) write_matrix(point,39-j,i,read_matrix(point,39-(j+1),i));
			if(roll==1) write_matrix(point,0,i,tem);
		}

}
}
 800a844:	e05f      	b.n	800a906 <rota_mx_lr+0x18e>
			for(int i=0;i<16;i++){
 800a846:	2300      	movs	r3, #0
 800a848:	627b      	str	r3, [r7, #36]	; 0x24
 800a84a:	e059      	b.n	800a900 <rota_mx_lr+0x188>
			if(roll==1) tem = read_matrix(point,39,i);
 800a84c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a850:	2b01      	cmp	r3, #1
 800a852:	d10f      	bne.n	800a874 <rota_mx_lr+0xfc>
 800a854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	2327      	movs	r3, #39	; 0x27
 800a85a:	1d3a      	adds	r2, r7, #4
 800a85c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a85e:	f7ff ff49 	bl	800a6f4 <read_matrix>
 800a862:	4603      	mov	r3, r0
 800a864:	461a      	mov	r2, r3
 800a866:	753a      	strb	r2, [r7, #20]
 800a868:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a86c:	757a      	strb	r2, [r7, #21]
 800a86e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a872:	75bb      	strb	r3, [r7, #22]
			for(int j=0;j<39;j++) write_matrix(point,39-j,i,read_matrix(point,39-(j+1),i));
 800a874:	2300      	movs	r3, #0
 800a876:	623b      	str	r3, [r7, #32]
 800a878:	e028      	b.n	800a8cc <rota_mx_lr+0x154>
 800a87a:	6a3b      	ldr	r3, [r7, #32]
 800a87c:	f1c3 0427 	rsb	r4, r3, #39	; 0x27
 800a880:	6a3b      	ldr	r3, [r7, #32]
 800a882:	f1c3 0226 	rsb	r2, r3, #38	; 0x26
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	4613      	mov	r3, r2
 800a88c:	1d3a      	adds	r2, r7, #4
 800a88e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a890:	f7ff ff30 	bl	800a6f4 <read_matrix>
 800a894:	4603      	mov	r3, r0
 800a896:	461a      	mov	r2, r3
 800a898:	773a      	strb	r2, [r7, #28]
 800a89a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a89e:	777a      	strb	r2, [r7, #29]
 800a8a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a8a4:	77bb      	strb	r3, [r7, #30]
 800a8a6:	ab01      	add	r3, sp, #4
 800a8a8:	f107 021c 	add.w	r2, r7, #28
 800a8ac:	6812      	ldr	r2, [r2, #0]
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	8019      	strh	r1, [r3, #0]
 800a8b2:	3302      	adds	r3, #2
 800a8b4:	0c12      	lsrs	r2, r2, #16
 800a8b6:	701a      	strb	r2, [r3, #0]
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	4623      	mov	r3, r4
 800a8be:	1d3a      	adds	r2, r7, #4
 800a8c0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a8c2:	f7ff fee9 	bl	800a698 <write_matrix>
 800a8c6:	6a3b      	ldr	r3, [r7, #32]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	623b      	str	r3, [r7, #32]
 800a8cc:	6a3b      	ldr	r3, [r7, #32]
 800a8ce:	2b26      	cmp	r3, #38	; 0x26
 800a8d0:	ddd3      	ble.n	800a87a <rota_mx_lr+0x102>
			if(roll==1) write_matrix(point,0,i,tem);
 800a8d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d10f      	bne.n	800a8fa <rota_mx_lr+0x182>
 800a8da:	ab01      	add	r3, sp, #4
 800a8dc:	f107 0214 	add.w	r2, r7, #20
 800a8e0:	6812      	ldr	r2, [r2, #0]
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	8019      	strh	r1, [r3, #0]
 800a8e6:	3302      	adds	r3, #2
 800a8e8:	0c12      	lsrs	r2, r2, #16
 800a8ea:	701a      	strb	r2, [r3, #0]
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	1d3a      	adds	r2, r7, #4
 800a8f4:	ca07      	ldmia	r2, {r0, r1, r2}
 800a8f6:	f7ff fecf 	bl	800a698 <write_matrix>
			for(int i=0;i<16;i++){
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	627b      	str	r3, [r7, #36]	; 0x24
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	2b0f      	cmp	r3, #15
 800a904:	dda2      	ble.n	800a84c <rota_mx_lr+0xd4>
}
 800a906:	bf00      	nop
 800a908:	3734      	adds	r7, #52	; 0x34
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd90      	pop	{r4, r7, pc}

0800a90e <rota_mx_ud>:


void rota_mx_ud(RGB_pointer point,char ud, char roll)
{
 800a90e:	b590      	push	{r4, r7, lr}
 800a910:	b08f      	sub	sp, #60	; 0x3c
 800a912:	af02      	add	r7, sp, #8
 800a914:	1d3c      	adds	r4, r7, #4
 800a916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a91a:	70fb      	strb	r3, [r7, #3]
	Color tem;
	if(ud==1){
 800a91c:	78fb      	ldrb	r3, [r7, #3]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d15b      	bne.n	800a9da <rota_mx_ud+0xcc>
	for(int j=0;j<40;j++){
 800a922:	2300      	movs	r3, #0
 800a924:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a926:	e054      	b.n	800a9d2 <rota_mx_ud+0xc4>
		if(roll==1) tem = read_matrix(point,j,0);
 800a928:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d10f      	bne.n	800a950 <rota_mx_ud+0x42>
 800a930:	2300      	movs	r3, #0
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a936:	1d3a      	adds	r2, r7, #4
 800a938:	ca07      	ldmia	r2, {r0, r1, r2}
 800a93a:	f7ff fedb 	bl	800a6f4 <read_matrix>
 800a93e:	4603      	mov	r3, r0
 800a940:	461a      	mov	r2, r3
 800a942:	753a      	strb	r2, [r7, #20]
 800a944:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a948:	757a      	strb	r2, [r7, #21]
 800a94a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a94e:	75bb      	strb	r3, [r7, #22]
		for(int i=0;i<15;i++) write_matrix(point,j,i,read_matrix(point,j,i+1));
 800a950:	2300      	movs	r3, #0
 800a952:	62bb      	str	r3, [r7, #40]	; 0x28
 800a954:	e023      	b.n	800a99e <rota_mx_ud+0x90>
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	3301      	adds	r3, #1
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	1d3a      	adds	r2, r7, #4
 800a960:	ca07      	ldmia	r2, {r0, r1, r2}
 800a962:	f7ff fec7 	bl	800a6f4 <read_matrix>
 800a966:	4603      	mov	r3, r0
 800a968:	461a      	mov	r2, r3
 800a96a:	763a      	strb	r2, [r7, #24]
 800a96c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a970:	767a      	strb	r2, [r7, #25]
 800a972:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a976:	76bb      	strb	r3, [r7, #26]
 800a978:	ab01      	add	r3, sp, #4
 800a97a:	f107 0218 	add.w	r2, r7, #24
 800a97e:	6812      	ldr	r2, [r2, #0]
 800a980:	4611      	mov	r1, r2
 800a982:	8019      	strh	r1, [r3, #0]
 800a984:	3302      	adds	r3, #2
 800a986:	0c12      	lsrs	r2, r2, #16
 800a988:	701a      	strb	r2, [r3, #0]
 800a98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a990:	1d3a      	adds	r2, r7, #4
 800a992:	ca07      	ldmia	r2, {r0, r1, r2}
 800a994:	f7ff fe80 	bl	800a698 <write_matrix>
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	3301      	adds	r3, #1
 800a99c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a0:	2b0e      	cmp	r3, #14
 800a9a2:	ddd8      	ble.n	800a956 <rota_mx_ud+0x48>
		if(roll==1) write_matrix(point,j,15,tem);
 800a9a4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d10f      	bne.n	800a9cc <rota_mx_ud+0xbe>
 800a9ac:	ab01      	add	r3, sp, #4
 800a9ae:	f107 0214 	add.w	r2, r7, #20
 800a9b2:	6812      	ldr	r2, [r2, #0]
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	8019      	strh	r1, [r3, #0]
 800a9b8:	3302      	adds	r3, #2
 800a9ba:	0c12      	lsrs	r2, r2, #16
 800a9bc:	701a      	strb	r2, [r3, #0]
 800a9be:	230f      	movs	r3, #15
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	1d3a      	adds	r2, r7, #4
 800a9c6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a9c8:	f7ff fe66 	bl	800a698 <write_matrix>
	for(int j=0;j<40;j++){
 800a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d4:	2b27      	cmp	r3, #39	; 0x27
 800a9d6:	dda7      	ble.n	800a928 <rota_mx_ud+0x1a>
		if(roll==1) tem = read_matrix(point,j,15);
		for(int i=0;i<15;i++) write_matrix(point,j,15-i,read_matrix(point,j,15-(i+1)));
		if(roll==1) write_matrix(point,j,0,tem);
	}
	}
}
 800a9d8:	e05d      	b.n	800aa96 <rota_mx_ud+0x188>
	for(int j=0;j<40;j++){
 800a9da:	2300      	movs	r3, #0
 800a9dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a9de:	e057      	b.n	800aa90 <rota_mx_ud+0x182>
		if(roll==1) tem = read_matrix(point,j,15);
 800a9e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d10f      	bne.n	800aa08 <rota_mx_ud+0xfa>
 800a9e8:	230f      	movs	r3, #15
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ee:	1d3a      	adds	r2, r7, #4
 800a9f0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a9f2:	f7ff fe7f 	bl	800a6f4 <read_matrix>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	753a      	strb	r2, [r7, #20]
 800a9fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800aa00:	757a      	strb	r2, [r7, #21]
 800aa02:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800aa06:	75bb      	strb	r3, [r7, #22]
		for(int i=0;i<15;i++) write_matrix(point,j,15-i,read_matrix(point,j,15-(i+1)));
 800aa08:	2300      	movs	r3, #0
 800aa0a:	623b      	str	r3, [r7, #32]
 800aa0c:	e026      	b.n	800aa5c <rota_mx_ud+0x14e>
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	f1c3 040f 	rsb	r4, r3, #15
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	f1c3 030e 	rsb	r3, r3, #14
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	1d3a      	adds	r2, r7, #4
 800aa20:	ca07      	ldmia	r2, {r0, r1, r2}
 800aa22:	f7ff fe67 	bl	800a6f4 <read_matrix>
 800aa26:	4603      	mov	r3, r0
 800aa28:	461a      	mov	r2, r3
 800aa2a:	773a      	strb	r2, [r7, #28]
 800aa2c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800aa30:	777a      	strb	r2, [r7, #29]
 800aa32:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800aa36:	77bb      	strb	r3, [r7, #30]
 800aa38:	ab01      	add	r3, sp, #4
 800aa3a:	f107 021c 	add.w	r2, r7, #28
 800aa3e:	6812      	ldr	r2, [r2, #0]
 800aa40:	4611      	mov	r1, r2
 800aa42:	8019      	strh	r1, [r3, #0]
 800aa44:	3302      	adds	r3, #2
 800aa46:	0c12      	lsrs	r2, r2, #16
 800aa48:	701a      	strb	r2, [r3, #0]
 800aa4a:	9400      	str	r4, [sp, #0]
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	1d3a      	adds	r2, r7, #4
 800aa50:	ca07      	ldmia	r2, {r0, r1, r2}
 800aa52:	f7ff fe21 	bl	800a698 <write_matrix>
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	623b      	str	r3, [r7, #32]
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	2b0e      	cmp	r3, #14
 800aa60:	ddd5      	ble.n	800aa0e <rota_mx_ud+0x100>
		if(roll==1) write_matrix(point,j,0,tem);
 800aa62:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d10f      	bne.n	800aa8a <rota_mx_ud+0x17c>
 800aa6a:	ab01      	add	r3, sp, #4
 800aa6c:	f107 0214 	add.w	r2, r7, #20
 800aa70:	6812      	ldr	r2, [r2, #0]
 800aa72:	4611      	mov	r1, r2
 800aa74:	8019      	strh	r1, [r3, #0]
 800aa76:	3302      	adds	r3, #2
 800aa78:	0c12      	lsrs	r2, r2, #16
 800aa7a:	701a      	strb	r2, [r3, #0]
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	1d3a      	adds	r2, r7, #4
 800aa84:	ca07      	ldmia	r2, {r0, r1, r2}
 800aa86:	f7ff fe07 	bl	800a698 <write_matrix>
	for(int j=0;j<40;j++){
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	2b27      	cmp	r3, #39	; 0x27
 800aa94:	dda4      	ble.n	800a9e0 <rota_mx_ud+0xd2>
}
 800aa96:	bf00      	nop
 800aa98:	3734      	adds	r7, #52	; 0x34
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd90      	pop	{r4, r7, pc}

0800aa9e <RGB_color_change>:




uint8_t RGB_color_change(Color* cl_s,Color* cl_d,uint8_t ratio)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b087      	sub	sp, #28
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	71fb      	strb	r3, [r7, #7]
	if ((cl_s->b_cl==cl_d->b_cl) &&(cl_s->g_cl==cl_d->g_cl) &&(cl_s->r_cl ==cl_d->r_cl)) return 1;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	789a      	ldrb	r2, [r3, #2]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	789b      	ldrb	r3, [r3, #2]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d10d      	bne.n	800aad4 <RGB_color_change+0x36>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	785a      	ldrb	r2, [r3, #1]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	785b      	ldrb	r3, [r3, #1]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d107      	bne.n	800aad4 <RGB_color_change+0x36>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	781a      	ldrb	r2, [r3, #0]
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d101      	bne.n	800aad4 <RGB_color_change+0x36>
 800aad0:	2301      	movs	r3, #1
 800aad2:	e055      	b.n	800ab80 <RGB_color_change+0xe2>
	for (uint8_t i =0;i<ratio;i++)
 800aad4:	2300      	movs	r3, #0
 800aad6:	75fb      	strb	r3, [r7, #23]
 800aad8:	e04d      	b.n	800ab76 <RGB_color_change+0xd8>
	{
		if (cl_s->r_cl>cl_d->r_cl)  cl_s->r_cl-=1;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	781a      	ldrb	r2, [r3, #0]
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d906      	bls.n	800aaf4 <RGB_color_change+0x56>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	e00b      	b.n	800ab0c <RGB_color_change+0x6e>
		else if (cl_s->r_cl<cl_d->r_cl)  cl_s->r_cl+= 1;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	781a      	ldrb	r2, [r3, #0]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d205      	bcs.n	800ab0c <RGB_color_change+0x6e>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	3301      	adds	r3, #1
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	701a      	strb	r2, [r3, #0]

		if (cl_s->g_cl>cl_d->g_cl) cl_s->g_cl -=1;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	785a      	ldrb	r2, [r3, #1]
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	785b      	ldrb	r3, [r3, #1]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d906      	bls.n	800ab26 <RGB_color_change+0x88>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	785b      	ldrb	r3, [r3, #1]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	705a      	strb	r2, [r3, #1]
 800ab24:	e00b      	b.n	800ab3e <RGB_color_change+0xa0>
		else if (cl_s->g_cl<cl_d->g_cl) cl_s->g_cl  += 1;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	785a      	ldrb	r2, [r3, #1]
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	785b      	ldrb	r3, [r3, #1]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d205      	bcs.n	800ab3e <RGB_color_change+0xa0>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	785b      	ldrb	r3, [r3, #1]
 800ab36:	3301      	adds	r3, #1
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	705a      	strb	r2, [r3, #1]

		if (cl_s->b_cl>cl_d->b_cl) cl_s->b_cl -=1;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	789a      	ldrb	r2, [r3, #2]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	789b      	ldrb	r3, [r3, #2]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d906      	bls.n	800ab58 <RGB_color_change+0xba>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	789b      	ldrb	r3, [r3, #2]
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	709a      	strb	r2, [r3, #2]
 800ab56:	e00b      	b.n	800ab70 <RGB_color_change+0xd2>
		else if (cl_s->b_cl<cl_d->b_cl) cl_s->b_cl  += 1;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	789a      	ldrb	r2, [r3, #2]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	789b      	ldrb	r3, [r3, #2]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d205      	bcs.n	800ab70 <RGB_color_change+0xd2>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	789b      	ldrb	r3, [r3, #2]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	709a      	strb	r2, [r3, #2]
	for (uint8_t i =0;i<ratio;i++)
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	3301      	adds	r3, #1
 800ab74:	75fb      	strb	r3, [r7, #23]
 800ab76:	7dfa      	ldrb	r2, [r7, #23]
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d3ad      	bcc.n	800aada <RGB_color_change+0x3c>
	}
	return 0;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	371c      	adds	r7, #28
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bc80      	pop	{r7}
 800ab88:	4770      	bx	lr

0800ab8a <RGB_write>:
	for(uint16_t j = 0;j<_t;j++) for(uint16_t i = 0;i<=3600;i++);
}


void RGB_write(RGB_pointer point,Color _cl,uint16_t first_point,uint16_t last_point)
{
 800ab8a:	b490      	push	{r4, r7}
 800ab8c:	b086      	sub	sp, #24
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	1d3c      	adds	r4, r7, #4
 800ab92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab96:	603b      	str	r3, [r7, #0]
	uint16_t _num =( last_point - first_point);
 800ab98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab9a:	8c3b      	ldrh	r3, [r7, #32]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	82bb      	strh	r3, [r7, #20]
		for (uint16_t i = 0;i<=_num;i++)
 800aba0:	2300      	movs	r3, #0
 800aba2:	82fb      	strh	r3, [r7, #22]
 800aba4:	e017      	b.n	800abd6 <RGB_write+0x4c>
			{
				point.r_pointer[first_point+i] = _cl.r_cl;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	8c39      	ldrh	r1, [r7, #32]
 800abaa:	8afa      	ldrh	r2, [r7, #22]
 800abac:	440a      	add	r2, r1
 800abae:	4413      	add	r3, r2
 800abb0:	783a      	ldrb	r2, [r7, #0]
 800abb2:	701a      	strb	r2, [r3, #0]
				point.g_pointer[first_point+i] = _cl.g_cl;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	8c39      	ldrh	r1, [r7, #32]
 800abb8:	8afa      	ldrh	r2, [r7, #22]
 800abba:	440a      	add	r2, r1
 800abbc:	4413      	add	r3, r2
 800abbe:	787a      	ldrb	r2, [r7, #1]
 800abc0:	701a      	strb	r2, [r3, #0]
				point.b_pointer[first_point+i] = _cl.b_cl;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	8c39      	ldrh	r1, [r7, #32]
 800abc6:	8afa      	ldrh	r2, [r7, #22]
 800abc8:	440a      	add	r2, r1
 800abca:	4413      	add	r3, r2
 800abcc:	78ba      	ldrb	r2, [r7, #2]
 800abce:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0;i<=_num;i++)
 800abd0:	8afb      	ldrh	r3, [r7, #22]
 800abd2:	3301      	adds	r3, #1
 800abd4:	82fb      	strh	r3, [r7, #22]
 800abd6:	8afa      	ldrh	r2, [r7, #22]
 800abd8:	8abb      	ldrh	r3, [r7, #20]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d9e3      	bls.n	800aba6 <RGB_write+0x1c>
			}


}
 800abde:	bf00      	nop
 800abe0:	bf00      	nop
 800abe2:	3718      	adds	r7, #24
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bc90      	pop	{r4, r7}
 800abe8:	4770      	bx	lr
	...

0800abec <RGB_base_convert>:
	_temp.b_cl = _b;
	return _temp;
}

Color RGB_base_convert(Mycolors _color)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	71fb      	strb	r3, [r7, #7]
	Color _temp;
	switch (_color)
 800abf6:	79fb      	ldrb	r3, [r7, #7]
 800abf8:	2b07      	cmp	r3, #7
 800abfa:	d84b      	bhi.n	800ac94 <RGB_base_convert+0xa8>
 800abfc:	a201      	add	r2, pc, #4	; (adr r2, 800ac04 <RGB_base_convert+0x18>)
 800abfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac02:	bf00      	nop
 800ac04:	0800ac25 	.word	0x0800ac25
 800ac08:	0800ac33 	.word	0x0800ac33
 800ac0c:	0800ac41 	.word	0x0800ac41
 800ac10:	0800ac4f 	.word	0x0800ac4f
 800ac14:	0800ac5d 	.word	0x0800ac5d
 800ac18:	0800ac79 	.word	0x0800ac79
 800ac1c:	0800ac6b 	.word	0x0800ac6b
 800ac20:	0800ac87 	.word	0x0800ac87
	{
	case black:
	_temp.r_cl = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	723b      	strb	r3, [r7, #8]
	_temp.g_cl =0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	727b      	strb	r3, [r7, #9]
	_temp.b_cl = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	72bb      	strb	r3, [r7, #10]
	break;
 800ac30:	e030      	b.n	800ac94 <RGB_base_convert+0xa8>
	case red:
	_temp.r_cl = _pwm_step;
 800ac32:	2308      	movs	r3, #8
 800ac34:	723b      	strb	r3, [r7, #8]
	_temp.g_cl = 0;
 800ac36:	2300      	movs	r3, #0
 800ac38:	727b      	strb	r3, [r7, #9]
	_temp.b_cl = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	72bb      	strb	r3, [r7, #10]
	break;
 800ac3e:	e029      	b.n	800ac94 <RGB_base_convert+0xa8>
	case green:
	_temp.r_cl = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	723b      	strb	r3, [r7, #8]
	_temp.g_cl = _pwm_step;
 800ac44:	2308      	movs	r3, #8
 800ac46:	727b      	strb	r3, [r7, #9]
	_temp.b_cl = 0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	72bb      	strb	r3, [r7, #10]
	break;
 800ac4c:	e022      	b.n	800ac94 <RGB_base_convert+0xa8>
	case blue:
	_temp.r_cl = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	723b      	strb	r3, [r7, #8]
	_temp.g_cl = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	727b      	strb	r3, [r7, #9]
	_temp.b_cl = _pwm_step;
 800ac56:	2308      	movs	r3, #8
 800ac58:	72bb      	strb	r3, [r7, #10]
	break;
 800ac5a:	e01b      	b.n	800ac94 <RGB_base_convert+0xa8>
	case yellow:
	_temp.r_cl = _pwm_step;
 800ac5c:	2308      	movs	r3, #8
 800ac5e:	723b      	strb	r3, [r7, #8]
	_temp.g_cl =_pwm_step;
 800ac60:	2308      	movs	r3, #8
 800ac62:	727b      	strb	r3, [r7, #9]
	_temp.b_cl = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	72bb      	strb	r3, [r7, #10]
	break;
 800ac68:	e014      	b.n	800ac94 <RGB_base_convert+0xa8>
	case purple:
	_temp.r_cl = _pwm_step;
 800ac6a:	2308      	movs	r3, #8
 800ac6c:	723b      	strb	r3, [r7, #8]
	_temp.g_cl =0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	727b      	strb	r3, [r7, #9]
	_temp.b_cl = _pwm_step;
 800ac72:	2308      	movs	r3, #8
 800ac74:	72bb      	strb	r3, [r7, #10]
	break;
 800ac76:	e00d      	b.n	800ac94 <RGB_base_convert+0xa8>
	case cyan:
	_temp.r_cl = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	723b      	strb	r3, [r7, #8]
	_temp.g_cl =_pwm_step;
 800ac7c:	2308      	movs	r3, #8
 800ac7e:	727b      	strb	r3, [r7, #9]
	_temp.b_cl = _pwm_step;
 800ac80:	2308      	movs	r3, #8
 800ac82:	72bb      	strb	r3, [r7, #10]
	break;
 800ac84:	e006      	b.n	800ac94 <RGB_base_convert+0xa8>

	case white:
	_temp.r_cl = _pwm_step;
 800ac86:	2308      	movs	r3, #8
 800ac88:	723b      	strb	r3, [r7, #8]
	_temp.g_cl =_pwm_step;
 800ac8a:	2308      	movs	r3, #8
 800ac8c:	727b      	strb	r3, [r7, #9]
	_temp.b_cl = _pwm_step;
 800ac8e:	2308      	movs	r3, #8
 800ac90:	72bb      	strb	r3, [r7, #10]
	break;
 800ac92:	bf00      	nop
	}
	return _temp;
 800ac94:	f107 030c 	add.w	r3, r7, #12
 800ac98:	f107 0208 	add.w	r2, r7, #8
 800ac9c:	6812      	ldr	r2, [r2, #0]
 800ac9e:	4611      	mov	r1, r2
 800aca0:	8019      	strh	r1, [r3, #0]
 800aca2:	3302      	adds	r3, #2
 800aca4:	0c12      	lsrs	r2, r2, #16
 800aca6:	701a      	strb	r2, [r3, #0]
 800aca8:	2300      	movs	r3, #0
 800acaa:	7b3a      	ldrb	r2, [r7, #12]
 800acac:	f362 0307 	bfi	r3, r2, #0, #8
 800acb0:	7b7a      	ldrb	r2, [r7, #13]
 800acb2:	f362 230f 	bfi	r3, r2, #8, #8
 800acb6:	7bba      	ldrb	r2, [r7, #14]
 800acb8:	f362 4317 	bfi	r3, r2, #16, #8
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bc80      	pop	{r7}
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop

0800acc8 <point_to>:



RGB_pointer point_to(uint8_t* _r,uint8_t* _g,uint8_t* _b)
{
 800acc8:	b490      	push	{r4, r7}
 800acca:	b088      	sub	sp, #32
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	603b      	str	r3, [r7, #0]

	RGB_pointer _temp;
	_temp.r_pointer = _r;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	617b      	str	r3, [r7, #20]
	_temp.g_pointer = _g;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	61bb      	str	r3, [r7, #24]
	_temp.b_pointer = _b;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	61fb      	str	r3, [r7, #28]
	return _temp;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	461c      	mov	r4, r3
 800ace6:	f107 0314 	add.w	r3, r7, #20
 800acea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800acee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	3720      	adds	r7, #32
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bc90      	pop	{r4, r7}
 800acfa:	4770      	bx	lr

0800acfc <pwm_nled3>:




void pwm_nled3(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
	switch(_color_select)
 800ad02:	4b57      	ldr	r3, [pc, #348]	; (800ae60 <pwm_nled3+0x164>)
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d06d      	beq.n	800ade6 <pwm_nled3+0xea>
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	f300 809e 	bgt.w	800ae4c <pwm_nled3+0x150>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <pwm_nled3+0x1e>
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d033      	beq.n	800ad80 <pwm_nled3+0x84>
							_color_select = 0;
						}
						else _counter_pwm--;
				break;
				default:
				break;
 800ad18:	e098      	b.n	800ae4c <pwm_nled3+0x150>
					for(uint16_t i = 0; i<_nled;i++) if(_r[i]>=_counter_pwm) _bit_pwm[i/8] |= _bitmap[i%8];
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	80fb      	strh	r3, [r7, #6]
 800ad1e:	e01a      	b.n	800ad56 <pwm_nled3+0x5a>
 800ad20:	88fb      	ldrh	r3, [r7, #6]
 800ad22:	4a50      	ldr	r2, [pc, #320]	; (800ae64 <pwm_nled3+0x168>)
 800ad24:	5cd3      	ldrb	r3, [r2, r3]
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	4b4f      	ldr	r3, [pc, #316]	; (800ae68 <pwm_nled3+0x16c>)
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d30f      	bcc.n	800ad50 <pwm_nled3+0x54>
 800ad30:	88fb      	ldrh	r3, [r7, #6]
 800ad32:	08db      	lsrs	r3, r3, #3
 800ad34:	b298      	uxth	r0, r3
 800ad36:	4602      	mov	r2, r0
 800ad38:	4b4c      	ldr	r3, [pc, #304]	; (800ae6c <pwm_nled3+0x170>)
 800ad3a:	5c9a      	ldrb	r2, [r3, r2]
 800ad3c:	88fb      	ldrh	r3, [r7, #6]
 800ad3e:	f003 0307 	and.w	r3, r3, #7
 800ad42:	494b      	ldr	r1, [pc, #300]	; (800ae70 <pwm_nled3+0x174>)
 800ad44:	5ccb      	ldrb	r3, [r1, r3]
 800ad46:	4601      	mov	r1, r0
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	4b47      	ldr	r3, [pc, #284]	; (800ae6c <pwm_nled3+0x170>)
 800ad4e:	545a      	strb	r2, [r3, r1]
 800ad50:	88fb      	ldrh	r3, [r7, #6]
 800ad52:	3301      	adds	r3, #1
 800ad54:	80fb      	strh	r3, [r7, #6]
 800ad56:	88fb      	ldrh	r3, [r7, #6]
 800ad58:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ad5c:	d3e0      	bcc.n	800ad20 <pwm_nled3+0x24>
					if(_counter_pwm==0)
 800ad5e:	4b42      	ldr	r3, [pc, #264]	; (800ae68 <pwm_nled3+0x16c>)
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d105      	bne.n	800ad72 <pwm_nled3+0x76>
							color_scan();
 800ad66:	f000 f88b 	bl	800ae80 <color_scan>
							_color_select = 1;
 800ad6a:	4b3d      	ldr	r3, [pc, #244]	; (800ae60 <pwm_nled3+0x164>)
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	701a      	strb	r2, [r3, #0]
				break;
 800ad70:	e06d      	b.n	800ae4e <pwm_nled3+0x152>
						else _counter_pwm--;
 800ad72:	4b3d      	ldr	r3, [pc, #244]	; (800ae68 <pwm_nled3+0x16c>)
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	3b01      	subs	r3, #1
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	4b3b      	ldr	r3, [pc, #236]	; (800ae68 <pwm_nled3+0x16c>)
 800ad7c:	701a      	strb	r2, [r3, #0]
				break;
 800ad7e:	e066      	b.n	800ae4e <pwm_nled3+0x152>
					for(uint16_t i = 0; i<_nled;i++) if(_g[i]>=_counter_pwm) _bit_pwm[i/8] |= _bitmap[i%8];
 800ad80:	2300      	movs	r3, #0
 800ad82:	80bb      	strh	r3, [r7, #4]
 800ad84:	e01a      	b.n	800adbc <pwm_nled3+0xc0>
 800ad86:	88bb      	ldrh	r3, [r7, #4]
 800ad88:	4a3a      	ldr	r2, [pc, #232]	; (800ae74 <pwm_nled3+0x178>)
 800ad8a:	5cd3      	ldrb	r3, [r2, r3]
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	4b36      	ldr	r3, [pc, #216]	; (800ae68 <pwm_nled3+0x16c>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d30f      	bcc.n	800adb6 <pwm_nled3+0xba>
 800ad96:	88bb      	ldrh	r3, [r7, #4]
 800ad98:	08db      	lsrs	r3, r3, #3
 800ad9a:	b298      	uxth	r0, r3
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	4b33      	ldr	r3, [pc, #204]	; (800ae6c <pwm_nled3+0x170>)
 800ada0:	5c9a      	ldrb	r2, [r3, r2]
 800ada2:	88bb      	ldrh	r3, [r7, #4]
 800ada4:	f003 0307 	and.w	r3, r3, #7
 800ada8:	4931      	ldr	r1, [pc, #196]	; (800ae70 <pwm_nled3+0x174>)
 800adaa:	5ccb      	ldrb	r3, [r1, r3]
 800adac:	4601      	mov	r1, r0
 800adae:	4313      	orrs	r3, r2
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	4b2e      	ldr	r3, [pc, #184]	; (800ae6c <pwm_nled3+0x170>)
 800adb4:	545a      	strb	r2, [r3, r1]
 800adb6:	88bb      	ldrh	r3, [r7, #4]
 800adb8:	3301      	adds	r3, #1
 800adba:	80bb      	strh	r3, [r7, #4]
 800adbc:	88bb      	ldrh	r3, [r7, #4]
 800adbe:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800adc2:	d3e0      	bcc.n	800ad86 <pwm_nled3+0x8a>
					if(_counter_pwm==0)
 800adc4:	4b28      	ldr	r3, [pc, #160]	; (800ae68 <pwm_nled3+0x16c>)
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d105      	bne.n	800add8 <pwm_nled3+0xdc>
							color_scan();
 800adcc:	f000 f858 	bl	800ae80 <color_scan>
							_color_select = 2;
 800add0:	4b23      	ldr	r3, [pc, #140]	; (800ae60 <pwm_nled3+0x164>)
 800add2:	2202      	movs	r2, #2
 800add4:	701a      	strb	r2, [r3, #0]
				break;
 800add6:	e03a      	b.n	800ae4e <pwm_nled3+0x152>
						else _counter_pwm--;
 800add8:	4b23      	ldr	r3, [pc, #140]	; (800ae68 <pwm_nled3+0x16c>)
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	3b01      	subs	r3, #1
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	4b21      	ldr	r3, [pc, #132]	; (800ae68 <pwm_nled3+0x16c>)
 800ade2:	701a      	strb	r2, [r3, #0]
				break;
 800ade4:	e033      	b.n	800ae4e <pwm_nled3+0x152>
					for(uint16_t i = 0; i<_nled;i++) if(_b[i]>=_counter_pwm) _bit_pwm[i/8] |= _bitmap[i%8];
 800ade6:	2300      	movs	r3, #0
 800ade8:	807b      	strh	r3, [r7, #2]
 800adea:	e01a      	b.n	800ae22 <pwm_nled3+0x126>
 800adec:	887b      	ldrh	r3, [r7, #2]
 800adee:	4a22      	ldr	r2, [pc, #136]	; (800ae78 <pwm_nled3+0x17c>)
 800adf0:	5cd3      	ldrb	r3, [r2, r3]
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	4b1c      	ldr	r3, [pc, #112]	; (800ae68 <pwm_nled3+0x16c>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d30f      	bcc.n	800ae1c <pwm_nled3+0x120>
 800adfc:	887b      	ldrh	r3, [r7, #2]
 800adfe:	08db      	lsrs	r3, r3, #3
 800ae00:	b298      	uxth	r0, r3
 800ae02:	4602      	mov	r2, r0
 800ae04:	4b19      	ldr	r3, [pc, #100]	; (800ae6c <pwm_nled3+0x170>)
 800ae06:	5c9a      	ldrb	r2, [r3, r2]
 800ae08:	887b      	ldrh	r3, [r7, #2]
 800ae0a:	f003 0307 	and.w	r3, r3, #7
 800ae0e:	4918      	ldr	r1, [pc, #96]	; (800ae70 <pwm_nled3+0x174>)
 800ae10:	5ccb      	ldrb	r3, [r1, r3]
 800ae12:	4601      	mov	r1, r0
 800ae14:	4313      	orrs	r3, r2
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	4b14      	ldr	r3, [pc, #80]	; (800ae6c <pwm_nled3+0x170>)
 800ae1a:	545a      	strb	r2, [r3, r1]
 800ae1c:	887b      	ldrh	r3, [r7, #2]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	807b      	strh	r3, [r7, #2]
 800ae22:	887b      	ldrh	r3, [r7, #2]
 800ae24:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ae28:	d3e0      	bcc.n	800adec <pwm_nled3+0xf0>
					if(_counter_pwm==0)
 800ae2a:	4b0f      	ldr	r3, [pc, #60]	; (800ae68 <pwm_nled3+0x16c>)
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d105      	bne.n	800ae3e <pwm_nled3+0x142>
							color_scan();
 800ae32:	f000 f825 	bl	800ae80 <color_scan>
							_color_select = 0;
 800ae36:	4b0a      	ldr	r3, [pc, #40]	; (800ae60 <pwm_nled3+0x164>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	701a      	strb	r2, [r3, #0]
				break;
 800ae3c:	e007      	b.n	800ae4e <pwm_nled3+0x152>
						else _counter_pwm--;
 800ae3e:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <pwm_nled3+0x16c>)
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	4b08      	ldr	r3, [pc, #32]	; (800ae68 <pwm_nled3+0x16c>)
 800ae48:	701a      	strb	r2, [r3, #0]
				break;
 800ae4a:	e000      	b.n	800ae4e <pwm_nled3+0x152>
				break;
 800ae4c:	bf00      	nop
			}
			HAL_SPI_Transmit_DMA(&hspi2,&_bit_pwm,_nled/8);
 800ae4e:	2250      	movs	r2, #80	; 0x50
 800ae50:	4906      	ldr	r1, [pc, #24]	; (800ae6c <pwm_nled3+0x170>)
 800ae52:	480a      	ldr	r0, [pc, #40]	; (800ae7c <pwm_nled3+0x180>)
 800ae54:	f7f8 fe96 	bl	8003b84 <HAL_SPI_Transmit_DMA>


}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	200004e0 	.word	0x200004e0
 800ae64:	200027c8 	.word	0x200027c8
 800ae68:	20000234 	.word	0x20000234
 800ae6c:	20001fe4 	.word	0x20001fe4
 800ae70:	0800cfa8 	.word	0x0800cfa8
 800ae74:	20001d64 	.word	0x20001d64
 800ae78:	20002548 	.word	0x20002548
 800ae7c:	20000534 	.word	0x20000534

0800ae80 <color_scan>:


void color_scan(void)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0



	HAL_GPIO_WritePin(GPIOA, RED_Pin|GREEN_Pin|BLUE_Pin, GPIO_PIN_SET);
 800ae86:	2201      	movs	r2, #1
 800ae88:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800ae8c:	481b      	ldr	r0, [pc, #108]	; (800aefc <color_scan+0x7c>)
 800ae8e:	f7f6 fc61 	bl	8001754 <HAL_GPIO_WritePin>
	switch(_color_select)
 800ae92:	4b1b      	ldr	r3, [pc, #108]	; (800af00 <color_scan+0x80>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d014      	beq.n	800aec4 <color_scan+0x44>
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	dc19      	bgt.n	800aed2 <color_scan+0x52>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <color_scan+0x28>
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d007      	beq.n	800aeb6 <color_scan+0x36>
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOA, BLUE_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 800aea6:	e014      	b.n	800aed2 <color_scan+0x52>
			HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aeae:	4813      	ldr	r0, [pc, #76]	; (800aefc <color_scan+0x7c>)
 800aeb0:	f7f6 fc50 	bl	8001754 <HAL_GPIO_WritePin>
			break;
 800aeb4:	e00e      	b.n	800aed4 <color_scan+0x54>
			HAL_GPIO_WritePin(GPIOA, GREEN_Pin, GPIO_PIN_RESET);
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aebc:	480f      	ldr	r0, [pc, #60]	; (800aefc <color_scan+0x7c>)
 800aebe:	f7f6 fc49 	bl	8001754 <HAL_GPIO_WritePin>
			break;
 800aec2:	e007      	b.n	800aed4 <color_scan+0x54>
			HAL_GPIO_WritePin(GPIOA, BLUE_Pin, GPIO_PIN_RESET);
 800aec4:	2200      	movs	r2, #0
 800aec6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aeca:	480c      	ldr	r0, [pc, #48]	; (800aefc <color_scan+0x7c>)
 800aecc:	f7f6 fc42 	bl	8001754 <HAL_GPIO_WritePin>
			break;
 800aed0:	e000      	b.n	800aed4 <color_scan+0x54>
			break;
 800aed2:	bf00      	nop
	}
	for(uint16_t i = 0; i<(_nled/8);i++) _bit_pwm[i] = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	80fb      	strh	r3, [r7, #6]
 800aed8:	e006      	b.n	800aee8 <color_scan+0x68>
 800aeda:	88fb      	ldrh	r3, [r7, #6]
 800aedc:	4a09      	ldr	r2, [pc, #36]	; (800af04 <color_scan+0x84>)
 800aede:	2100      	movs	r1, #0
 800aee0:	54d1      	strb	r1, [r2, r3]
 800aee2:	88fb      	ldrh	r3, [r7, #6]
 800aee4:	3301      	adds	r3, #1
 800aee6:	80fb      	strh	r3, [r7, #6]
 800aee8:	88fb      	ldrh	r3, [r7, #6]
 800aeea:	2b4f      	cmp	r3, #79	; 0x4f
 800aeec:	d9f5      	bls.n	800aeda <color_scan+0x5a>
		_counter_pwm =_pwm_step;
 800aeee:	4b06      	ldr	r3, [pc, #24]	; (800af08 <color_scan+0x88>)
 800aef0:	2208      	movs	r2, #8
 800aef2:	701a      	strb	r2, [r3, #0]
}
 800aef4:	bf00      	nop
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	40010800 	.word	0x40010800
 800af00:	200004e0 	.word	0x200004e0
 800af04:	20001fe4 	.word	0x20001fe4
 800af08:	20000234 	.word	0x20000234

0800af0c <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	if(hspi==&hspi2)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a05      	ldr	r2, [pc, #20]	; (800af2c <HAL_SPI_TxCpltCallback+0x20>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d103      	bne.n	800af24 <HAL_SPI_TxCpltCallback+0x18>
	{
		_LAT();
 800af1c:	f000 f826 	bl	800af6c <_LAT>
		_OE_ENABLE();
 800af20:	f000 f834 	bl	800af8c <_OE_ENABLE>
	}

}
 800af24:	bf00      	nop
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	20000534 	.word	0x20000534

0800af30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]

	if(htim==&htim2)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a09      	ldr	r2, [pc, #36]	; (800af60 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d102      	bne.n	800af46 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		 pwm_nled3();
 800af40:	f7ff fedc 	bl	800acfc <pwm_nled3>
	}
	else if(htim==&htim3)
	{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	}
}
 800af44:	e008      	b.n	800af58 <HAL_TIM_PeriodElapsedCallback+0x28>
	else if(htim==&htim3)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a06      	ldr	r2, [pc, #24]	; (800af64 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d104      	bne.n	800af58 <HAL_TIM_PeriodElapsedCallback+0x28>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800af4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800af52:	4805      	ldr	r0, [pc, #20]	; (800af68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800af54:	f7f6 fc16 	bl	8001784 <HAL_GPIO_TogglePin>
}
 800af58:	bf00      	nop
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	200006e8 	.word	0x200006e8
 800af64:	20000618 	.word	0x20000618
 800af68:	40011000 	.word	0x40011000

0800af6c <_LAT>:

void _LAT(void)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LAT_GPIO_Port,LAT_Pin, GPIO_PIN_SET);
 800af70:	2201      	movs	r2, #1
 800af72:	2120      	movs	r1, #32
 800af74:	4804      	ldr	r0, [pc, #16]	; (800af88 <_LAT+0x1c>)
 800af76:	f7f6 fbed 	bl	8001754 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(LAT_GPIO_Port,LAT_Pin, GPIO_PIN_RESET);
 800af7a:	2200      	movs	r2, #0
 800af7c:	2120      	movs	r1, #32
 800af7e:	4802      	ldr	r0, [pc, #8]	; (800af88 <_LAT+0x1c>)
 800af80:	f7f6 fbe8 	bl	8001754 <HAL_GPIO_WritePin>

}
 800af84:	bf00      	nop
 800af86:	bd80      	pop	{r7, pc}
 800af88:	40010c00 	.word	0x40010c00

0800af8c <_OE_ENABLE>:

void _OE_ENABLE(void)
{
 800af8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af8e:	b093      	sub	sp, #76	; 0x4c
 800af90:	af12      	add	r7, sp, #72	; 0x48
	setPWM(htim4, TIM_CHANNEL_1,255, 255-pwm);
 800af92:	4b10      	ldr	r3, [pc, #64]	; (800afd4 <_OE_ENABLE+0x48>)
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	b29b      	uxth	r3, r3
 800af98:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	4e0e      	ldr	r6, [pc, #56]	; (800afd8 <_OE_ENABLE+0x4c>)
 800afa0:	9310      	str	r3, [sp, #64]	; 0x40
 800afa2:	23ff      	movs	r3, #255	; 0xff
 800afa4:	930f      	str	r3, [sp, #60]	; 0x3c
 800afa6:	2300      	movs	r3, #0
 800afa8:	930e      	str	r3, [sp, #56]	; 0x38
 800afaa:	466d      	mov	r5, sp
 800afac:	f106 0410 	add.w	r4, r6, #16
 800afb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800afc0:	e885 0003 	stmia.w	r5, {r0, r1}
 800afc4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800afc8:	f000 f818 	bl	800affc <setPWM>
//	setPWM(htim4, TIM_CHANNEL_4,255, 0);
//	 HAL_GPIO_WritePin(GPIOB, OE_Pin, GPIO_PIN_RESET);
}
 800afcc:	bf00      	nop
 800afce:	3704      	adds	r7, #4
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd4:	20002f5f 	.word	0x20002f5f
 800afd8:	2000058c 	.word	0x2000058c

0800afdc <brigthness>:
//	HAL_GPIO_WritePin(GPIOB,OE_Pin, GPIO_PIN_SET);
}


void brigthness(uint8_t val)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
	pwm = val;
 800afe6:	4a04      	ldr	r2, [pc, #16]	; (800aff8 <brigthness+0x1c>)
 800afe8:	79fb      	ldrb	r3, [r7, #7]
 800afea:	7013      	strb	r3, [r2, #0]
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bc80      	pop	{r7}
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	20002f5f 	.word	0x20002f5f

0800affc <setPWM>:


/* USER CODE BEGIN 4 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
uint16_t pulse)
{
 800affc:	b084      	sub	sp, #16
 800affe:	b580      	push	{r7, lr}
 800b000:	b088      	sub	sp, #32
 800b002:	af00      	add	r7, sp, #0
 800b004:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800b008:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 800b00c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b00e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800b012:	f7f9 fa3d 	bl	8004490 <HAL_TIM_PWM_Stop>
 TIM_OC_InitTypeDef sConfigOC;
 timer.Init.Period = period; // set the period duration
 800b016:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b01a:	637b      	str	r3, [r7, #52]	; 0x34
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 800b01c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800b020:	f7f9 f93c 	bl	800429c <HAL_TIM_PWM_Init>
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b024:	2360      	movs	r3, #96	; 0x60
 800b026:	607b      	str	r3, [r7, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 800b028:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b02c:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b02e:	2300      	movs	r3, #0
 800b030:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b032:	2300      	movs	r3, #0
 800b034:	617b      	str	r3, [r7, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800b036:	1d3b      	adds	r3, r7, #4
 800b038:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b03a:	4619      	mov	r1, r3
 800b03c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800b040:	f7f9 fb92 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 800b044:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b046:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800b04a:	f7f9 f97f 	bl	800434c <HAL_TIM_PWM_Start>
}
 800b04e:	bf00      	nop
 800b050:	3720      	adds	r7, #32
 800b052:	46bd      	mov	sp, r7
 800b054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b058:	b004      	add	sp, #16
 800b05a:	4770      	bx	lr

0800b05c <__errno>:
 800b05c:	4b01      	ldr	r3, [pc, #4]	; (800b064 <__errno+0x8>)
 800b05e:	6818      	ldr	r0, [r3, #0]
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	20000238 	.word	0x20000238

0800b068 <__libc_init_array>:
 800b068:	b570      	push	{r4, r5, r6, lr}
 800b06a:	2600      	movs	r6, #0
 800b06c:	4d0c      	ldr	r5, [pc, #48]	; (800b0a0 <__libc_init_array+0x38>)
 800b06e:	4c0d      	ldr	r4, [pc, #52]	; (800b0a4 <__libc_init_array+0x3c>)
 800b070:	1b64      	subs	r4, r4, r5
 800b072:	10a4      	asrs	r4, r4, #2
 800b074:	42a6      	cmp	r6, r4
 800b076:	d109      	bne.n	800b08c <__libc_init_array+0x24>
 800b078:	f001 f82e 	bl	800c0d8 <_init>
 800b07c:	2600      	movs	r6, #0
 800b07e:	4d0a      	ldr	r5, [pc, #40]	; (800b0a8 <__libc_init_array+0x40>)
 800b080:	4c0a      	ldr	r4, [pc, #40]	; (800b0ac <__libc_init_array+0x44>)
 800b082:	1b64      	subs	r4, r4, r5
 800b084:	10a4      	asrs	r4, r4, #2
 800b086:	42a6      	cmp	r6, r4
 800b088:	d105      	bne.n	800b096 <__libc_init_array+0x2e>
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b090:	4798      	blx	r3
 800b092:	3601      	adds	r6, #1
 800b094:	e7ee      	b.n	800b074 <__libc_init_array+0xc>
 800b096:	f855 3b04 	ldr.w	r3, [r5], #4
 800b09a:	4798      	blx	r3
 800b09c:	3601      	adds	r6, #1
 800b09e:	e7f2      	b.n	800b086 <__libc_init_array+0x1e>
 800b0a0:	0800d0fc 	.word	0x0800d0fc
 800b0a4:	0800d0fc 	.word	0x0800d0fc
 800b0a8:	0800d0fc 	.word	0x0800d0fc
 800b0ac:	0800d100 	.word	0x0800d100

0800b0b0 <memset>:
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	4402      	add	r2, r0
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d100      	bne.n	800b0ba <memset+0xa>
 800b0b8:	4770      	bx	lr
 800b0ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b0be:	e7f9      	b.n	800b0b4 <memset+0x4>

0800b0c0 <rand>:
 800b0c0:	4b17      	ldr	r3, [pc, #92]	; (800b120 <rand+0x60>)
 800b0c2:	b510      	push	{r4, lr}
 800b0c4:	681c      	ldr	r4, [r3, #0]
 800b0c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b0c8:	b9b3      	cbnz	r3, 800b0f8 <rand+0x38>
 800b0ca:	2018      	movs	r0, #24
 800b0cc:	f000 f868 	bl	800b1a0 <malloc>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	63a0      	str	r0, [r4, #56]	; 0x38
 800b0d4:	b920      	cbnz	r0, 800b0e0 <rand+0x20>
 800b0d6:	214e      	movs	r1, #78	; 0x4e
 800b0d8:	4b12      	ldr	r3, [pc, #72]	; (800b124 <rand+0x64>)
 800b0da:	4813      	ldr	r0, [pc, #76]	; (800b128 <rand+0x68>)
 800b0dc:	f000 f830 	bl	800b140 <__assert_func>
 800b0e0:	4912      	ldr	r1, [pc, #72]	; (800b12c <rand+0x6c>)
 800b0e2:	4b13      	ldr	r3, [pc, #76]	; (800b130 <rand+0x70>)
 800b0e4:	e9c0 1300 	strd	r1, r3, [r0]
 800b0e8:	4b12      	ldr	r3, [pc, #72]	; (800b134 <rand+0x74>)
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	6083      	str	r3, [r0, #8]
 800b0ee:	230b      	movs	r3, #11
 800b0f0:	8183      	strh	r3, [r0, #12]
 800b0f2:	2001      	movs	r0, #1
 800b0f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b0f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b0fa:	480f      	ldr	r0, [pc, #60]	; (800b138 <rand+0x78>)
 800b0fc:	690a      	ldr	r2, [r1, #16]
 800b0fe:	694b      	ldr	r3, [r1, #20]
 800b100:	4350      	muls	r0, r2
 800b102:	4c0e      	ldr	r4, [pc, #56]	; (800b13c <rand+0x7c>)
 800b104:	fb04 0003 	mla	r0, r4, r3, r0
 800b108:	fba2 3404 	umull	r3, r4, r2, r4
 800b10c:	1c5a      	adds	r2, r3, #1
 800b10e:	4404      	add	r4, r0
 800b110:	f144 0000 	adc.w	r0, r4, #0
 800b114:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800b118:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b11c:	bd10      	pop	{r4, pc}
 800b11e:	bf00      	nop
 800b120:	20000238 	.word	0x20000238
 800b124:	0800cfb4 	.word	0x0800cfb4
 800b128:	0800cfcb 	.word	0x0800cfcb
 800b12c:	abcd330e 	.word	0xabcd330e
 800b130:	e66d1234 	.word	0xe66d1234
 800b134:	0005deec 	.word	0x0005deec
 800b138:	5851f42d 	.word	0x5851f42d
 800b13c:	4c957f2d 	.word	0x4c957f2d

0800b140 <__assert_func>:
 800b140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b142:	4614      	mov	r4, r2
 800b144:	461a      	mov	r2, r3
 800b146:	4b09      	ldr	r3, [pc, #36]	; (800b16c <__assert_func+0x2c>)
 800b148:	4605      	mov	r5, r0
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68d8      	ldr	r0, [r3, #12]
 800b14e:	b14c      	cbz	r4, 800b164 <__assert_func+0x24>
 800b150:	4b07      	ldr	r3, [pc, #28]	; (800b170 <__assert_func+0x30>)
 800b152:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b156:	9100      	str	r1, [sp, #0]
 800b158:	462b      	mov	r3, r5
 800b15a:	4906      	ldr	r1, [pc, #24]	; (800b174 <__assert_func+0x34>)
 800b15c:	f000 f80e 	bl	800b17c <fiprintf>
 800b160:	f000 fc8a 	bl	800ba78 <abort>
 800b164:	4b04      	ldr	r3, [pc, #16]	; (800b178 <__assert_func+0x38>)
 800b166:	461c      	mov	r4, r3
 800b168:	e7f3      	b.n	800b152 <__assert_func+0x12>
 800b16a:	bf00      	nop
 800b16c:	20000238 	.word	0x20000238
 800b170:	0800d02a 	.word	0x0800d02a
 800b174:	0800d037 	.word	0x0800d037
 800b178:	0800d065 	.word	0x0800d065

0800b17c <fiprintf>:
 800b17c:	b40e      	push	{r1, r2, r3}
 800b17e:	b503      	push	{r0, r1, lr}
 800b180:	4601      	mov	r1, r0
 800b182:	ab03      	add	r3, sp, #12
 800b184:	4805      	ldr	r0, [pc, #20]	; (800b19c <fiprintf+0x20>)
 800b186:	f853 2b04 	ldr.w	r2, [r3], #4
 800b18a:	6800      	ldr	r0, [r0, #0]
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	f000 f8dd 	bl	800b34c <_vfiprintf_r>
 800b192:	b002      	add	sp, #8
 800b194:	f85d eb04 	ldr.w	lr, [sp], #4
 800b198:	b003      	add	sp, #12
 800b19a:	4770      	bx	lr
 800b19c:	20000238 	.word	0x20000238

0800b1a0 <malloc>:
 800b1a0:	4b02      	ldr	r3, [pc, #8]	; (800b1ac <malloc+0xc>)
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	f000 b84f 	b.w	800b248 <_malloc_r>
 800b1aa:	bf00      	nop
 800b1ac:	20000238 	.word	0x20000238

0800b1b0 <_free_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	2900      	cmp	r1, #0
 800b1b6:	d043      	beq.n	800b240 <_free_r+0x90>
 800b1b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1bc:	1f0c      	subs	r4, r1, #4
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bfb8      	it	lt
 800b1c2:	18e4      	addlt	r4, r4, r3
 800b1c4:	f000 fe8c 	bl	800bee0 <__malloc_lock>
 800b1c8:	4a1e      	ldr	r2, [pc, #120]	; (800b244 <_free_r+0x94>)
 800b1ca:	6813      	ldr	r3, [r2, #0]
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	b933      	cbnz	r3, 800b1de <_free_r+0x2e>
 800b1d0:	6063      	str	r3, [r4, #4]
 800b1d2:	6014      	str	r4, [r2, #0]
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1da:	f000 be87 	b.w	800beec <__malloc_unlock>
 800b1de:	42a3      	cmp	r3, r4
 800b1e0:	d90a      	bls.n	800b1f8 <_free_r+0x48>
 800b1e2:	6821      	ldr	r1, [r4, #0]
 800b1e4:	1862      	adds	r2, r4, r1
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	bf01      	itttt	eq
 800b1ea:	681a      	ldreq	r2, [r3, #0]
 800b1ec:	685b      	ldreq	r3, [r3, #4]
 800b1ee:	1852      	addeq	r2, r2, r1
 800b1f0:	6022      	streq	r2, [r4, #0]
 800b1f2:	6063      	str	r3, [r4, #4]
 800b1f4:	6004      	str	r4, [r0, #0]
 800b1f6:	e7ed      	b.n	800b1d4 <_free_r+0x24>
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	b10b      	cbz	r3, 800b202 <_free_r+0x52>
 800b1fe:	42a3      	cmp	r3, r4
 800b200:	d9fa      	bls.n	800b1f8 <_free_r+0x48>
 800b202:	6811      	ldr	r1, [r2, #0]
 800b204:	1850      	adds	r0, r2, r1
 800b206:	42a0      	cmp	r0, r4
 800b208:	d10b      	bne.n	800b222 <_free_r+0x72>
 800b20a:	6820      	ldr	r0, [r4, #0]
 800b20c:	4401      	add	r1, r0
 800b20e:	1850      	adds	r0, r2, r1
 800b210:	4283      	cmp	r3, r0
 800b212:	6011      	str	r1, [r2, #0]
 800b214:	d1de      	bne.n	800b1d4 <_free_r+0x24>
 800b216:	6818      	ldr	r0, [r3, #0]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	4401      	add	r1, r0
 800b21c:	6011      	str	r1, [r2, #0]
 800b21e:	6053      	str	r3, [r2, #4]
 800b220:	e7d8      	b.n	800b1d4 <_free_r+0x24>
 800b222:	d902      	bls.n	800b22a <_free_r+0x7a>
 800b224:	230c      	movs	r3, #12
 800b226:	602b      	str	r3, [r5, #0]
 800b228:	e7d4      	b.n	800b1d4 <_free_r+0x24>
 800b22a:	6820      	ldr	r0, [r4, #0]
 800b22c:	1821      	adds	r1, r4, r0
 800b22e:	428b      	cmp	r3, r1
 800b230:	bf01      	itttt	eq
 800b232:	6819      	ldreq	r1, [r3, #0]
 800b234:	685b      	ldreq	r3, [r3, #4]
 800b236:	1809      	addeq	r1, r1, r0
 800b238:	6021      	streq	r1, [r4, #0]
 800b23a:	6063      	str	r3, [r4, #4]
 800b23c:	6054      	str	r4, [r2, #4]
 800b23e:	e7c9      	b.n	800b1d4 <_free_r+0x24>
 800b240:	bd38      	pop	{r3, r4, r5, pc}
 800b242:	bf00      	nop
 800b244:	200004e8 	.word	0x200004e8

0800b248 <_malloc_r>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	1ccd      	adds	r5, r1, #3
 800b24c:	f025 0503 	bic.w	r5, r5, #3
 800b250:	3508      	adds	r5, #8
 800b252:	2d0c      	cmp	r5, #12
 800b254:	bf38      	it	cc
 800b256:	250c      	movcc	r5, #12
 800b258:	2d00      	cmp	r5, #0
 800b25a:	4606      	mov	r6, r0
 800b25c:	db01      	blt.n	800b262 <_malloc_r+0x1a>
 800b25e:	42a9      	cmp	r1, r5
 800b260:	d903      	bls.n	800b26a <_malloc_r+0x22>
 800b262:	230c      	movs	r3, #12
 800b264:	6033      	str	r3, [r6, #0]
 800b266:	2000      	movs	r0, #0
 800b268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b26a:	f000 fe39 	bl	800bee0 <__malloc_lock>
 800b26e:	4921      	ldr	r1, [pc, #132]	; (800b2f4 <_malloc_r+0xac>)
 800b270:	680a      	ldr	r2, [r1, #0]
 800b272:	4614      	mov	r4, r2
 800b274:	b99c      	cbnz	r4, 800b29e <_malloc_r+0x56>
 800b276:	4f20      	ldr	r7, [pc, #128]	; (800b2f8 <_malloc_r+0xb0>)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	b923      	cbnz	r3, 800b286 <_malloc_r+0x3e>
 800b27c:	4621      	mov	r1, r4
 800b27e:	4630      	mov	r0, r6
 800b280:	f000 fb2a 	bl	800b8d8 <_sbrk_r>
 800b284:	6038      	str	r0, [r7, #0]
 800b286:	4629      	mov	r1, r5
 800b288:	4630      	mov	r0, r6
 800b28a:	f000 fb25 	bl	800b8d8 <_sbrk_r>
 800b28e:	1c43      	adds	r3, r0, #1
 800b290:	d123      	bne.n	800b2da <_malloc_r+0x92>
 800b292:	230c      	movs	r3, #12
 800b294:	4630      	mov	r0, r6
 800b296:	6033      	str	r3, [r6, #0]
 800b298:	f000 fe28 	bl	800beec <__malloc_unlock>
 800b29c:	e7e3      	b.n	800b266 <_malloc_r+0x1e>
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	1b5b      	subs	r3, r3, r5
 800b2a2:	d417      	bmi.n	800b2d4 <_malloc_r+0x8c>
 800b2a4:	2b0b      	cmp	r3, #11
 800b2a6:	d903      	bls.n	800b2b0 <_malloc_r+0x68>
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	441c      	add	r4, r3
 800b2ac:	6025      	str	r5, [r4, #0]
 800b2ae:	e004      	b.n	800b2ba <_malloc_r+0x72>
 800b2b0:	6863      	ldr	r3, [r4, #4]
 800b2b2:	42a2      	cmp	r2, r4
 800b2b4:	bf0c      	ite	eq
 800b2b6:	600b      	streq	r3, [r1, #0]
 800b2b8:	6053      	strne	r3, [r2, #4]
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f000 fe16 	bl	800beec <__malloc_unlock>
 800b2c0:	f104 000b 	add.w	r0, r4, #11
 800b2c4:	1d23      	adds	r3, r4, #4
 800b2c6:	f020 0007 	bic.w	r0, r0, #7
 800b2ca:	1ac2      	subs	r2, r0, r3
 800b2cc:	d0cc      	beq.n	800b268 <_malloc_r+0x20>
 800b2ce:	1a1b      	subs	r3, r3, r0
 800b2d0:	50a3      	str	r3, [r4, r2]
 800b2d2:	e7c9      	b.n	800b268 <_malloc_r+0x20>
 800b2d4:	4622      	mov	r2, r4
 800b2d6:	6864      	ldr	r4, [r4, #4]
 800b2d8:	e7cc      	b.n	800b274 <_malloc_r+0x2c>
 800b2da:	1cc4      	adds	r4, r0, #3
 800b2dc:	f024 0403 	bic.w	r4, r4, #3
 800b2e0:	42a0      	cmp	r0, r4
 800b2e2:	d0e3      	beq.n	800b2ac <_malloc_r+0x64>
 800b2e4:	1a21      	subs	r1, r4, r0
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f000 faf6 	bl	800b8d8 <_sbrk_r>
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d1dd      	bne.n	800b2ac <_malloc_r+0x64>
 800b2f0:	e7cf      	b.n	800b292 <_malloc_r+0x4a>
 800b2f2:	bf00      	nop
 800b2f4:	200004e8 	.word	0x200004e8
 800b2f8:	200004ec 	.word	0x200004ec

0800b2fc <__sfputc_r>:
 800b2fc:	6893      	ldr	r3, [r2, #8]
 800b2fe:	b410      	push	{r4}
 800b300:	3b01      	subs	r3, #1
 800b302:	2b00      	cmp	r3, #0
 800b304:	6093      	str	r3, [r2, #8]
 800b306:	da07      	bge.n	800b318 <__sfputc_r+0x1c>
 800b308:	6994      	ldr	r4, [r2, #24]
 800b30a:	42a3      	cmp	r3, r4
 800b30c:	db01      	blt.n	800b312 <__sfputc_r+0x16>
 800b30e:	290a      	cmp	r1, #10
 800b310:	d102      	bne.n	800b318 <__sfputc_r+0x1c>
 800b312:	bc10      	pop	{r4}
 800b314:	f000 baf0 	b.w	800b8f8 <__swbuf_r>
 800b318:	6813      	ldr	r3, [r2, #0]
 800b31a:	1c58      	adds	r0, r3, #1
 800b31c:	6010      	str	r0, [r2, #0]
 800b31e:	7019      	strb	r1, [r3, #0]
 800b320:	4608      	mov	r0, r1
 800b322:	bc10      	pop	{r4}
 800b324:	4770      	bx	lr

0800b326 <__sfputs_r>:
 800b326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b328:	4606      	mov	r6, r0
 800b32a:	460f      	mov	r7, r1
 800b32c:	4614      	mov	r4, r2
 800b32e:	18d5      	adds	r5, r2, r3
 800b330:	42ac      	cmp	r4, r5
 800b332:	d101      	bne.n	800b338 <__sfputs_r+0x12>
 800b334:	2000      	movs	r0, #0
 800b336:	e007      	b.n	800b348 <__sfputs_r+0x22>
 800b338:	463a      	mov	r2, r7
 800b33a:	4630      	mov	r0, r6
 800b33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b340:	f7ff ffdc 	bl	800b2fc <__sfputc_r>
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	d1f3      	bne.n	800b330 <__sfputs_r+0xa>
 800b348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b34c <_vfiprintf_r>:
 800b34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b350:	460d      	mov	r5, r1
 800b352:	4614      	mov	r4, r2
 800b354:	4698      	mov	r8, r3
 800b356:	4606      	mov	r6, r0
 800b358:	b09d      	sub	sp, #116	; 0x74
 800b35a:	b118      	cbz	r0, 800b364 <_vfiprintf_r+0x18>
 800b35c:	6983      	ldr	r3, [r0, #24]
 800b35e:	b90b      	cbnz	r3, 800b364 <_vfiprintf_r+0x18>
 800b360:	f000 fcac 	bl	800bcbc <__sinit>
 800b364:	4b89      	ldr	r3, [pc, #548]	; (800b58c <_vfiprintf_r+0x240>)
 800b366:	429d      	cmp	r5, r3
 800b368:	d11b      	bne.n	800b3a2 <_vfiprintf_r+0x56>
 800b36a:	6875      	ldr	r5, [r6, #4]
 800b36c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b36e:	07d9      	lsls	r1, r3, #31
 800b370:	d405      	bmi.n	800b37e <_vfiprintf_r+0x32>
 800b372:	89ab      	ldrh	r3, [r5, #12]
 800b374:	059a      	lsls	r2, r3, #22
 800b376:	d402      	bmi.n	800b37e <_vfiprintf_r+0x32>
 800b378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b37a:	f000 fd3d 	bl	800bdf8 <__retarget_lock_acquire_recursive>
 800b37e:	89ab      	ldrh	r3, [r5, #12]
 800b380:	071b      	lsls	r3, r3, #28
 800b382:	d501      	bpl.n	800b388 <_vfiprintf_r+0x3c>
 800b384:	692b      	ldr	r3, [r5, #16]
 800b386:	b9eb      	cbnz	r3, 800b3c4 <_vfiprintf_r+0x78>
 800b388:	4629      	mov	r1, r5
 800b38a:	4630      	mov	r0, r6
 800b38c:	f000 fb06 	bl	800b99c <__swsetup_r>
 800b390:	b1c0      	cbz	r0, 800b3c4 <_vfiprintf_r+0x78>
 800b392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b394:	07dc      	lsls	r4, r3, #31
 800b396:	d50e      	bpl.n	800b3b6 <_vfiprintf_r+0x6a>
 800b398:	f04f 30ff 	mov.w	r0, #4294967295
 800b39c:	b01d      	add	sp, #116	; 0x74
 800b39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a2:	4b7b      	ldr	r3, [pc, #492]	; (800b590 <_vfiprintf_r+0x244>)
 800b3a4:	429d      	cmp	r5, r3
 800b3a6:	d101      	bne.n	800b3ac <_vfiprintf_r+0x60>
 800b3a8:	68b5      	ldr	r5, [r6, #8]
 800b3aa:	e7df      	b.n	800b36c <_vfiprintf_r+0x20>
 800b3ac:	4b79      	ldr	r3, [pc, #484]	; (800b594 <_vfiprintf_r+0x248>)
 800b3ae:	429d      	cmp	r5, r3
 800b3b0:	bf08      	it	eq
 800b3b2:	68f5      	ldreq	r5, [r6, #12]
 800b3b4:	e7da      	b.n	800b36c <_vfiprintf_r+0x20>
 800b3b6:	89ab      	ldrh	r3, [r5, #12]
 800b3b8:	0598      	lsls	r0, r3, #22
 800b3ba:	d4ed      	bmi.n	800b398 <_vfiprintf_r+0x4c>
 800b3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3be:	f000 fd1c 	bl	800bdfa <__retarget_lock_release_recursive>
 800b3c2:	e7e9      	b.n	800b398 <_vfiprintf_r+0x4c>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3c8:	2320      	movs	r3, #32
 800b3ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3ce:	2330      	movs	r3, #48	; 0x30
 800b3d0:	f04f 0901 	mov.w	r9, #1
 800b3d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b598 <_vfiprintf_r+0x24c>
 800b3dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3e0:	4623      	mov	r3, r4
 800b3e2:	469a      	mov	sl, r3
 800b3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e8:	b10a      	cbz	r2, 800b3ee <_vfiprintf_r+0xa2>
 800b3ea:	2a25      	cmp	r2, #37	; 0x25
 800b3ec:	d1f9      	bne.n	800b3e2 <_vfiprintf_r+0x96>
 800b3ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b3f2:	d00b      	beq.n	800b40c <_vfiprintf_r+0xc0>
 800b3f4:	465b      	mov	r3, fp
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f7ff ff93 	bl	800b326 <__sfputs_r>
 800b400:	3001      	adds	r0, #1
 800b402:	f000 80aa 	beq.w	800b55a <_vfiprintf_r+0x20e>
 800b406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b408:	445a      	add	r2, fp
 800b40a:	9209      	str	r2, [sp, #36]	; 0x24
 800b40c:	f89a 3000 	ldrb.w	r3, [sl]
 800b410:	2b00      	cmp	r3, #0
 800b412:	f000 80a2 	beq.w	800b55a <_vfiprintf_r+0x20e>
 800b416:	2300      	movs	r3, #0
 800b418:	f04f 32ff 	mov.w	r2, #4294967295
 800b41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b420:	f10a 0a01 	add.w	sl, sl, #1
 800b424:	9304      	str	r3, [sp, #16]
 800b426:	9307      	str	r3, [sp, #28]
 800b428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b42c:	931a      	str	r3, [sp, #104]	; 0x68
 800b42e:	4654      	mov	r4, sl
 800b430:	2205      	movs	r2, #5
 800b432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b436:	4858      	ldr	r0, [pc, #352]	; (800b598 <_vfiprintf_r+0x24c>)
 800b438:	f000 fd44 	bl	800bec4 <memchr>
 800b43c:	9a04      	ldr	r2, [sp, #16]
 800b43e:	b9d8      	cbnz	r0, 800b478 <_vfiprintf_r+0x12c>
 800b440:	06d1      	lsls	r1, r2, #27
 800b442:	bf44      	itt	mi
 800b444:	2320      	movmi	r3, #32
 800b446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b44a:	0713      	lsls	r3, r2, #28
 800b44c:	bf44      	itt	mi
 800b44e:	232b      	movmi	r3, #43	; 0x2b
 800b450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b454:	f89a 3000 	ldrb.w	r3, [sl]
 800b458:	2b2a      	cmp	r3, #42	; 0x2a
 800b45a:	d015      	beq.n	800b488 <_vfiprintf_r+0x13c>
 800b45c:	4654      	mov	r4, sl
 800b45e:	2000      	movs	r0, #0
 800b460:	f04f 0c0a 	mov.w	ip, #10
 800b464:	9a07      	ldr	r2, [sp, #28]
 800b466:	4621      	mov	r1, r4
 800b468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b46c:	3b30      	subs	r3, #48	; 0x30
 800b46e:	2b09      	cmp	r3, #9
 800b470:	d94e      	bls.n	800b510 <_vfiprintf_r+0x1c4>
 800b472:	b1b0      	cbz	r0, 800b4a2 <_vfiprintf_r+0x156>
 800b474:	9207      	str	r2, [sp, #28]
 800b476:	e014      	b.n	800b4a2 <_vfiprintf_r+0x156>
 800b478:	eba0 0308 	sub.w	r3, r0, r8
 800b47c:	fa09 f303 	lsl.w	r3, r9, r3
 800b480:	4313      	orrs	r3, r2
 800b482:	46a2      	mov	sl, r4
 800b484:	9304      	str	r3, [sp, #16]
 800b486:	e7d2      	b.n	800b42e <_vfiprintf_r+0xe2>
 800b488:	9b03      	ldr	r3, [sp, #12]
 800b48a:	1d19      	adds	r1, r3, #4
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	9103      	str	r1, [sp, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	bfbb      	ittet	lt
 800b494:	425b      	neglt	r3, r3
 800b496:	f042 0202 	orrlt.w	r2, r2, #2
 800b49a:	9307      	strge	r3, [sp, #28]
 800b49c:	9307      	strlt	r3, [sp, #28]
 800b49e:	bfb8      	it	lt
 800b4a0:	9204      	strlt	r2, [sp, #16]
 800b4a2:	7823      	ldrb	r3, [r4, #0]
 800b4a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4a6:	d10c      	bne.n	800b4c2 <_vfiprintf_r+0x176>
 800b4a8:	7863      	ldrb	r3, [r4, #1]
 800b4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ac:	d135      	bne.n	800b51a <_vfiprintf_r+0x1ce>
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	3402      	adds	r4, #2
 800b4b2:	1d1a      	adds	r2, r3, #4
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	9203      	str	r2, [sp, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	bfb8      	it	lt
 800b4bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4c0:	9305      	str	r3, [sp, #20]
 800b4c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5a8 <_vfiprintf_r+0x25c>
 800b4c6:	2203      	movs	r2, #3
 800b4c8:	4650      	mov	r0, sl
 800b4ca:	7821      	ldrb	r1, [r4, #0]
 800b4cc:	f000 fcfa 	bl	800bec4 <memchr>
 800b4d0:	b140      	cbz	r0, 800b4e4 <_vfiprintf_r+0x198>
 800b4d2:	2340      	movs	r3, #64	; 0x40
 800b4d4:	eba0 000a 	sub.w	r0, r0, sl
 800b4d8:	fa03 f000 	lsl.w	r0, r3, r0
 800b4dc:	9b04      	ldr	r3, [sp, #16]
 800b4de:	3401      	adds	r4, #1
 800b4e0:	4303      	orrs	r3, r0
 800b4e2:	9304      	str	r3, [sp, #16]
 800b4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e8:	2206      	movs	r2, #6
 800b4ea:	482c      	ldr	r0, [pc, #176]	; (800b59c <_vfiprintf_r+0x250>)
 800b4ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4f0:	f000 fce8 	bl	800bec4 <memchr>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d03f      	beq.n	800b578 <_vfiprintf_r+0x22c>
 800b4f8:	4b29      	ldr	r3, [pc, #164]	; (800b5a0 <_vfiprintf_r+0x254>)
 800b4fa:	bb1b      	cbnz	r3, 800b544 <_vfiprintf_r+0x1f8>
 800b4fc:	9b03      	ldr	r3, [sp, #12]
 800b4fe:	3307      	adds	r3, #7
 800b500:	f023 0307 	bic.w	r3, r3, #7
 800b504:	3308      	adds	r3, #8
 800b506:	9303      	str	r3, [sp, #12]
 800b508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b50a:	443b      	add	r3, r7
 800b50c:	9309      	str	r3, [sp, #36]	; 0x24
 800b50e:	e767      	b.n	800b3e0 <_vfiprintf_r+0x94>
 800b510:	460c      	mov	r4, r1
 800b512:	2001      	movs	r0, #1
 800b514:	fb0c 3202 	mla	r2, ip, r2, r3
 800b518:	e7a5      	b.n	800b466 <_vfiprintf_r+0x11a>
 800b51a:	2300      	movs	r3, #0
 800b51c:	f04f 0c0a 	mov.w	ip, #10
 800b520:	4619      	mov	r1, r3
 800b522:	3401      	adds	r4, #1
 800b524:	9305      	str	r3, [sp, #20]
 800b526:	4620      	mov	r0, r4
 800b528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b52c:	3a30      	subs	r2, #48	; 0x30
 800b52e:	2a09      	cmp	r2, #9
 800b530:	d903      	bls.n	800b53a <_vfiprintf_r+0x1ee>
 800b532:	2b00      	cmp	r3, #0
 800b534:	d0c5      	beq.n	800b4c2 <_vfiprintf_r+0x176>
 800b536:	9105      	str	r1, [sp, #20]
 800b538:	e7c3      	b.n	800b4c2 <_vfiprintf_r+0x176>
 800b53a:	4604      	mov	r4, r0
 800b53c:	2301      	movs	r3, #1
 800b53e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b542:	e7f0      	b.n	800b526 <_vfiprintf_r+0x1da>
 800b544:	ab03      	add	r3, sp, #12
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	462a      	mov	r2, r5
 800b54a:	4630      	mov	r0, r6
 800b54c:	4b15      	ldr	r3, [pc, #84]	; (800b5a4 <_vfiprintf_r+0x258>)
 800b54e:	a904      	add	r1, sp, #16
 800b550:	f3af 8000 	nop.w
 800b554:	4607      	mov	r7, r0
 800b556:	1c78      	adds	r0, r7, #1
 800b558:	d1d6      	bne.n	800b508 <_vfiprintf_r+0x1bc>
 800b55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b55c:	07d9      	lsls	r1, r3, #31
 800b55e:	d405      	bmi.n	800b56c <_vfiprintf_r+0x220>
 800b560:	89ab      	ldrh	r3, [r5, #12]
 800b562:	059a      	lsls	r2, r3, #22
 800b564:	d402      	bmi.n	800b56c <_vfiprintf_r+0x220>
 800b566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b568:	f000 fc47 	bl	800bdfa <__retarget_lock_release_recursive>
 800b56c:	89ab      	ldrh	r3, [r5, #12]
 800b56e:	065b      	lsls	r3, r3, #25
 800b570:	f53f af12 	bmi.w	800b398 <_vfiprintf_r+0x4c>
 800b574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b576:	e711      	b.n	800b39c <_vfiprintf_r+0x50>
 800b578:	ab03      	add	r3, sp, #12
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	462a      	mov	r2, r5
 800b57e:	4630      	mov	r0, r6
 800b580:	4b08      	ldr	r3, [pc, #32]	; (800b5a4 <_vfiprintf_r+0x258>)
 800b582:	a904      	add	r1, sp, #16
 800b584:	f000 f882 	bl	800b68c <_printf_i>
 800b588:	e7e4      	b.n	800b554 <_vfiprintf_r+0x208>
 800b58a:	bf00      	nop
 800b58c:	0800d0bc 	.word	0x0800d0bc
 800b590:	0800d0dc 	.word	0x0800d0dc
 800b594:	0800d09c 	.word	0x0800d09c
 800b598:	0800d066 	.word	0x0800d066
 800b59c:	0800d070 	.word	0x0800d070
 800b5a0:	00000000 	.word	0x00000000
 800b5a4:	0800b327 	.word	0x0800b327
 800b5a8:	0800d06c 	.word	0x0800d06c

0800b5ac <_printf_common>:
 800b5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b0:	4616      	mov	r6, r2
 800b5b2:	4699      	mov	r9, r3
 800b5b4:	688a      	ldr	r2, [r1, #8]
 800b5b6:	690b      	ldr	r3, [r1, #16]
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	bfb8      	it	lt
 800b5be:	4613      	movlt	r3, r2
 800b5c0:	6033      	str	r3, [r6, #0]
 800b5c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5cc:	b10a      	cbz	r2, 800b5d2 <_printf_common+0x26>
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	6033      	str	r3, [r6, #0]
 800b5d2:	6823      	ldr	r3, [r4, #0]
 800b5d4:	0699      	lsls	r1, r3, #26
 800b5d6:	bf42      	ittt	mi
 800b5d8:	6833      	ldrmi	r3, [r6, #0]
 800b5da:	3302      	addmi	r3, #2
 800b5dc:	6033      	strmi	r3, [r6, #0]
 800b5de:	6825      	ldr	r5, [r4, #0]
 800b5e0:	f015 0506 	ands.w	r5, r5, #6
 800b5e4:	d106      	bne.n	800b5f4 <_printf_common+0x48>
 800b5e6:	f104 0a19 	add.w	sl, r4, #25
 800b5ea:	68e3      	ldr	r3, [r4, #12]
 800b5ec:	6832      	ldr	r2, [r6, #0]
 800b5ee:	1a9b      	subs	r3, r3, r2
 800b5f0:	42ab      	cmp	r3, r5
 800b5f2:	dc28      	bgt.n	800b646 <_printf_common+0x9a>
 800b5f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5f8:	1e13      	subs	r3, r2, #0
 800b5fa:	6822      	ldr	r2, [r4, #0]
 800b5fc:	bf18      	it	ne
 800b5fe:	2301      	movne	r3, #1
 800b600:	0692      	lsls	r2, r2, #26
 800b602:	d42d      	bmi.n	800b660 <_printf_common+0xb4>
 800b604:	4649      	mov	r1, r9
 800b606:	4638      	mov	r0, r7
 800b608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b60c:	47c0      	blx	r8
 800b60e:	3001      	adds	r0, #1
 800b610:	d020      	beq.n	800b654 <_printf_common+0xa8>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	68e5      	ldr	r5, [r4, #12]
 800b616:	f003 0306 	and.w	r3, r3, #6
 800b61a:	2b04      	cmp	r3, #4
 800b61c:	bf18      	it	ne
 800b61e:	2500      	movne	r5, #0
 800b620:	6832      	ldr	r2, [r6, #0]
 800b622:	f04f 0600 	mov.w	r6, #0
 800b626:	68a3      	ldr	r3, [r4, #8]
 800b628:	bf08      	it	eq
 800b62a:	1aad      	subeq	r5, r5, r2
 800b62c:	6922      	ldr	r2, [r4, #16]
 800b62e:	bf08      	it	eq
 800b630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b634:	4293      	cmp	r3, r2
 800b636:	bfc4      	itt	gt
 800b638:	1a9b      	subgt	r3, r3, r2
 800b63a:	18ed      	addgt	r5, r5, r3
 800b63c:	341a      	adds	r4, #26
 800b63e:	42b5      	cmp	r5, r6
 800b640:	d11a      	bne.n	800b678 <_printf_common+0xcc>
 800b642:	2000      	movs	r0, #0
 800b644:	e008      	b.n	800b658 <_printf_common+0xac>
 800b646:	2301      	movs	r3, #1
 800b648:	4652      	mov	r2, sl
 800b64a:	4649      	mov	r1, r9
 800b64c:	4638      	mov	r0, r7
 800b64e:	47c0      	blx	r8
 800b650:	3001      	adds	r0, #1
 800b652:	d103      	bne.n	800b65c <_printf_common+0xb0>
 800b654:	f04f 30ff 	mov.w	r0, #4294967295
 800b658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b65c:	3501      	adds	r5, #1
 800b65e:	e7c4      	b.n	800b5ea <_printf_common+0x3e>
 800b660:	2030      	movs	r0, #48	; 0x30
 800b662:	18e1      	adds	r1, r4, r3
 800b664:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b668:	1c5a      	adds	r2, r3, #1
 800b66a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b66e:	4422      	add	r2, r4
 800b670:	3302      	adds	r3, #2
 800b672:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b676:	e7c5      	b.n	800b604 <_printf_common+0x58>
 800b678:	2301      	movs	r3, #1
 800b67a:	4622      	mov	r2, r4
 800b67c:	4649      	mov	r1, r9
 800b67e:	4638      	mov	r0, r7
 800b680:	47c0      	blx	r8
 800b682:	3001      	adds	r0, #1
 800b684:	d0e6      	beq.n	800b654 <_printf_common+0xa8>
 800b686:	3601      	adds	r6, #1
 800b688:	e7d9      	b.n	800b63e <_printf_common+0x92>
	...

0800b68c <_printf_i>:
 800b68c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b690:	460c      	mov	r4, r1
 800b692:	7e27      	ldrb	r7, [r4, #24]
 800b694:	4691      	mov	r9, r2
 800b696:	2f78      	cmp	r7, #120	; 0x78
 800b698:	4680      	mov	r8, r0
 800b69a:	469a      	mov	sl, r3
 800b69c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b69e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6a2:	d807      	bhi.n	800b6b4 <_printf_i+0x28>
 800b6a4:	2f62      	cmp	r7, #98	; 0x62
 800b6a6:	d80a      	bhi.n	800b6be <_printf_i+0x32>
 800b6a8:	2f00      	cmp	r7, #0
 800b6aa:	f000 80d9 	beq.w	800b860 <_printf_i+0x1d4>
 800b6ae:	2f58      	cmp	r7, #88	; 0x58
 800b6b0:	f000 80a4 	beq.w	800b7fc <_printf_i+0x170>
 800b6b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b6b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6bc:	e03a      	b.n	800b734 <_printf_i+0xa8>
 800b6be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6c2:	2b15      	cmp	r3, #21
 800b6c4:	d8f6      	bhi.n	800b6b4 <_printf_i+0x28>
 800b6c6:	a001      	add	r0, pc, #4	; (adr r0, 800b6cc <_printf_i+0x40>)
 800b6c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b6cc:	0800b725 	.word	0x0800b725
 800b6d0:	0800b739 	.word	0x0800b739
 800b6d4:	0800b6b5 	.word	0x0800b6b5
 800b6d8:	0800b6b5 	.word	0x0800b6b5
 800b6dc:	0800b6b5 	.word	0x0800b6b5
 800b6e0:	0800b6b5 	.word	0x0800b6b5
 800b6e4:	0800b739 	.word	0x0800b739
 800b6e8:	0800b6b5 	.word	0x0800b6b5
 800b6ec:	0800b6b5 	.word	0x0800b6b5
 800b6f0:	0800b6b5 	.word	0x0800b6b5
 800b6f4:	0800b6b5 	.word	0x0800b6b5
 800b6f8:	0800b847 	.word	0x0800b847
 800b6fc:	0800b769 	.word	0x0800b769
 800b700:	0800b829 	.word	0x0800b829
 800b704:	0800b6b5 	.word	0x0800b6b5
 800b708:	0800b6b5 	.word	0x0800b6b5
 800b70c:	0800b869 	.word	0x0800b869
 800b710:	0800b6b5 	.word	0x0800b6b5
 800b714:	0800b769 	.word	0x0800b769
 800b718:	0800b6b5 	.word	0x0800b6b5
 800b71c:	0800b6b5 	.word	0x0800b6b5
 800b720:	0800b831 	.word	0x0800b831
 800b724:	680b      	ldr	r3, [r1, #0]
 800b726:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b72a:	1d1a      	adds	r2, r3, #4
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	600a      	str	r2, [r1, #0]
 800b730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b734:	2301      	movs	r3, #1
 800b736:	e0a4      	b.n	800b882 <_printf_i+0x1f6>
 800b738:	6825      	ldr	r5, [r4, #0]
 800b73a:	6808      	ldr	r0, [r1, #0]
 800b73c:	062e      	lsls	r6, r5, #24
 800b73e:	f100 0304 	add.w	r3, r0, #4
 800b742:	d50a      	bpl.n	800b75a <_printf_i+0xce>
 800b744:	6805      	ldr	r5, [r0, #0]
 800b746:	600b      	str	r3, [r1, #0]
 800b748:	2d00      	cmp	r5, #0
 800b74a:	da03      	bge.n	800b754 <_printf_i+0xc8>
 800b74c:	232d      	movs	r3, #45	; 0x2d
 800b74e:	426d      	negs	r5, r5
 800b750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b754:	230a      	movs	r3, #10
 800b756:	485e      	ldr	r0, [pc, #376]	; (800b8d0 <_printf_i+0x244>)
 800b758:	e019      	b.n	800b78e <_printf_i+0x102>
 800b75a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b75e:	6805      	ldr	r5, [r0, #0]
 800b760:	600b      	str	r3, [r1, #0]
 800b762:	bf18      	it	ne
 800b764:	b22d      	sxthne	r5, r5
 800b766:	e7ef      	b.n	800b748 <_printf_i+0xbc>
 800b768:	680b      	ldr	r3, [r1, #0]
 800b76a:	6825      	ldr	r5, [r4, #0]
 800b76c:	1d18      	adds	r0, r3, #4
 800b76e:	6008      	str	r0, [r1, #0]
 800b770:	0628      	lsls	r0, r5, #24
 800b772:	d501      	bpl.n	800b778 <_printf_i+0xec>
 800b774:	681d      	ldr	r5, [r3, #0]
 800b776:	e002      	b.n	800b77e <_printf_i+0xf2>
 800b778:	0669      	lsls	r1, r5, #25
 800b77a:	d5fb      	bpl.n	800b774 <_printf_i+0xe8>
 800b77c:	881d      	ldrh	r5, [r3, #0]
 800b77e:	2f6f      	cmp	r7, #111	; 0x6f
 800b780:	bf0c      	ite	eq
 800b782:	2308      	moveq	r3, #8
 800b784:	230a      	movne	r3, #10
 800b786:	4852      	ldr	r0, [pc, #328]	; (800b8d0 <_printf_i+0x244>)
 800b788:	2100      	movs	r1, #0
 800b78a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b78e:	6866      	ldr	r6, [r4, #4]
 800b790:	2e00      	cmp	r6, #0
 800b792:	bfa8      	it	ge
 800b794:	6821      	ldrge	r1, [r4, #0]
 800b796:	60a6      	str	r6, [r4, #8]
 800b798:	bfa4      	itt	ge
 800b79a:	f021 0104 	bicge.w	r1, r1, #4
 800b79e:	6021      	strge	r1, [r4, #0]
 800b7a0:	b90d      	cbnz	r5, 800b7a6 <_printf_i+0x11a>
 800b7a2:	2e00      	cmp	r6, #0
 800b7a4:	d04d      	beq.n	800b842 <_printf_i+0x1b6>
 800b7a6:	4616      	mov	r6, r2
 800b7a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7ac:	fb03 5711 	mls	r7, r3, r1, r5
 800b7b0:	5dc7      	ldrb	r7, [r0, r7]
 800b7b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7b6:	462f      	mov	r7, r5
 800b7b8:	42bb      	cmp	r3, r7
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	d9f4      	bls.n	800b7a8 <_printf_i+0x11c>
 800b7be:	2b08      	cmp	r3, #8
 800b7c0:	d10b      	bne.n	800b7da <_printf_i+0x14e>
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	07df      	lsls	r7, r3, #31
 800b7c6:	d508      	bpl.n	800b7da <_printf_i+0x14e>
 800b7c8:	6923      	ldr	r3, [r4, #16]
 800b7ca:	6861      	ldr	r1, [r4, #4]
 800b7cc:	4299      	cmp	r1, r3
 800b7ce:	bfde      	ittt	le
 800b7d0:	2330      	movle	r3, #48	; 0x30
 800b7d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7da:	1b92      	subs	r2, r2, r6
 800b7dc:	6122      	str	r2, [r4, #16]
 800b7de:	464b      	mov	r3, r9
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	f8cd a000 	str.w	sl, [sp]
 800b7e8:	aa03      	add	r2, sp, #12
 800b7ea:	f7ff fedf 	bl	800b5ac <_printf_common>
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	d14c      	bne.n	800b88c <_printf_i+0x200>
 800b7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f6:	b004      	add	sp, #16
 800b7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7fc:	4834      	ldr	r0, [pc, #208]	; (800b8d0 <_printf_i+0x244>)
 800b7fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b802:	680e      	ldr	r6, [r1, #0]
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	f856 5b04 	ldr.w	r5, [r6], #4
 800b80a:	061f      	lsls	r7, r3, #24
 800b80c:	600e      	str	r6, [r1, #0]
 800b80e:	d514      	bpl.n	800b83a <_printf_i+0x1ae>
 800b810:	07d9      	lsls	r1, r3, #31
 800b812:	bf44      	itt	mi
 800b814:	f043 0320 	orrmi.w	r3, r3, #32
 800b818:	6023      	strmi	r3, [r4, #0]
 800b81a:	b91d      	cbnz	r5, 800b824 <_printf_i+0x198>
 800b81c:	6823      	ldr	r3, [r4, #0]
 800b81e:	f023 0320 	bic.w	r3, r3, #32
 800b822:	6023      	str	r3, [r4, #0]
 800b824:	2310      	movs	r3, #16
 800b826:	e7af      	b.n	800b788 <_printf_i+0xfc>
 800b828:	6823      	ldr	r3, [r4, #0]
 800b82a:	f043 0320 	orr.w	r3, r3, #32
 800b82e:	6023      	str	r3, [r4, #0]
 800b830:	2378      	movs	r3, #120	; 0x78
 800b832:	4828      	ldr	r0, [pc, #160]	; (800b8d4 <_printf_i+0x248>)
 800b834:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b838:	e7e3      	b.n	800b802 <_printf_i+0x176>
 800b83a:	065e      	lsls	r6, r3, #25
 800b83c:	bf48      	it	mi
 800b83e:	b2ad      	uxthmi	r5, r5
 800b840:	e7e6      	b.n	800b810 <_printf_i+0x184>
 800b842:	4616      	mov	r6, r2
 800b844:	e7bb      	b.n	800b7be <_printf_i+0x132>
 800b846:	680b      	ldr	r3, [r1, #0]
 800b848:	6826      	ldr	r6, [r4, #0]
 800b84a:	1d1d      	adds	r5, r3, #4
 800b84c:	6960      	ldr	r0, [r4, #20]
 800b84e:	600d      	str	r5, [r1, #0]
 800b850:	0635      	lsls	r5, r6, #24
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	d501      	bpl.n	800b85a <_printf_i+0x1ce>
 800b856:	6018      	str	r0, [r3, #0]
 800b858:	e002      	b.n	800b860 <_printf_i+0x1d4>
 800b85a:	0671      	lsls	r1, r6, #25
 800b85c:	d5fb      	bpl.n	800b856 <_printf_i+0x1ca>
 800b85e:	8018      	strh	r0, [r3, #0]
 800b860:	2300      	movs	r3, #0
 800b862:	4616      	mov	r6, r2
 800b864:	6123      	str	r3, [r4, #16]
 800b866:	e7ba      	b.n	800b7de <_printf_i+0x152>
 800b868:	680b      	ldr	r3, [r1, #0]
 800b86a:	1d1a      	adds	r2, r3, #4
 800b86c:	600a      	str	r2, [r1, #0]
 800b86e:	681e      	ldr	r6, [r3, #0]
 800b870:	2100      	movs	r1, #0
 800b872:	4630      	mov	r0, r6
 800b874:	6862      	ldr	r2, [r4, #4]
 800b876:	f000 fb25 	bl	800bec4 <memchr>
 800b87a:	b108      	cbz	r0, 800b880 <_printf_i+0x1f4>
 800b87c:	1b80      	subs	r0, r0, r6
 800b87e:	6060      	str	r0, [r4, #4]
 800b880:	6863      	ldr	r3, [r4, #4]
 800b882:	6123      	str	r3, [r4, #16]
 800b884:	2300      	movs	r3, #0
 800b886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b88a:	e7a8      	b.n	800b7de <_printf_i+0x152>
 800b88c:	4632      	mov	r2, r6
 800b88e:	4649      	mov	r1, r9
 800b890:	4640      	mov	r0, r8
 800b892:	6923      	ldr	r3, [r4, #16]
 800b894:	47d0      	blx	sl
 800b896:	3001      	adds	r0, #1
 800b898:	d0ab      	beq.n	800b7f2 <_printf_i+0x166>
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	079b      	lsls	r3, r3, #30
 800b89e:	d413      	bmi.n	800b8c8 <_printf_i+0x23c>
 800b8a0:	68e0      	ldr	r0, [r4, #12]
 800b8a2:	9b03      	ldr	r3, [sp, #12]
 800b8a4:	4298      	cmp	r0, r3
 800b8a6:	bfb8      	it	lt
 800b8a8:	4618      	movlt	r0, r3
 800b8aa:	e7a4      	b.n	800b7f6 <_printf_i+0x16a>
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	4632      	mov	r2, r6
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	4640      	mov	r0, r8
 800b8b4:	47d0      	blx	sl
 800b8b6:	3001      	adds	r0, #1
 800b8b8:	d09b      	beq.n	800b7f2 <_printf_i+0x166>
 800b8ba:	3501      	adds	r5, #1
 800b8bc:	68e3      	ldr	r3, [r4, #12]
 800b8be:	9903      	ldr	r1, [sp, #12]
 800b8c0:	1a5b      	subs	r3, r3, r1
 800b8c2:	42ab      	cmp	r3, r5
 800b8c4:	dcf2      	bgt.n	800b8ac <_printf_i+0x220>
 800b8c6:	e7eb      	b.n	800b8a0 <_printf_i+0x214>
 800b8c8:	2500      	movs	r5, #0
 800b8ca:	f104 0619 	add.w	r6, r4, #25
 800b8ce:	e7f5      	b.n	800b8bc <_printf_i+0x230>
 800b8d0:	0800d077 	.word	0x0800d077
 800b8d4:	0800d088 	.word	0x0800d088

0800b8d8 <_sbrk_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	2300      	movs	r3, #0
 800b8dc:	4d05      	ldr	r5, [pc, #20]	; (800b8f4 <_sbrk_r+0x1c>)
 800b8de:	4604      	mov	r4, r0
 800b8e0:	4608      	mov	r0, r1
 800b8e2:	602b      	str	r3, [r5, #0]
 800b8e4:	f7f5 f958 	bl	8000b98 <_sbrk>
 800b8e8:	1c43      	adds	r3, r0, #1
 800b8ea:	d102      	bne.n	800b8f2 <_sbrk_r+0x1a>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	b103      	cbz	r3, 800b8f2 <_sbrk_r+0x1a>
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
 800b8f4:	20002f70 	.word	0x20002f70

0800b8f8 <__swbuf_r>:
 800b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fa:	460e      	mov	r6, r1
 800b8fc:	4614      	mov	r4, r2
 800b8fe:	4605      	mov	r5, r0
 800b900:	b118      	cbz	r0, 800b90a <__swbuf_r+0x12>
 800b902:	6983      	ldr	r3, [r0, #24]
 800b904:	b90b      	cbnz	r3, 800b90a <__swbuf_r+0x12>
 800b906:	f000 f9d9 	bl	800bcbc <__sinit>
 800b90a:	4b21      	ldr	r3, [pc, #132]	; (800b990 <__swbuf_r+0x98>)
 800b90c:	429c      	cmp	r4, r3
 800b90e:	d12b      	bne.n	800b968 <__swbuf_r+0x70>
 800b910:	686c      	ldr	r4, [r5, #4]
 800b912:	69a3      	ldr	r3, [r4, #24]
 800b914:	60a3      	str	r3, [r4, #8]
 800b916:	89a3      	ldrh	r3, [r4, #12]
 800b918:	071a      	lsls	r2, r3, #28
 800b91a:	d52f      	bpl.n	800b97c <__swbuf_r+0x84>
 800b91c:	6923      	ldr	r3, [r4, #16]
 800b91e:	b36b      	cbz	r3, 800b97c <__swbuf_r+0x84>
 800b920:	6923      	ldr	r3, [r4, #16]
 800b922:	6820      	ldr	r0, [r4, #0]
 800b924:	b2f6      	uxtb	r6, r6
 800b926:	1ac0      	subs	r0, r0, r3
 800b928:	6963      	ldr	r3, [r4, #20]
 800b92a:	4637      	mov	r7, r6
 800b92c:	4283      	cmp	r3, r0
 800b92e:	dc04      	bgt.n	800b93a <__swbuf_r+0x42>
 800b930:	4621      	mov	r1, r4
 800b932:	4628      	mov	r0, r5
 800b934:	f000 f92e 	bl	800bb94 <_fflush_r>
 800b938:	bb30      	cbnz	r0, 800b988 <__swbuf_r+0x90>
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	3001      	adds	r0, #1
 800b93e:	3b01      	subs	r3, #1
 800b940:	60a3      	str	r3, [r4, #8]
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	1c5a      	adds	r2, r3, #1
 800b946:	6022      	str	r2, [r4, #0]
 800b948:	701e      	strb	r6, [r3, #0]
 800b94a:	6963      	ldr	r3, [r4, #20]
 800b94c:	4283      	cmp	r3, r0
 800b94e:	d004      	beq.n	800b95a <__swbuf_r+0x62>
 800b950:	89a3      	ldrh	r3, [r4, #12]
 800b952:	07db      	lsls	r3, r3, #31
 800b954:	d506      	bpl.n	800b964 <__swbuf_r+0x6c>
 800b956:	2e0a      	cmp	r6, #10
 800b958:	d104      	bne.n	800b964 <__swbuf_r+0x6c>
 800b95a:	4621      	mov	r1, r4
 800b95c:	4628      	mov	r0, r5
 800b95e:	f000 f919 	bl	800bb94 <_fflush_r>
 800b962:	b988      	cbnz	r0, 800b988 <__swbuf_r+0x90>
 800b964:	4638      	mov	r0, r7
 800b966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b968:	4b0a      	ldr	r3, [pc, #40]	; (800b994 <__swbuf_r+0x9c>)
 800b96a:	429c      	cmp	r4, r3
 800b96c:	d101      	bne.n	800b972 <__swbuf_r+0x7a>
 800b96e:	68ac      	ldr	r4, [r5, #8]
 800b970:	e7cf      	b.n	800b912 <__swbuf_r+0x1a>
 800b972:	4b09      	ldr	r3, [pc, #36]	; (800b998 <__swbuf_r+0xa0>)
 800b974:	429c      	cmp	r4, r3
 800b976:	bf08      	it	eq
 800b978:	68ec      	ldreq	r4, [r5, #12]
 800b97a:	e7ca      	b.n	800b912 <__swbuf_r+0x1a>
 800b97c:	4621      	mov	r1, r4
 800b97e:	4628      	mov	r0, r5
 800b980:	f000 f80c 	bl	800b99c <__swsetup_r>
 800b984:	2800      	cmp	r0, #0
 800b986:	d0cb      	beq.n	800b920 <__swbuf_r+0x28>
 800b988:	f04f 37ff 	mov.w	r7, #4294967295
 800b98c:	e7ea      	b.n	800b964 <__swbuf_r+0x6c>
 800b98e:	bf00      	nop
 800b990:	0800d0bc 	.word	0x0800d0bc
 800b994:	0800d0dc 	.word	0x0800d0dc
 800b998:	0800d09c 	.word	0x0800d09c

0800b99c <__swsetup_r>:
 800b99c:	4b32      	ldr	r3, [pc, #200]	; (800ba68 <__swsetup_r+0xcc>)
 800b99e:	b570      	push	{r4, r5, r6, lr}
 800b9a0:	681d      	ldr	r5, [r3, #0]
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	b125      	cbz	r5, 800b9b2 <__swsetup_r+0x16>
 800b9a8:	69ab      	ldr	r3, [r5, #24]
 800b9aa:	b913      	cbnz	r3, 800b9b2 <__swsetup_r+0x16>
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	f000 f985 	bl	800bcbc <__sinit>
 800b9b2:	4b2e      	ldr	r3, [pc, #184]	; (800ba6c <__swsetup_r+0xd0>)
 800b9b4:	429c      	cmp	r4, r3
 800b9b6:	d10f      	bne.n	800b9d8 <__swsetup_r+0x3c>
 800b9b8:	686c      	ldr	r4, [r5, #4]
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9c0:	0719      	lsls	r1, r3, #28
 800b9c2:	d42c      	bmi.n	800ba1e <__swsetup_r+0x82>
 800b9c4:	06dd      	lsls	r5, r3, #27
 800b9c6:	d411      	bmi.n	800b9ec <__swsetup_r+0x50>
 800b9c8:	2309      	movs	r3, #9
 800b9ca:	6033      	str	r3, [r6, #0]
 800b9cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d4:	81a3      	strh	r3, [r4, #12]
 800b9d6:	e03e      	b.n	800ba56 <__swsetup_r+0xba>
 800b9d8:	4b25      	ldr	r3, [pc, #148]	; (800ba70 <__swsetup_r+0xd4>)
 800b9da:	429c      	cmp	r4, r3
 800b9dc:	d101      	bne.n	800b9e2 <__swsetup_r+0x46>
 800b9de:	68ac      	ldr	r4, [r5, #8]
 800b9e0:	e7eb      	b.n	800b9ba <__swsetup_r+0x1e>
 800b9e2:	4b24      	ldr	r3, [pc, #144]	; (800ba74 <__swsetup_r+0xd8>)
 800b9e4:	429c      	cmp	r4, r3
 800b9e6:	bf08      	it	eq
 800b9e8:	68ec      	ldreq	r4, [r5, #12]
 800b9ea:	e7e6      	b.n	800b9ba <__swsetup_r+0x1e>
 800b9ec:	0758      	lsls	r0, r3, #29
 800b9ee:	d512      	bpl.n	800ba16 <__swsetup_r+0x7a>
 800b9f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9f2:	b141      	cbz	r1, 800ba06 <__swsetup_r+0x6a>
 800b9f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9f8:	4299      	cmp	r1, r3
 800b9fa:	d002      	beq.n	800ba02 <__swsetup_r+0x66>
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	f7ff fbd7 	bl	800b1b0 <_free_r>
 800ba02:	2300      	movs	r3, #0
 800ba04:	6363      	str	r3, [r4, #52]	; 0x34
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba0c:	81a3      	strh	r3, [r4, #12]
 800ba0e:	2300      	movs	r3, #0
 800ba10:	6063      	str	r3, [r4, #4]
 800ba12:	6923      	ldr	r3, [r4, #16]
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	f043 0308 	orr.w	r3, r3, #8
 800ba1c:	81a3      	strh	r3, [r4, #12]
 800ba1e:	6923      	ldr	r3, [r4, #16]
 800ba20:	b94b      	cbnz	r3, 800ba36 <__swsetup_r+0x9a>
 800ba22:	89a3      	ldrh	r3, [r4, #12]
 800ba24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba2c:	d003      	beq.n	800ba36 <__swsetup_r+0x9a>
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4630      	mov	r0, r6
 800ba32:	f000 fa07 	bl	800be44 <__smakebuf_r>
 800ba36:	89a0      	ldrh	r0, [r4, #12]
 800ba38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba3c:	f010 0301 	ands.w	r3, r0, #1
 800ba40:	d00a      	beq.n	800ba58 <__swsetup_r+0xbc>
 800ba42:	2300      	movs	r3, #0
 800ba44:	60a3      	str	r3, [r4, #8]
 800ba46:	6963      	ldr	r3, [r4, #20]
 800ba48:	425b      	negs	r3, r3
 800ba4a:	61a3      	str	r3, [r4, #24]
 800ba4c:	6923      	ldr	r3, [r4, #16]
 800ba4e:	b943      	cbnz	r3, 800ba62 <__swsetup_r+0xc6>
 800ba50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba54:	d1ba      	bne.n	800b9cc <__swsetup_r+0x30>
 800ba56:	bd70      	pop	{r4, r5, r6, pc}
 800ba58:	0781      	lsls	r1, r0, #30
 800ba5a:	bf58      	it	pl
 800ba5c:	6963      	ldrpl	r3, [r4, #20]
 800ba5e:	60a3      	str	r3, [r4, #8]
 800ba60:	e7f4      	b.n	800ba4c <__swsetup_r+0xb0>
 800ba62:	2000      	movs	r0, #0
 800ba64:	e7f7      	b.n	800ba56 <__swsetup_r+0xba>
 800ba66:	bf00      	nop
 800ba68:	20000238 	.word	0x20000238
 800ba6c:	0800d0bc 	.word	0x0800d0bc
 800ba70:	0800d0dc 	.word	0x0800d0dc
 800ba74:	0800d09c 	.word	0x0800d09c

0800ba78 <abort>:
 800ba78:	2006      	movs	r0, #6
 800ba7a:	b508      	push	{r3, lr}
 800ba7c:	f000 fa64 	bl	800bf48 <raise>
 800ba80:	2001      	movs	r0, #1
 800ba82:	f7f5 f816 	bl	8000ab2 <_exit>
	...

0800ba88 <__sflush_r>:
 800ba88:	898a      	ldrh	r2, [r1, #12]
 800ba8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8e:	4605      	mov	r5, r0
 800ba90:	0710      	lsls	r0, r2, #28
 800ba92:	460c      	mov	r4, r1
 800ba94:	d458      	bmi.n	800bb48 <__sflush_r+0xc0>
 800ba96:	684b      	ldr	r3, [r1, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	dc05      	bgt.n	800baa8 <__sflush_r+0x20>
 800ba9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	dc02      	bgt.n	800baa8 <__sflush_r+0x20>
 800baa2:	2000      	movs	r0, #0
 800baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800baaa:	2e00      	cmp	r6, #0
 800baac:	d0f9      	beq.n	800baa2 <__sflush_r+0x1a>
 800baae:	2300      	movs	r3, #0
 800bab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bab4:	682f      	ldr	r7, [r5, #0]
 800bab6:	602b      	str	r3, [r5, #0]
 800bab8:	d032      	beq.n	800bb20 <__sflush_r+0x98>
 800baba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800babc:	89a3      	ldrh	r3, [r4, #12]
 800babe:	075a      	lsls	r2, r3, #29
 800bac0:	d505      	bpl.n	800bace <__sflush_r+0x46>
 800bac2:	6863      	ldr	r3, [r4, #4]
 800bac4:	1ac0      	subs	r0, r0, r3
 800bac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bac8:	b10b      	cbz	r3, 800bace <__sflush_r+0x46>
 800baca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bacc:	1ac0      	subs	r0, r0, r3
 800bace:	2300      	movs	r3, #0
 800bad0:	4602      	mov	r2, r0
 800bad2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bad4:	4628      	mov	r0, r5
 800bad6:	6a21      	ldr	r1, [r4, #32]
 800bad8:	47b0      	blx	r6
 800bada:	1c43      	adds	r3, r0, #1
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	d106      	bne.n	800baee <__sflush_r+0x66>
 800bae0:	6829      	ldr	r1, [r5, #0]
 800bae2:	291d      	cmp	r1, #29
 800bae4:	d82c      	bhi.n	800bb40 <__sflush_r+0xb8>
 800bae6:	4a2a      	ldr	r2, [pc, #168]	; (800bb90 <__sflush_r+0x108>)
 800bae8:	40ca      	lsrs	r2, r1
 800baea:	07d6      	lsls	r6, r2, #31
 800baec:	d528      	bpl.n	800bb40 <__sflush_r+0xb8>
 800baee:	2200      	movs	r2, #0
 800baf0:	6062      	str	r2, [r4, #4]
 800baf2:	6922      	ldr	r2, [r4, #16]
 800baf4:	04d9      	lsls	r1, r3, #19
 800baf6:	6022      	str	r2, [r4, #0]
 800baf8:	d504      	bpl.n	800bb04 <__sflush_r+0x7c>
 800bafa:	1c42      	adds	r2, r0, #1
 800bafc:	d101      	bne.n	800bb02 <__sflush_r+0x7a>
 800bafe:	682b      	ldr	r3, [r5, #0]
 800bb00:	b903      	cbnz	r3, 800bb04 <__sflush_r+0x7c>
 800bb02:	6560      	str	r0, [r4, #84]	; 0x54
 800bb04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb06:	602f      	str	r7, [r5, #0]
 800bb08:	2900      	cmp	r1, #0
 800bb0a:	d0ca      	beq.n	800baa2 <__sflush_r+0x1a>
 800bb0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb10:	4299      	cmp	r1, r3
 800bb12:	d002      	beq.n	800bb1a <__sflush_r+0x92>
 800bb14:	4628      	mov	r0, r5
 800bb16:	f7ff fb4b 	bl	800b1b0 <_free_r>
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	6360      	str	r0, [r4, #52]	; 0x34
 800bb1e:	e7c1      	b.n	800baa4 <__sflush_r+0x1c>
 800bb20:	6a21      	ldr	r1, [r4, #32]
 800bb22:	2301      	movs	r3, #1
 800bb24:	4628      	mov	r0, r5
 800bb26:	47b0      	blx	r6
 800bb28:	1c41      	adds	r1, r0, #1
 800bb2a:	d1c7      	bne.n	800babc <__sflush_r+0x34>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d0c4      	beq.n	800babc <__sflush_r+0x34>
 800bb32:	2b1d      	cmp	r3, #29
 800bb34:	d001      	beq.n	800bb3a <__sflush_r+0xb2>
 800bb36:	2b16      	cmp	r3, #22
 800bb38:	d101      	bne.n	800bb3e <__sflush_r+0xb6>
 800bb3a:	602f      	str	r7, [r5, #0]
 800bb3c:	e7b1      	b.n	800baa2 <__sflush_r+0x1a>
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	e7ad      	b.n	800baa4 <__sflush_r+0x1c>
 800bb48:	690f      	ldr	r7, [r1, #16]
 800bb4a:	2f00      	cmp	r7, #0
 800bb4c:	d0a9      	beq.n	800baa2 <__sflush_r+0x1a>
 800bb4e:	0793      	lsls	r3, r2, #30
 800bb50:	bf18      	it	ne
 800bb52:	2300      	movne	r3, #0
 800bb54:	680e      	ldr	r6, [r1, #0]
 800bb56:	bf08      	it	eq
 800bb58:	694b      	ldreq	r3, [r1, #20]
 800bb5a:	eba6 0807 	sub.w	r8, r6, r7
 800bb5e:	600f      	str	r7, [r1, #0]
 800bb60:	608b      	str	r3, [r1, #8]
 800bb62:	f1b8 0f00 	cmp.w	r8, #0
 800bb66:	dd9c      	ble.n	800baa2 <__sflush_r+0x1a>
 800bb68:	4643      	mov	r3, r8
 800bb6a:	463a      	mov	r2, r7
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	6a21      	ldr	r1, [r4, #32]
 800bb70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb72:	47b0      	blx	r6
 800bb74:	2800      	cmp	r0, #0
 800bb76:	dc06      	bgt.n	800bb86 <__sflush_r+0xfe>
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb82:	81a3      	strh	r3, [r4, #12]
 800bb84:	e78e      	b.n	800baa4 <__sflush_r+0x1c>
 800bb86:	4407      	add	r7, r0
 800bb88:	eba8 0800 	sub.w	r8, r8, r0
 800bb8c:	e7e9      	b.n	800bb62 <__sflush_r+0xda>
 800bb8e:	bf00      	nop
 800bb90:	20400001 	.word	0x20400001

0800bb94 <_fflush_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	690b      	ldr	r3, [r1, #16]
 800bb98:	4605      	mov	r5, r0
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	b913      	cbnz	r3, 800bba4 <_fflush_r+0x10>
 800bb9e:	2500      	movs	r5, #0
 800bba0:	4628      	mov	r0, r5
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
 800bba4:	b118      	cbz	r0, 800bbae <_fflush_r+0x1a>
 800bba6:	6983      	ldr	r3, [r0, #24]
 800bba8:	b90b      	cbnz	r3, 800bbae <_fflush_r+0x1a>
 800bbaa:	f000 f887 	bl	800bcbc <__sinit>
 800bbae:	4b14      	ldr	r3, [pc, #80]	; (800bc00 <_fflush_r+0x6c>)
 800bbb0:	429c      	cmp	r4, r3
 800bbb2:	d11b      	bne.n	800bbec <_fflush_r+0x58>
 800bbb4:	686c      	ldr	r4, [r5, #4]
 800bbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d0ef      	beq.n	800bb9e <_fflush_r+0xa>
 800bbbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bbc0:	07d0      	lsls	r0, r2, #31
 800bbc2:	d404      	bmi.n	800bbce <_fflush_r+0x3a>
 800bbc4:	0599      	lsls	r1, r3, #22
 800bbc6:	d402      	bmi.n	800bbce <_fflush_r+0x3a>
 800bbc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbca:	f000 f915 	bl	800bdf8 <__retarget_lock_acquire_recursive>
 800bbce:	4628      	mov	r0, r5
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	f7ff ff59 	bl	800ba88 <__sflush_r>
 800bbd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbd8:	4605      	mov	r5, r0
 800bbda:	07da      	lsls	r2, r3, #31
 800bbdc:	d4e0      	bmi.n	800bba0 <_fflush_r+0xc>
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	059b      	lsls	r3, r3, #22
 800bbe2:	d4dd      	bmi.n	800bba0 <_fflush_r+0xc>
 800bbe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbe6:	f000 f908 	bl	800bdfa <__retarget_lock_release_recursive>
 800bbea:	e7d9      	b.n	800bba0 <_fflush_r+0xc>
 800bbec:	4b05      	ldr	r3, [pc, #20]	; (800bc04 <_fflush_r+0x70>)
 800bbee:	429c      	cmp	r4, r3
 800bbf0:	d101      	bne.n	800bbf6 <_fflush_r+0x62>
 800bbf2:	68ac      	ldr	r4, [r5, #8]
 800bbf4:	e7df      	b.n	800bbb6 <_fflush_r+0x22>
 800bbf6:	4b04      	ldr	r3, [pc, #16]	; (800bc08 <_fflush_r+0x74>)
 800bbf8:	429c      	cmp	r4, r3
 800bbfa:	bf08      	it	eq
 800bbfc:	68ec      	ldreq	r4, [r5, #12]
 800bbfe:	e7da      	b.n	800bbb6 <_fflush_r+0x22>
 800bc00:	0800d0bc 	.word	0x0800d0bc
 800bc04:	0800d0dc 	.word	0x0800d0dc
 800bc08:	0800d09c 	.word	0x0800d09c

0800bc0c <std>:
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	b510      	push	{r4, lr}
 800bc10:	4604      	mov	r4, r0
 800bc12:	e9c0 3300 	strd	r3, r3, [r0]
 800bc16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc1a:	6083      	str	r3, [r0, #8]
 800bc1c:	8181      	strh	r1, [r0, #12]
 800bc1e:	6643      	str	r3, [r0, #100]	; 0x64
 800bc20:	81c2      	strh	r2, [r0, #14]
 800bc22:	6183      	str	r3, [r0, #24]
 800bc24:	4619      	mov	r1, r3
 800bc26:	2208      	movs	r2, #8
 800bc28:	305c      	adds	r0, #92	; 0x5c
 800bc2a:	f7ff fa41 	bl	800b0b0 <memset>
 800bc2e:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <std+0x38>)
 800bc30:	6224      	str	r4, [r4, #32]
 800bc32:	6263      	str	r3, [r4, #36]	; 0x24
 800bc34:	4b04      	ldr	r3, [pc, #16]	; (800bc48 <std+0x3c>)
 800bc36:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc38:	4b04      	ldr	r3, [pc, #16]	; (800bc4c <std+0x40>)
 800bc3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc3c:	4b04      	ldr	r3, [pc, #16]	; (800bc50 <std+0x44>)
 800bc3e:	6323      	str	r3, [r4, #48]	; 0x30
 800bc40:	bd10      	pop	{r4, pc}
 800bc42:	bf00      	nop
 800bc44:	0800bf81 	.word	0x0800bf81
 800bc48:	0800bfa3 	.word	0x0800bfa3
 800bc4c:	0800bfdb 	.word	0x0800bfdb
 800bc50:	0800bfff 	.word	0x0800bfff

0800bc54 <_cleanup_r>:
 800bc54:	4901      	ldr	r1, [pc, #4]	; (800bc5c <_cleanup_r+0x8>)
 800bc56:	f000 b8af 	b.w	800bdb8 <_fwalk_reent>
 800bc5a:	bf00      	nop
 800bc5c:	0800bb95 	.word	0x0800bb95

0800bc60 <__sfmoreglue>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	2568      	movs	r5, #104	; 0x68
 800bc64:	1e4a      	subs	r2, r1, #1
 800bc66:	4355      	muls	r5, r2
 800bc68:	460e      	mov	r6, r1
 800bc6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc6e:	f7ff faeb 	bl	800b248 <_malloc_r>
 800bc72:	4604      	mov	r4, r0
 800bc74:	b140      	cbz	r0, 800bc88 <__sfmoreglue+0x28>
 800bc76:	2100      	movs	r1, #0
 800bc78:	e9c0 1600 	strd	r1, r6, [r0]
 800bc7c:	300c      	adds	r0, #12
 800bc7e:	60a0      	str	r0, [r4, #8]
 800bc80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc84:	f7ff fa14 	bl	800b0b0 <memset>
 800bc88:	4620      	mov	r0, r4
 800bc8a:	bd70      	pop	{r4, r5, r6, pc}

0800bc8c <__sfp_lock_acquire>:
 800bc8c:	4801      	ldr	r0, [pc, #4]	; (800bc94 <__sfp_lock_acquire+0x8>)
 800bc8e:	f000 b8b3 	b.w	800bdf8 <__retarget_lock_acquire_recursive>
 800bc92:	bf00      	nop
 800bc94:	20002f6f 	.word	0x20002f6f

0800bc98 <__sfp_lock_release>:
 800bc98:	4801      	ldr	r0, [pc, #4]	; (800bca0 <__sfp_lock_release+0x8>)
 800bc9a:	f000 b8ae 	b.w	800bdfa <__retarget_lock_release_recursive>
 800bc9e:	bf00      	nop
 800bca0:	20002f6f 	.word	0x20002f6f

0800bca4 <__sinit_lock_acquire>:
 800bca4:	4801      	ldr	r0, [pc, #4]	; (800bcac <__sinit_lock_acquire+0x8>)
 800bca6:	f000 b8a7 	b.w	800bdf8 <__retarget_lock_acquire_recursive>
 800bcaa:	bf00      	nop
 800bcac:	20002f6a 	.word	0x20002f6a

0800bcb0 <__sinit_lock_release>:
 800bcb0:	4801      	ldr	r0, [pc, #4]	; (800bcb8 <__sinit_lock_release+0x8>)
 800bcb2:	f000 b8a2 	b.w	800bdfa <__retarget_lock_release_recursive>
 800bcb6:	bf00      	nop
 800bcb8:	20002f6a 	.word	0x20002f6a

0800bcbc <__sinit>:
 800bcbc:	b510      	push	{r4, lr}
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	f7ff fff0 	bl	800bca4 <__sinit_lock_acquire>
 800bcc4:	69a3      	ldr	r3, [r4, #24]
 800bcc6:	b11b      	cbz	r3, 800bcd0 <__sinit+0x14>
 800bcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bccc:	f7ff bff0 	b.w	800bcb0 <__sinit_lock_release>
 800bcd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bcd4:	6523      	str	r3, [r4, #80]	; 0x50
 800bcd6:	4b13      	ldr	r3, [pc, #76]	; (800bd24 <__sinit+0x68>)
 800bcd8:	4a13      	ldr	r2, [pc, #76]	; (800bd28 <__sinit+0x6c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	62a2      	str	r2, [r4, #40]	; 0x28
 800bcde:	42a3      	cmp	r3, r4
 800bce0:	bf08      	it	eq
 800bce2:	2301      	moveq	r3, #1
 800bce4:	4620      	mov	r0, r4
 800bce6:	bf08      	it	eq
 800bce8:	61a3      	streq	r3, [r4, #24]
 800bcea:	f000 f81f 	bl	800bd2c <__sfp>
 800bcee:	6060      	str	r0, [r4, #4]
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 f81b 	bl	800bd2c <__sfp>
 800bcf6:	60a0      	str	r0, [r4, #8]
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f000 f817 	bl	800bd2c <__sfp>
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2104      	movs	r1, #4
 800bd02:	60e0      	str	r0, [r4, #12]
 800bd04:	6860      	ldr	r0, [r4, #4]
 800bd06:	f7ff ff81 	bl	800bc0c <std>
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	2109      	movs	r1, #9
 800bd0e:	68a0      	ldr	r0, [r4, #8]
 800bd10:	f7ff ff7c 	bl	800bc0c <std>
 800bd14:	2202      	movs	r2, #2
 800bd16:	2112      	movs	r1, #18
 800bd18:	68e0      	ldr	r0, [r4, #12]
 800bd1a:	f7ff ff77 	bl	800bc0c <std>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	61a3      	str	r3, [r4, #24]
 800bd22:	e7d1      	b.n	800bcc8 <__sinit+0xc>
 800bd24:	0800cfb0 	.word	0x0800cfb0
 800bd28:	0800bc55 	.word	0x0800bc55

0800bd2c <__sfp>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	4607      	mov	r7, r0
 800bd30:	f7ff ffac 	bl	800bc8c <__sfp_lock_acquire>
 800bd34:	4b1e      	ldr	r3, [pc, #120]	; (800bdb0 <__sfp+0x84>)
 800bd36:	681e      	ldr	r6, [r3, #0]
 800bd38:	69b3      	ldr	r3, [r6, #24]
 800bd3a:	b913      	cbnz	r3, 800bd42 <__sfp+0x16>
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f7ff ffbd 	bl	800bcbc <__sinit>
 800bd42:	3648      	adds	r6, #72	; 0x48
 800bd44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	d503      	bpl.n	800bd54 <__sfp+0x28>
 800bd4c:	6833      	ldr	r3, [r6, #0]
 800bd4e:	b30b      	cbz	r3, 800bd94 <__sfp+0x68>
 800bd50:	6836      	ldr	r6, [r6, #0]
 800bd52:	e7f7      	b.n	800bd44 <__sfp+0x18>
 800bd54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd58:	b9d5      	cbnz	r5, 800bd90 <__sfp+0x64>
 800bd5a:	4b16      	ldr	r3, [pc, #88]	; (800bdb4 <__sfp+0x88>)
 800bd5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd60:	60e3      	str	r3, [r4, #12]
 800bd62:	6665      	str	r5, [r4, #100]	; 0x64
 800bd64:	f000 f847 	bl	800bdf6 <__retarget_lock_init_recursive>
 800bd68:	f7ff ff96 	bl	800bc98 <__sfp_lock_release>
 800bd6c:	2208      	movs	r2, #8
 800bd6e:	4629      	mov	r1, r5
 800bd70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd78:	6025      	str	r5, [r4, #0]
 800bd7a:	61a5      	str	r5, [r4, #24]
 800bd7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd80:	f7ff f996 	bl	800b0b0 <memset>
 800bd84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd90:	3468      	adds	r4, #104	; 0x68
 800bd92:	e7d9      	b.n	800bd48 <__sfp+0x1c>
 800bd94:	2104      	movs	r1, #4
 800bd96:	4638      	mov	r0, r7
 800bd98:	f7ff ff62 	bl	800bc60 <__sfmoreglue>
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	6030      	str	r0, [r6, #0]
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d1d5      	bne.n	800bd50 <__sfp+0x24>
 800bda4:	f7ff ff78 	bl	800bc98 <__sfp_lock_release>
 800bda8:	230c      	movs	r3, #12
 800bdaa:	603b      	str	r3, [r7, #0]
 800bdac:	e7ee      	b.n	800bd8c <__sfp+0x60>
 800bdae:	bf00      	nop
 800bdb0:	0800cfb0 	.word	0x0800cfb0
 800bdb4:	ffff0001 	.word	0xffff0001

0800bdb8 <_fwalk_reent>:
 800bdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	4688      	mov	r8, r1
 800bdc0:	2700      	movs	r7, #0
 800bdc2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bdc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdca:	f1b9 0901 	subs.w	r9, r9, #1
 800bdce:	d505      	bpl.n	800bddc <_fwalk_reent+0x24>
 800bdd0:	6824      	ldr	r4, [r4, #0]
 800bdd2:	2c00      	cmp	r4, #0
 800bdd4:	d1f7      	bne.n	800bdc6 <_fwalk_reent+0xe>
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bddc:	89ab      	ldrh	r3, [r5, #12]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d907      	bls.n	800bdf2 <_fwalk_reent+0x3a>
 800bde2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bde6:	3301      	adds	r3, #1
 800bde8:	d003      	beq.n	800bdf2 <_fwalk_reent+0x3a>
 800bdea:	4629      	mov	r1, r5
 800bdec:	4630      	mov	r0, r6
 800bdee:	47c0      	blx	r8
 800bdf0:	4307      	orrs	r7, r0
 800bdf2:	3568      	adds	r5, #104	; 0x68
 800bdf4:	e7e9      	b.n	800bdca <_fwalk_reent+0x12>

0800bdf6 <__retarget_lock_init_recursive>:
 800bdf6:	4770      	bx	lr

0800bdf8 <__retarget_lock_acquire_recursive>:
 800bdf8:	4770      	bx	lr

0800bdfa <__retarget_lock_release_recursive>:
 800bdfa:	4770      	bx	lr

0800bdfc <__swhatbuf_r>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	460e      	mov	r6, r1
 800be00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be04:	4614      	mov	r4, r2
 800be06:	2900      	cmp	r1, #0
 800be08:	461d      	mov	r5, r3
 800be0a:	b096      	sub	sp, #88	; 0x58
 800be0c:	da07      	bge.n	800be1e <__swhatbuf_r+0x22>
 800be0e:	2300      	movs	r3, #0
 800be10:	602b      	str	r3, [r5, #0]
 800be12:	89b3      	ldrh	r3, [r6, #12]
 800be14:	061a      	lsls	r2, r3, #24
 800be16:	d410      	bmi.n	800be3a <__swhatbuf_r+0x3e>
 800be18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be1c:	e00e      	b.n	800be3c <__swhatbuf_r+0x40>
 800be1e:	466a      	mov	r2, sp
 800be20:	f000 f914 	bl	800c04c <_fstat_r>
 800be24:	2800      	cmp	r0, #0
 800be26:	dbf2      	blt.n	800be0e <__swhatbuf_r+0x12>
 800be28:	9a01      	ldr	r2, [sp, #4]
 800be2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be32:	425a      	negs	r2, r3
 800be34:	415a      	adcs	r2, r3
 800be36:	602a      	str	r2, [r5, #0]
 800be38:	e7ee      	b.n	800be18 <__swhatbuf_r+0x1c>
 800be3a:	2340      	movs	r3, #64	; 0x40
 800be3c:	2000      	movs	r0, #0
 800be3e:	6023      	str	r3, [r4, #0]
 800be40:	b016      	add	sp, #88	; 0x58
 800be42:	bd70      	pop	{r4, r5, r6, pc}

0800be44 <__smakebuf_r>:
 800be44:	898b      	ldrh	r3, [r1, #12]
 800be46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be48:	079d      	lsls	r5, r3, #30
 800be4a:	4606      	mov	r6, r0
 800be4c:	460c      	mov	r4, r1
 800be4e:	d507      	bpl.n	800be60 <__smakebuf_r+0x1c>
 800be50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	6123      	str	r3, [r4, #16]
 800be58:	2301      	movs	r3, #1
 800be5a:	6163      	str	r3, [r4, #20]
 800be5c:	b002      	add	sp, #8
 800be5e:	bd70      	pop	{r4, r5, r6, pc}
 800be60:	466a      	mov	r2, sp
 800be62:	ab01      	add	r3, sp, #4
 800be64:	f7ff ffca 	bl	800bdfc <__swhatbuf_r>
 800be68:	9900      	ldr	r1, [sp, #0]
 800be6a:	4605      	mov	r5, r0
 800be6c:	4630      	mov	r0, r6
 800be6e:	f7ff f9eb 	bl	800b248 <_malloc_r>
 800be72:	b948      	cbnz	r0, 800be88 <__smakebuf_r+0x44>
 800be74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be78:	059a      	lsls	r2, r3, #22
 800be7a:	d4ef      	bmi.n	800be5c <__smakebuf_r+0x18>
 800be7c:	f023 0303 	bic.w	r3, r3, #3
 800be80:	f043 0302 	orr.w	r3, r3, #2
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	e7e3      	b.n	800be50 <__smakebuf_r+0xc>
 800be88:	4b0d      	ldr	r3, [pc, #52]	; (800bec0 <__smakebuf_r+0x7c>)
 800be8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	6020      	str	r0, [r4, #0]
 800be90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be94:	81a3      	strh	r3, [r4, #12]
 800be96:	9b00      	ldr	r3, [sp, #0]
 800be98:	6120      	str	r0, [r4, #16]
 800be9a:	6163      	str	r3, [r4, #20]
 800be9c:	9b01      	ldr	r3, [sp, #4]
 800be9e:	b15b      	cbz	r3, 800beb8 <__smakebuf_r+0x74>
 800bea0:	4630      	mov	r0, r6
 800bea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bea6:	f000 f8e3 	bl	800c070 <_isatty_r>
 800beaa:	b128      	cbz	r0, 800beb8 <__smakebuf_r+0x74>
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	f023 0303 	bic.w	r3, r3, #3
 800beb2:	f043 0301 	orr.w	r3, r3, #1
 800beb6:	81a3      	strh	r3, [r4, #12]
 800beb8:	89a0      	ldrh	r0, [r4, #12]
 800beba:	4305      	orrs	r5, r0
 800bebc:	81a5      	strh	r5, [r4, #12]
 800bebe:	e7cd      	b.n	800be5c <__smakebuf_r+0x18>
 800bec0:	0800bc55 	.word	0x0800bc55

0800bec4 <memchr>:
 800bec4:	4603      	mov	r3, r0
 800bec6:	b510      	push	{r4, lr}
 800bec8:	b2c9      	uxtb	r1, r1
 800beca:	4402      	add	r2, r0
 800becc:	4293      	cmp	r3, r2
 800bece:	4618      	mov	r0, r3
 800bed0:	d101      	bne.n	800bed6 <memchr+0x12>
 800bed2:	2000      	movs	r0, #0
 800bed4:	e003      	b.n	800bede <memchr+0x1a>
 800bed6:	7804      	ldrb	r4, [r0, #0]
 800bed8:	3301      	adds	r3, #1
 800beda:	428c      	cmp	r4, r1
 800bedc:	d1f6      	bne.n	800becc <memchr+0x8>
 800bede:	bd10      	pop	{r4, pc}

0800bee0 <__malloc_lock>:
 800bee0:	4801      	ldr	r0, [pc, #4]	; (800bee8 <__malloc_lock+0x8>)
 800bee2:	f7ff bf89 	b.w	800bdf8 <__retarget_lock_acquire_recursive>
 800bee6:	bf00      	nop
 800bee8:	20002f6b 	.word	0x20002f6b

0800beec <__malloc_unlock>:
 800beec:	4801      	ldr	r0, [pc, #4]	; (800bef4 <__malloc_unlock+0x8>)
 800beee:	f7ff bf84 	b.w	800bdfa <__retarget_lock_release_recursive>
 800bef2:	bf00      	nop
 800bef4:	20002f6b 	.word	0x20002f6b

0800bef8 <_raise_r>:
 800bef8:	291f      	cmp	r1, #31
 800befa:	b538      	push	{r3, r4, r5, lr}
 800befc:	4604      	mov	r4, r0
 800befe:	460d      	mov	r5, r1
 800bf00:	d904      	bls.n	800bf0c <_raise_r+0x14>
 800bf02:	2316      	movs	r3, #22
 800bf04:	6003      	str	r3, [r0, #0]
 800bf06:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf0e:	b112      	cbz	r2, 800bf16 <_raise_r+0x1e>
 800bf10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf14:	b94b      	cbnz	r3, 800bf2a <_raise_r+0x32>
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 f830 	bl	800bf7c <_getpid_r>
 800bf1c:	462a      	mov	r2, r5
 800bf1e:	4601      	mov	r1, r0
 800bf20:	4620      	mov	r0, r4
 800bf22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf26:	f000 b817 	b.w	800bf58 <_kill_r>
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d00a      	beq.n	800bf44 <_raise_r+0x4c>
 800bf2e:	1c59      	adds	r1, r3, #1
 800bf30:	d103      	bne.n	800bf3a <_raise_r+0x42>
 800bf32:	2316      	movs	r3, #22
 800bf34:	6003      	str	r3, [r0, #0]
 800bf36:	2001      	movs	r0, #1
 800bf38:	e7e7      	b.n	800bf0a <_raise_r+0x12>
 800bf3a:	2400      	movs	r4, #0
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf42:	4798      	blx	r3
 800bf44:	2000      	movs	r0, #0
 800bf46:	e7e0      	b.n	800bf0a <_raise_r+0x12>

0800bf48 <raise>:
 800bf48:	4b02      	ldr	r3, [pc, #8]	; (800bf54 <raise+0xc>)
 800bf4a:	4601      	mov	r1, r0
 800bf4c:	6818      	ldr	r0, [r3, #0]
 800bf4e:	f7ff bfd3 	b.w	800bef8 <_raise_r>
 800bf52:	bf00      	nop
 800bf54:	20000238 	.word	0x20000238

0800bf58 <_kill_r>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	4d06      	ldr	r5, [pc, #24]	; (800bf78 <_kill_r+0x20>)
 800bf5e:	4604      	mov	r4, r0
 800bf60:	4608      	mov	r0, r1
 800bf62:	4611      	mov	r1, r2
 800bf64:	602b      	str	r3, [r5, #0]
 800bf66:	f7f4 fd94 	bl	8000a92 <_kill>
 800bf6a:	1c43      	adds	r3, r0, #1
 800bf6c:	d102      	bne.n	800bf74 <_kill_r+0x1c>
 800bf6e:	682b      	ldr	r3, [r5, #0]
 800bf70:	b103      	cbz	r3, 800bf74 <_kill_r+0x1c>
 800bf72:	6023      	str	r3, [r4, #0]
 800bf74:	bd38      	pop	{r3, r4, r5, pc}
 800bf76:	bf00      	nop
 800bf78:	20002f70 	.word	0x20002f70

0800bf7c <_getpid_r>:
 800bf7c:	f7f4 bd82 	b.w	8000a84 <_getpid>

0800bf80 <__sread>:
 800bf80:	b510      	push	{r4, lr}
 800bf82:	460c      	mov	r4, r1
 800bf84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf88:	f000 f894 	bl	800c0b4 <_read_r>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	bfab      	itete	ge
 800bf90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf92:	89a3      	ldrhlt	r3, [r4, #12]
 800bf94:	181b      	addge	r3, r3, r0
 800bf96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf9a:	bfac      	ite	ge
 800bf9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf9e:	81a3      	strhlt	r3, [r4, #12]
 800bfa0:	bd10      	pop	{r4, pc}

0800bfa2 <__swrite>:
 800bfa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa6:	461f      	mov	r7, r3
 800bfa8:	898b      	ldrh	r3, [r1, #12]
 800bfaa:	4605      	mov	r5, r0
 800bfac:	05db      	lsls	r3, r3, #23
 800bfae:	460c      	mov	r4, r1
 800bfb0:	4616      	mov	r6, r2
 800bfb2:	d505      	bpl.n	800bfc0 <__swrite+0x1e>
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfbc:	f000 f868 	bl	800c090 <_lseek_r>
 800bfc0:	89a3      	ldrh	r3, [r4, #12]
 800bfc2:	4632      	mov	r2, r6
 800bfc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfc8:	81a3      	strh	r3, [r4, #12]
 800bfca:	4628      	mov	r0, r5
 800bfcc:	463b      	mov	r3, r7
 800bfce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd6:	f000 b817 	b.w	800c008 <_write_r>

0800bfda <__sseek>:
 800bfda:	b510      	push	{r4, lr}
 800bfdc:	460c      	mov	r4, r1
 800bfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe2:	f000 f855 	bl	800c090 <_lseek_r>
 800bfe6:	1c43      	adds	r3, r0, #1
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	bf15      	itete	ne
 800bfec:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bff6:	81a3      	strheq	r3, [r4, #12]
 800bff8:	bf18      	it	ne
 800bffa:	81a3      	strhne	r3, [r4, #12]
 800bffc:	bd10      	pop	{r4, pc}

0800bffe <__sclose>:
 800bffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c002:	f000 b813 	b.w	800c02c <_close_r>
	...

0800c008 <_write_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4604      	mov	r4, r0
 800c00c:	4608      	mov	r0, r1
 800c00e:	4611      	mov	r1, r2
 800c010:	2200      	movs	r2, #0
 800c012:	4d05      	ldr	r5, [pc, #20]	; (800c028 <_write_r+0x20>)
 800c014:	602a      	str	r2, [r5, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	f7f4 fd72 	bl	8000b00 <_write>
 800c01c:	1c43      	adds	r3, r0, #1
 800c01e:	d102      	bne.n	800c026 <_write_r+0x1e>
 800c020:	682b      	ldr	r3, [r5, #0]
 800c022:	b103      	cbz	r3, 800c026 <_write_r+0x1e>
 800c024:	6023      	str	r3, [r4, #0]
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	20002f70 	.word	0x20002f70

0800c02c <_close_r>:
 800c02c:	b538      	push	{r3, r4, r5, lr}
 800c02e:	2300      	movs	r3, #0
 800c030:	4d05      	ldr	r5, [pc, #20]	; (800c048 <_close_r+0x1c>)
 800c032:	4604      	mov	r4, r0
 800c034:	4608      	mov	r0, r1
 800c036:	602b      	str	r3, [r5, #0]
 800c038:	f7f4 fd7e 	bl	8000b38 <_close>
 800c03c:	1c43      	adds	r3, r0, #1
 800c03e:	d102      	bne.n	800c046 <_close_r+0x1a>
 800c040:	682b      	ldr	r3, [r5, #0]
 800c042:	b103      	cbz	r3, 800c046 <_close_r+0x1a>
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	20002f70 	.word	0x20002f70

0800c04c <_fstat_r>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	2300      	movs	r3, #0
 800c050:	4d06      	ldr	r5, [pc, #24]	; (800c06c <_fstat_r+0x20>)
 800c052:	4604      	mov	r4, r0
 800c054:	4608      	mov	r0, r1
 800c056:	4611      	mov	r1, r2
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	f7f4 fd78 	bl	8000b4e <_fstat>
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	d102      	bne.n	800c068 <_fstat_r+0x1c>
 800c062:	682b      	ldr	r3, [r5, #0]
 800c064:	b103      	cbz	r3, 800c068 <_fstat_r+0x1c>
 800c066:	6023      	str	r3, [r4, #0]
 800c068:	bd38      	pop	{r3, r4, r5, pc}
 800c06a:	bf00      	nop
 800c06c:	20002f70 	.word	0x20002f70

0800c070 <_isatty_r>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	2300      	movs	r3, #0
 800c074:	4d05      	ldr	r5, [pc, #20]	; (800c08c <_isatty_r+0x1c>)
 800c076:	4604      	mov	r4, r0
 800c078:	4608      	mov	r0, r1
 800c07a:	602b      	str	r3, [r5, #0]
 800c07c:	f7f4 fd76 	bl	8000b6c <_isatty>
 800c080:	1c43      	adds	r3, r0, #1
 800c082:	d102      	bne.n	800c08a <_isatty_r+0x1a>
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	b103      	cbz	r3, 800c08a <_isatty_r+0x1a>
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	bd38      	pop	{r3, r4, r5, pc}
 800c08c:	20002f70 	.word	0x20002f70

0800c090 <_lseek_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4604      	mov	r4, r0
 800c094:	4608      	mov	r0, r1
 800c096:	4611      	mov	r1, r2
 800c098:	2200      	movs	r2, #0
 800c09a:	4d05      	ldr	r5, [pc, #20]	; (800c0b0 <_lseek_r+0x20>)
 800c09c:	602a      	str	r2, [r5, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f7f4 fd6e 	bl	8000b80 <_lseek>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d102      	bne.n	800c0ae <_lseek_r+0x1e>
 800c0a8:	682b      	ldr	r3, [r5, #0]
 800c0aa:	b103      	cbz	r3, 800c0ae <_lseek_r+0x1e>
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	20002f70 	.word	0x20002f70

0800c0b4 <_read_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	2200      	movs	r2, #0
 800c0be:	4d05      	ldr	r5, [pc, #20]	; (800c0d4 <_read_r+0x20>)
 800c0c0:	602a      	str	r2, [r5, #0]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	f7f4 fcff 	bl	8000ac6 <_read>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d102      	bne.n	800c0d2 <_read_r+0x1e>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <_read_r+0x1e>
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	20002f70 	.word	0x20002f70

0800c0d8 <_init>:
 800c0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0da:	bf00      	nop
 800c0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0de:	bc08      	pop	{r3}
 800c0e0:	469e      	mov	lr, r3
 800c0e2:	4770      	bx	lr

0800c0e4 <_fini>:
 800c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e6:	bf00      	nop
 800c0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ea:	bc08      	pop	{r3}
 800c0ec:	469e      	mov	lr, r3
 800c0ee:	4770      	bx	lr
